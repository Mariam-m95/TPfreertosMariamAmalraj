
tp_amal_mariam_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008384  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab8  08008ab8  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac0  08008ac0  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac0  08008ac0  00009ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008ac8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004510  20000074  08008b3c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004584  08008b3c  0000a584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012807  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e8  00000000  00000000  0001c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b87  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ed  00000000  00000000  0002174f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c82  00000000  00000000  00026e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2dbb  00000000  00000000  0003aabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  0012d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00131ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800853c 	.word	0x0800853c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800853c 	.word	0x0800853c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094
 800060c:	200000e8 	.word	0x200000e8

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fac0 	bl	8004bb2 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08008560 	.word	0x08008560
 8000644:	20000090 	.word	0x20000090

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f004 fafa 	bl	8004c4a <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	4bad      	ldr	r3, [pc, #692]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aac      	ldr	r2, [pc, #688]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4baa      	ldr	r3, [pc, #680]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	4ba7      	ldr	r3, [pc, #668]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4aa6      	ldr	r2, [pc, #664]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4ba4      	ldr	r3, [pc, #656]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4ba1      	ldr	r3, [pc, #644]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa0      	ldr	r2, [pc, #640]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b9e      	ldr	r3, [pc, #632]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b98      	ldr	r3, [pc, #608]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b95      	ldr	r3, [pc, #596]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a94      	ldr	r2, [pc, #592]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b92      	ldr	r3, [pc, #584]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a8e      	ldr	r2, [pc, #568]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b8c      	ldr	r3, [pc, #560]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006fe:	4b89      	ldr	r3, [pc, #548]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b83      	ldr	r3, [pc, #524]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a82      	ldr	r2, [pc, #520]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b80      	ldr	r3, [pc, #512]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800072e:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a7c      	ldr	r2, [pc, #496]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b77      	ldr	r3, [pc, #476]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a76      	ldr	r2, [pc, #472]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a70      	ldr	r2, [pc, #448]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	486b      	ldr	r0, [pc, #428]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 800077c:	f001 fe2c 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000786:	4869      	ldr	r0, [pc, #420]	@ (800092c <MX_GPIO_Init+0x2d4>)
 8000788:	f001 fe26 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <MX_GPIO_Init+0x2d8>)
 8000792:	f001 fe21 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <MX_GPIO_Init+0x2dc>)
 800079e:	f001 fe1b 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	21c8      	movs	r1, #200	@ 0xc8
 80007a6:	4864      	ldr	r0, [pc, #400]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 80007a8:	f001 fe16 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007c8:	f001 fc5a 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007cc:	2308      	movs	r3, #8
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	4619      	mov	r1, r3
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <MX_GPIO_Init+0x2e4>)
 80007e0:	f001 fc4e 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007f4:	2309      	movs	r3, #9
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	484f      	ldr	r0, [pc, #316]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000800:	f001 fc3e 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000804:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4845      	ldr	r0, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x2e0>)
 8000822:	f001 fc2d 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	483e      	ldr	r0, [pc, #248]	@ (800093c <MX_GPIO_Init+0x2e4>)
 8000844:	f001 fc1c 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084e:	2312      	movs	r3, #18
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000866:	f001 fc0b 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800086a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800087c:	230a      	movs	r3, #10
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 8000888:	f001 fbfa 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x2e8>)
 80008a8:	f001 fbea 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008bc:	2308      	movs	r3, #8
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 fbda 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008cc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008de:	230c      	movs	r3, #12
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_GPIO_Init+0x2ec>)
 80008ea:	f001 fbc9 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000900:	2301      	movs	r3, #1
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	480f      	ldr	r0, [pc, #60]	@ (8000948 <MX_GPIO_Init+0x2f0>)
 800090c:	f001 fbb8 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000920:	230d      	movs	r3, #13
 8000922:	e013      	b.n	800094c <MX_GPIO_Init+0x2f4>
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40022000 	.word	0x40022000
 8000930:	40022800 	.word	0x40022800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40021800 	.word	0x40021800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	48bc      	ldr	r0, [pc, #752]	@ (8000c48 <MX_GPIO_Init+0x5f0>)
 8000956:	f001 fb93 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	48b5      	ldr	r0, [pc, #724]	@ (8000c4c <MX_GPIO_Init+0x5f4>)
 8000976:	f001 fb83 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800097a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800098c:	230c      	movs	r3, #12
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48ae      	ldr	r0, [pc, #696]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000998:	f001 fb72 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800099c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	48a6      	ldr	r0, [pc, #664]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009ba:	f001 fb61 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48a0      	ldr	r0, [pc, #640]	@ (8000c54 <MX_GPIO_Init+0x5fc>)
 80009d4:	f001 fb54 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	489a      	ldr	r0, [pc, #616]	@ (8000c58 <MX_GPIO_Init+0x600>)
 80009ee:	f001 fb47 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4892      	ldr	r0, [pc, #584]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000a10:	f001 fb36 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	488a      	ldr	r0, [pc, #552]	@ (8000c5c <MX_GPIO_Init+0x604>)
 8000a32:	f001 fb25 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a46:	230a      	movs	r3, #10
 8000a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4883      	ldr	r0, [pc, #524]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000a52:	f001 fb15 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a56:	23f7      	movs	r3, #247	@ 0xf7
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a66:	230e      	movs	r3, #14
 8000a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	487c      	ldr	r0, [pc, #496]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000a72:	f001 fb05 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	486f      	ldr	r0, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000a94:	f001 faf4 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4866      	ldr	r0, [pc, #408]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000ab6:	f001 fae3 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aba:	2320      	movs	r3, #32
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4861      	ldr	r0, [pc, #388]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000ad2:	f001 fad5 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4859      	ldr	r0, [pc, #356]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000af2:	f001 fac5 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000af6:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4854      	ldr	r0, [pc, #336]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b10:	f001 fab6 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	484f      	ldr	r0, [pc, #316]	@ (8000c68 <MX_GPIO_Init+0x610>)
 8000b2a:	f001 faa9 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4848      	ldr	r0, [pc, #288]	@ (8000c6c <MX_GPIO_Init+0x614>)
 8000b4c:	f001 fa98 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <MX_GPIO_Init+0x608>)
 8000b6e:	f001 fa87 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x60c>)
 8000b8a:	f001 fa79 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ba0:	230d      	movs	r3, #13
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0x5f8>)
 8000bac:	f001 fa68 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4825      	ldr	r0, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000bc4:	f001 fa5c 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <MX_GPIO_Init+0x600>)
 8000be4:	f001 fa4c 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000be8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000bfe:	f001 fa3f 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c1c:	f001 fa30 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c20:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x618>)
 8000c3e:	f001 fa1f 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e016      	b.n	8000c74 <MX_GPIO_Init+0x61c>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40022400 	.word	0x40022400
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022800 	.word	0x40022800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021c00 	.word	0x40021c00
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	48a4      	ldr	r0, [pc, #656]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000c8e:	f001 f9f7 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	489e      	ldr	r0, [pc, #632]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ca8:	f001 f9ea 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4896      	ldr	r0, [pc, #600]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000cca:	f001 f9d9 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	488e      	ldr	r0, [pc, #568]	@ (8000f20 <MX_GPIO_Init+0x8c8>)
 8000ce6:	f001 f9cb 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d06:	f001 f9bb 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4881      	ldr	r0, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d26:	f001 f9ab 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2a:	2328      	movs	r3, #40	@ 0x28
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4879      	ldr	r0, [pc, #484]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000d46:	f001 f99b 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d4a:	23c8      	movs	r3, #200	@ 0xc8
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4873      	ldr	r0, [pc, #460]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000d62:	f001 f98d 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d66:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	486e      	ldr	r0, [pc, #440]	@ (8000f34 <MX_GPIO_Init+0x8dc>)
 8000d7c:	f001 f980 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d80:	2308      	movs	r3, #8
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4863      	ldr	r0, [pc, #396]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000d9c:	f001 f970 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000da0:	2305      	movs	r3, #5
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db0:	230a      	movs	r3, #10
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000dbc:	f001 f960 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4853      	ldr	r0, [pc, #332]	@ (8000f28 <MX_GPIO_Init+0x8d0>)
 8000ddc:	f001 f950 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	2309      	movs	r3, #9
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484f      	ldr	r0, [pc, #316]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000dfc:	f001 f940 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	2309      	movs	r3, #9
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4847      	ldr	r0, [pc, #284]	@ (8000f3c <MX_GPIO_Init+0x8e4>)
 8000e1e:	f001 f92f 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x8d8>)
 8000e36:	f001 f923 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3a:	2386      	movs	r3, #134	@ 0x86
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e56:	f001 f913 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e6e:	f001 f907 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e72:	2350      	movs	r3, #80	@ 0x50
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e82:	230d      	movs	r3, #13
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000e8e:	f001 f8f7 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481f      	ldr	r0, [pc, #124]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000eb0:	f001 f8e6 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb4:	2328      	movs	r3, #40	@ 0x28
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <MX_GPIO_Init+0x8cc>)
 8000ed0:	f001 f8d6 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <MX_GPIO_Init+0x8d4>)
 8000ef0:	f001 f8c6 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ef4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f06:	2305      	movs	r3, #5
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_GPIO_Init+0x8e0>)
 8000f12:	f001 f8b5 	bl	8002080 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f48:	1d39      	adds	r1, r7, #4
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <__io_putchar+0x20>)
 8000f52:	f002 fb73 	bl	800363c <HAL_UART_Transmit>
	return ch;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000660 	.word	0x20000660

08000f64 <fonction>:
		vTaskDelay(pdMS_TO_TICKS(delay));
	}
}

int fonction(int argc, char ** argv)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000f6e:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <fonction+0x1c>)
 8000f70:	f006 fa96 	bl	80074a0 <puts>
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	080086a4 	.word	0x080086a4

08000f84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x24>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d102      	bne.n	8000f9c <HAL_UART_RxCpltCallback+0x18>
	{
		shell_uart_receive_irq_cb();
 8000f96:	f000 fa81 	bl	800149c <shell_uart_receive_irq_cb>
	}
	else{
		Error_Handler();
	}
}
 8000f9a:	e001      	b.n	8000fa0 <HAL_UART_RxCpltCallback+0x1c>
		Error_Handler();
 8000f9c:	f000 fa78 	bl	8001490 <Error_Handler>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40011000 	.word	0x40011000

08000fac <led_task>:

void led_task(void *pvParameters){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	int period = (int)pvParameters;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <led_task+0x34>)
 8000fbe:	f001 fa0b 	bl	80023d8 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 fdf7 	bl	8005bb8 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <led_task+0x34>)
 8000fd0:	f001 fa02 	bl	80023d8 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fdee 	bl	8005bb8 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000fdc:	bf00      	nop
 8000fde:	e7eb      	b.n	8000fb8 <led_task+0xc>
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <sh_led>:
	}
}

int sh_led(int argc, char ** argv)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	if(argc>1){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	dd43      	ble.n	800107c <sh_led+0x98>
		int period = atoi(argv[1]);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 f89e 	bl	800713c <atoi>
 8001000:	60f8      	str	r0, [r7, #12]
		if(period ==0){
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d112      	bne.n	800102e <sh_led+0x4a>
			if (xLedTaskHandle != NULL) {
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <sh_led+0xb0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01a      	beq.n	8001046 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <sh_led+0xb0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fd3d 	bl	8005a94 <vTaskDelete>
				xLedTaskHandle = NULL;
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <sh_led+0xb0>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	481c      	ldr	r0, [pc, #112]	@ (8001098 <sh_led+0xb4>)
 8001026:	f001 f9d7 	bl	80023d8 <HAL_GPIO_WritePin>
				return 0;
 800102a:	2300      	movs	r3, #0
 800102c:	e02d      	b.n	800108a <sh_led+0xa6>
			}
		}
		else{
			if (xLedTaskHandle != NULL) {
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <sh_led+0xb0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <sh_led+0xb0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fd2a 	bl	8005a94 <vTaskDelete>
				xLedTaskHandle = NULL;
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <sh_led+0xb0>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
			}
		}
		BaseType_t ret = xTaskCreate(led_task, "LED_Task", STACK_SIZE_LONG, (void*)period, TASK_LED_PRIORITY, &xLedTaskHandle);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <sh_led+0xb0>)
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001054:	4911      	ldr	r1, [pc, #68]	@ (800109c <sh_led+0xb8>)
 8001056:	4812      	ldr	r0, [pc, #72]	@ (80010a0 <sh_led+0xbc>)
 8001058:	f004 fbe2 	bl	8005820 <xTaskCreate>
 800105c:	60b8      	str	r0, [r7, #8]
		if (ret == pdPASS) {
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d104      	bne.n	800106e <sh_led+0x8a>
			printf("Tâche LED lancée avec une période de %d ms\r\n",period);
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <sh_led+0xc0>)
 8001068:	f006 f9b2 	bl	80073d0 <iprintf>
 800106c:	e004      	b.n	8001078 <sh_led+0x94>
		} else {
			printf("Erreur création tâche LED\r\n");
 800106e:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <sh_led+0xc4>)
 8001070:	f006 fa16 	bl	80074a0 <puts>
			Error_Handler();
 8001074:	f000 fa0c 	bl	8001490 <Error_Handler>
		}
		return 1;
 8001078:	2301      	movs	r3, #1
 800107a:	e006      	b.n	800108a <sh_led+0xa6>
	}
	else{
		printf("Erreur : ajouter la période\r\n");
 800107c:	480b      	ldr	r0, [pc, #44]	@ (80010ac <sh_led+0xc8>)
 800107e:	f006 fa0f 	bl	80074a0 <puts>
		Error_Handler();
 8001082:	f000 fa05 	bl	8001490 <Error_Handler>
		return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002e8 	.word	0x200002e8
 8001098:	40022000 	.word	0x40022000
 800109c:	080086c0 	.word	0x080086c0
 80010a0:	08000fad 	.word	0x08000fad
 80010a4:	080086cc 	.word	0x080086cc
 80010a8:	080086fc 	.word	0x080086fc
 80010ac:	0800871c 	.word	0x0800871c

080010b0 <spam_task>:

void spam_task(void *pvParameters) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	SpamParams *params = (SpamParams*) pvParameters;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	613b      	str	r3, [r7, #16]
	char* msg = params->msg;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
	int count = params->count;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60bb      	str	r3, [r7, #8]
	int i;

	if (xMutexSpam == NULL) {
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <spam_task+0xa4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <spam_task+0x2c>
		xMutexSpam = xSemaphoreCreateMutex();
 80010d0:	2001      	movs	r0, #1
 80010d2:	f003 ff6b 	bl	8004fac <xQueueCreateMutex>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <spam_task+0xa4>)
 80010da:	6013      	str	r3, [r2, #0]
	}

	if (xMutexSpam != NULL) {
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <spam_task+0xa4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d022      	beq.n	800112a <spam_task+0x7a>
		if (xSemaphoreTake(xMutexSpam, portMAX_DELAY) == pdPASS) {
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <spam_task+0xa4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 f917 	bl	8005320 <xQueueSemaphoreTake>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d11d      	bne.n	8001134 <spam_task+0x84>
			for (i = 0; i < count; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e009      	b.n	8001112 <spam_task+0x62>
				printf("%s\r\n", msg);
 80010fe:	68f9      	ldr	r1, [r7, #12]
 8001100:	4815      	ldr	r0, [pc, #84]	@ (8001158 <spam_task+0xa8>)
 8001102:	f006 f965 	bl	80073d0 <iprintf>
				vTaskDelay(pdMS_TO_TICKS(100));
 8001106:	2064      	movs	r0, #100	@ 0x64
 8001108:	f004 fd56 	bl	8005bb8 <vTaskDelay>
			for (i = 0; i < count; i++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbf1      	blt.n	80010fe <spam_task+0x4e>
			}
			xSemaphoreGive(xMutexSpam);
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <spam_task+0xa4>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	f003 ff5a 	bl	8004fdc <xQueueGenericSend>
 8001128:	e004      	b.n	8001134 <spam_task+0x84>
		}
	} else {
		printf("Erreur création du mutex\r\n");
 800112a:	480c      	ldr	r0, [pc, #48]	@ (800115c <spam_task+0xac>)
 800112c:	f006 f9b8 	bl	80074a0 <puts>
		Error_Handler();
 8001130:	f000 f9ae 	bl	8001490 <Error_Handler>
	}

	if (xSpamHandle != NULL) {
 8001134:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <spam_task+0xb0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <spam_task+0x9c>
		vTaskDelete(xSpamHandle);
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <spam_task+0xb0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fca7 	bl	8005a94 <vTaskDelete>
		xSpamHandle = NULL;
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <spam_task+0xb0>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
	}
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002f4 	.word	0x200002f4
 8001158:	0800873c 	.word	0x0800873c
 800115c:	08008744 	.word	0x08008744
 8001160:	200002f0 	.word	0x200002f0

08001164 <sh_spam>:

int sh_spam(int argc, char **argv) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	if (argc > 2) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b02      	cmp	r3, #2
 8001172:	dd4e      	ble.n	8001212 <sh_spam+0xae>
		spam_params.msg = argv[1];
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4a2b      	ldr	r2, [pc, #172]	@ (8001228 <sh_spam+0xc4>)
 800117a:	6013      	str	r3, [r2, #0]
		spam_params.count = atoi(argv[2]);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3308      	adds	r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f005 ffda 	bl	800713c <atoi>
 8001188:	4603      	mov	r3, r0
 800118a:	4a27      	ldr	r2, [pc, #156]	@ (8001228 <sh_spam+0xc4>)
 800118c:	6053      	str	r3, [r2, #4]

		if (xMutexSpam == NULL) {
 800118e:	4b27      	ldr	r3, [pc, #156]	@ (800122c <sh_spam+0xc8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <sh_spam+0x3e>
			xMutexSpam = xSemaphoreCreateMutex();
 8001196:	2001      	movs	r0, #1
 8001198:	f003 ff08 	bl	8004fac <xQueueCreateMutex>
 800119c:	4603      	mov	r3, r0
 800119e:	4a23      	ldr	r2, [pc, #140]	@ (800122c <sh_spam+0xc8>)
 80011a0:	6013      	str	r3, [r2, #0]
		}

		if (xMutexSpam != NULL) {
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <sh_spam+0xc8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d029      	beq.n	80011fe <sh_spam+0x9a>
			if (xSemaphoreTake(xMutexSpam, portMAX_DELAY) == pdPASS) {
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <sh_spam+0xc8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f04f 31ff 	mov.w	r1, #4294967295
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 f8b4 	bl	8005320 <xQueueSemaphoreTake>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d127      	bne.n	800120e <sh_spam+0xaa>
				BaseType_t ret = xTaskCreate(spam_task, "SPAM_task", STACK_SIZE_LONG, (void*)&spam_params, TASK_SPAM_PRIORITY, &xSpamHandle);
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <sh_spam+0xcc>)
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <sh_spam+0xc4>)
 80011c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011cc:	4919      	ldr	r1, [pc, #100]	@ (8001234 <sh_spam+0xd0>)
 80011ce:	481a      	ldr	r0, [pc, #104]	@ (8001238 <sh_spam+0xd4>)
 80011d0:	f004 fb26 	bl	8005820 <xTaskCreate>
 80011d4:	60f8      	str	r0, [r7, #12]
				if (ret == pdPASS) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d103      	bne.n	80011e4 <sh_spam+0x80>
					printf("Debut SPAM : \r\n");
 80011dc:	4817      	ldr	r0, [pc, #92]	@ (800123c <sh_spam+0xd8>)
 80011de:	f006 f95f 	bl	80074a0 <puts>
 80011e2:	e004      	b.n	80011ee <sh_spam+0x8a>
				} else {
					printf("Erreur création tâche SPAM\r\n");
 80011e4:	4816      	ldr	r0, [pc, #88]	@ (8001240 <sh_spam+0xdc>)
 80011e6:	f006 f95b 	bl	80074a0 <puts>
					Error_Handler();
 80011ea:	f000 f951 	bl	8001490 <Error_Handler>
				}
				xSemaphoreGive(xMutexSpam);
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <sh_spam+0xc8>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	f003 fef0 	bl	8004fdc <xQueueGenericSend>
 80011fc:	e007      	b.n	800120e <sh_spam+0xaa>
			}
		} else {
			printf("Erreur création du mutex\r\n");
 80011fe:	4811      	ldr	r0, [pc, #68]	@ (8001244 <sh_spam+0xe0>)
 8001200:	f006 f94e 	bl	80074a0 <puts>
			Error_Handler();
 8001204:	f000 f944 	bl	8001490 <Error_Handler>
			return -1;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	e008      	b.n	8001220 <sh_spam+0xbc>
		}
		return 1;
 800120e:	2301      	movs	r3, #1
 8001210:	e006      	b.n	8001220 <sh_spam+0xbc>
	} else {
		printf("Erreur : ajouter le message et le nombre de répétitions\r\n");
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <sh_spam+0xe4>)
 8001214:	f006 f944 	bl	80074a0 <puts>
		Error_Handler();
 8001218:	f000 f93a 	bl	8001490 <Error_Handler>
		return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002fc 	.word	0x200002fc
 800122c:	200002f4 	.word	0x200002f4
 8001230:	200002f0 	.word	0x200002f0
 8001234:	08008760 	.word	0x08008760
 8001238:	080010b1 	.word	0x080010b1
 800123c:	0800876c 	.word	0x0800876c
 8001240:	0800877c 	.word	0x0800877c
 8001244:	08008744 	.word	0x08008744
 8001248:	0800879c 	.word	0x0800879c

0800124c <overflow_task>:

void overflow_task(void *pvParameters)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8001252:	af00      	add	r7, sp, #0
 8001254:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001258:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 800125c:	6018      	str	r0, [r3, #0]
    printf("Démarrage de la tâche Overflow...\r\n");
 800125e:	4807      	ldr	r0, [pc, #28]	@ (800127c <overflow_task+0x30>)
 8001260:	f006 f91e 	bl	80074a0 <puts>

    while (1) {
            char large_array[1000];
            printf("Taille de tableau: %d bytes\r\n", sizeof(large_array));
 8001264:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <overflow_task+0x34>)
 800126a:	f006 f8b1 	bl	80073d0 <iprintf>
            vTaskDelay(pdMS_TO_TICKS(1000));
 800126e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001272:	f004 fca1 	bl	8005bb8 <vTaskDelay>
    while (1) {
 8001276:	bf00      	nop
 8001278:	e7f4      	b.n	8001264 <overflow_task+0x18>
 800127a:	bf00      	nop
 800127c:	080087d8 	.word	0x080087d8
 8001280:	08008800 	.word	0x08008800

08001284 <sh_overflow>:
        }
}

int sh_overflow(int argc, char **argv)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	BaseType_t ret = xTaskCreate(overflow_task, "Overflow_task", STACK_SIZE_ERROR, NULL, TASK_OVER_PRIORITY, &xOverflowHandle);
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <sh_overflow+0x44>)
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	2301      	movs	r3, #1
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	2264      	movs	r2, #100	@ 0x64
 800129a:	490c      	ldr	r1, [pc, #48]	@ (80012cc <sh_overflow+0x48>)
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <sh_overflow+0x4c>)
 800129e:	f004 fabf 	bl	8005820 <xTaskCreate>
 80012a2:	60f8      	str	r0, [r7, #12]

    if (ret == pdPASS) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d103      	bne.n	80012b2 <sh_overflow+0x2e>
        printf("Tâche Overflow créée avec succès !\r\n");
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <sh_overflow+0x50>)
 80012ac:	f006 f8f8 	bl	80074a0 <puts>
 80012b0:	e004      	b.n	80012bc <sh_overflow+0x38>
    } else {
        printf("Erreur création tâche Overflow.\r\n");
 80012b2:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <sh_overflow+0x54>)
 80012b4:	f006 f8f4 	bl	80074a0 <puts>
        Error_Handler();
 80012b8:	f000 f8ea 	bl	8001490 <Error_Handler>
    }

    return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	08008820 	.word	0x08008820
 80012d0:	0800124d 	.word	0x0800124d
 80012d4:	08008830 	.word	0x08008830
 80012d8:	08008858 	.word	0x08008858

080012dc <task_shell>:



void task_shell(void * unused){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	shell_init();
 80012e4:	f000 f966 	bl	80015b4 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <task_shell+0x40>)
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <task_shell+0x44>)
 80012ec:	2066      	movs	r0, #102	@ 0x66
 80012ee:	f000 f999 	bl	8001624 <shell_add>
	shell_add('l', sh_led, "Fonction LED");
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <task_shell+0x48>)
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <task_shell+0x4c>)
 80012f6:	206c      	movs	r0, #108	@ 0x6c
 80012f8:	f000 f994 	bl	8001624 <shell_add>
	shell_add('s', sh_spam, "Fonction SPAM");
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <task_shell+0x50>)
 80012fe:	490c      	ldr	r1, [pc, #48]	@ (8001330 <task_shell+0x54>)
 8001300:	2073      	movs	r0, #115	@ 0x73
 8001302:	f000 f98f 	bl	8001624 <shell_add>
	shell_add('o',sh_overflow, "Fonction Overflow");
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <task_shell+0x58>)
 8001308:	490b      	ldr	r1, [pc, #44]	@ (8001338 <task_shell+0x5c>)
 800130a:	206f      	movs	r0, #111	@ 0x6f
 800130c:	f000 f98a 	bl	8001624 <shell_add>
	shell_run();	// boucle infinie
 8001310:	f000 fa34 	bl	800177c <shell_run>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0800887c 	.word	0x0800887c
 8001320:	08000f65 	.word	0x08000f65
 8001324:	08008894 	.word	0x08008894
 8001328:	08000fe5 	.word	0x08000fe5
 800132c:	080088a4 	.word	0x080088a4
 8001330:	08001165 	.word	0x08001165
 8001334:	080088b4 	.word	0x080088b4
 8001338:	08001285 	.word	0x08001285

0800133c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001342:	f000 fc78 	bl	8001c36 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001346:	f000 f837 	bl	80013b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800134a:	f7ff f985 	bl	8000658 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800134e:	f000 fb8f 	bl	8001a70 <MX_USART1_UART_Init>
	//	configASSERT(pdPASS == ret);


	//vTaskStartScheduler();

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2102      	movs	r1, #2
 8001356:	4813      	ldr	r0, [pc, #76]	@ (80013a4 <main+0x68>)
 8001358:	f001 f83e 	bl	80023d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800135c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001360:	f000 fcc6 	bl	8001cf0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <main+0x68>)
 800136a:	f001 f835 	bl	80023d8 <HAL_GPIO_WritePin>


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <main+0x6c>)
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2301      	movs	r3, #1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137c:	490b      	ldr	r1, [pc, #44]	@ (80013ac <main+0x70>)
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <main+0x74>)
 8001380:	f004 fa4e 	bl	8005820 <xTaskCreate>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d004      	beq.n	8001394 <main+0x58>
	{
		printf("Error creating task shell\r\n");
 800138a:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0x78>)
 800138c:	f006 f888 	bl	80074a0 <puts>
		Error_Handler();
 8001390:	f000 f87e 	bl	8001490 <Error_Handler>
	}

	vTaskStartScheduler();
 8001394:	f004 fc48 	bl	8005c28 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001398:	f7ff f93a 	bl	8000610 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800139c:	f003 fc02 	bl	8004ba4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <main+0x64>
 80013a4:	40022000 	.word	0x40022000
 80013a8:	200002ec 	.word	0x200002ec
 80013ac:	080088c8 	.word	0x080088c8
 80013b0:	080012dd 	.word	0x080012dd
 80013b4:	080088d0 	.word	0x080088d0

080013b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	@ 0x50
 80013bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	@ 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 f980 	bl	80076cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <SystemClock_Config+0xd0>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a29      	ldr	r2, [pc, #164]	@ (8001488 <SystemClock_Config+0xd0>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <SystemClock_Config+0xd0>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <SystemClock_Config+0xd4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a24      	ldr	r2, [pc, #144]	@ (800148c <SystemClock_Config+0xd4>)
 80013fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b22      	ldr	r3, [pc, #136]	@ (800148c <SystemClock_Config+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001424:	23d8      	movs	r3, #216	@ 0xd8
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f001 f839 	bl	80024ac <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001440:	f000 f826 	bl	8001490 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001444:	f000 ffe2 	bl	800240c <HAL_PWREx_EnableOverDrive>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800144e:	f000 f81f 	bl	8001490 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001462:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2107      	movs	r1, #7
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fabf 	bl	80029f4 <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 800147c:	f000 f808 	bl	8001490 <Error_Handler>
	}
}
 8001480:	bf00      	nop
 8001482:	3750      	adds	r7, #80	@ 0x50
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <Error_Handler+0x8>

0800149c <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <shell_uart_receive_irq_cb+0x38>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1d3a      	adds	r2, r7, #4
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fe9e 	bl	80051f0 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <shell_uart_receive_irq_cb+0x2e>
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <shell_uart_receive_irq_cb+0x3c>)
 80014bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f3bf 8f4f 	dsb	sy
 80014c6:	f3bf 8f6f 	isb	sy
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000630 	.word	0x20000630
 80014d8:	e000ed04 	.word	0xe000ed04

080014dc <uart_read>:

static char uart_read() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <uart_read+0x2c>)
 80014ea:	f002 f930 	bl	800374e <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <uart_read+0x30>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 31ff 	mov.w	r1, #4294967295
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 ff12 	bl	8005320 <xQueueSemaphoreTake>

	return c;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000660 	.word	0x20000660
 800150c:	20000630 	.word	0x20000630

08001510 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 800151c:	887a      	ldrh	r2, [r7, #2]
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <uart_write+0x24>)
 8001526:	f002 f889 	bl	800363c <HAL_UART_Transmit>
	return size;
 800152a:	887b      	ldrh	r3, [r7, #2]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000660 	.word	0x20000660

08001538 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e022      	b.n	800158e <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001548:	4916      	ldr	r1, [pc, #88]	@ (80015a4 <sh_help+0x6c>)
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	4912      	ldr	r1, [pc, #72]	@ (80015a4 <sh_help+0x6c>)
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3308      	adds	r3, #8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4603      	mov	r3, r0
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <sh_help+0x70>)
 8001572:	2128      	movs	r1, #40	@ 0x28
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <sh_help+0x74>)
 8001576:	f005 ff9b 	bl	80074b0 <sniprintf>
 800157a:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <sh_help+0x74>)
 8001584:	f7ff ffc4 	bl	8001510 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <sh_help+0x78>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbd7      	blt.n	8001548 <sh_help+0x10>
	}

	return 0;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000308 	.word	0x20000308
 80015a8:	080088ec 	.word	0x080088ec
 80015ac:	20000608 	.word	0x20000608
 80015b0:	20000304 	.word	0x20000304

080015b4 <shell_init>:

void shell_init() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	int size = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80015be:	4a13      	ldr	r2, [pc, #76]	@ (800160c <shell_init+0x58>)
 80015c0:	2128      	movs	r1, #40	@ 0x28
 80015c2:	4813      	ldr	r0, [pc, #76]	@ (8001610 <shell_init+0x5c>)
 80015c4:	f005 ff74 	bl	80074b0 <sniprintf>
 80015c8:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	480f      	ldr	r0, [pc, #60]	@ (8001610 <shell_init+0x5c>)
 80015d2:	f7ff ff9d 	bl	8001510 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 80015d6:	2203      	movs	r2, #3
 80015d8:	2100      	movs	r1, #0
 80015da:	2001      	movs	r0, #1
 80015dc:	f003 fc6a 	bl	8004eb4 <xQueueGenericCreate>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001614 <shell_init+0x60>)
 80015e4:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <shell_init+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 80015ee:	480a      	ldr	r0, [pc, #40]	@ (8001618 <shell_init+0x64>)
 80015f0:	f005 ff56 	bl	80074a0 <puts>
		while(1);
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 80015f8:	4a08      	ldr	r2, [pc, #32]	@ (800161c <shell_init+0x68>)
 80015fa:	4909      	ldr	r1, [pc, #36]	@ (8001620 <shell_init+0x6c>)
 80015fc:	2068      	movs	r0, #104	@ 0x68
 80015fe:	f000 f811 	bl	8001624 <shell_add>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	080088f8 	.word	0x080088f8
 8001610:	20000608 	.word	0x20000608
 8001614:	20000630 	.word	0x20000630
 8001618:	08008920 	.word	0x08008920
 800161c:	08008938 	.word	0x08008938
 8001620:	08001539 	.word	0x08001539

08001624 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <shell_add+0x74>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b3f      	cmp	r3, #63	@ 0x3f
 8001638:	dc26      	bgt.n	8001688 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <shell_add+0x74>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4917      	ldr	r1, [pc, #92]	@ (800169c <shell_add+0x78>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <shell_add+0x74>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4912      	ldr	r1, [pc, #72]	@ (800169c <shell_add+0x78>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3304      	adds	r3, #4
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <shell_add+0x74>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	490c      	ldr	r1, [pc, #48]	@ (800169c <shell_add+0x78>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <shell_add+0x74>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <shell_add+0x74>)
 8001682:	6013      	str	r3, [r2, #0]
		return 0;
 8001684:	2300      	movs	r3, #0
 8001686:	e001      	b.n	800168c <shell_add+0x68>
	}

	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000304 	.word	0x20000304
 800169c:	20000308 	.word	0x20000308

080016a0 <shell_exec>:

static int shell_exec(char * buf) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b090      	sub	sp, #64	@ 0x40
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016b4:	e040      	b.n	8001738 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 80016b6:	492d      	ldr	r1, [pc, #180]	@ (800176c <shell_exec+0xcc>)
 80016b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d131      	bne.n	8001732 <shell_exec+0x92>
			argc = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016da:	e013      	b.n	8001704 <shell_exec+0x64>
				if(*p == ' ') {
 80016dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d10c      	bne.n	80016fe <shell_exec+0x5e>
					*p = '\0';
 80016e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80016ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80016f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f2:	3201      	adds	r2, #1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3340      	adds	r3, #64	@ 0x40
 80016f8:	443b      	add	r3, r7
 80016fa:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80016fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001700:	3301      	adds	r3, #1
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
 8001704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <shell_exec+0x72>
 800170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800170e:	2b07      	cmp	r3, #7
 8001710:	dde4      	ble.n	80016dc <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001712:	4916      	ldr	r1, [pc, #88]	@ (800176c <shell_exec+0xcc>)
 8001714:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3304      	adds	r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	4611      	mov	r1, r2
 800172a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	e017      	b.n	8001762 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001734:	3301      	adds	r3, #1
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <shell_exec+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800173e:	429a      	cmp	r2, r3
 8001740:	dbb9      	blt.n	80016b6 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001742:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001746:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <shell_exec+0xd4>)
 8001748:	2128      	movs	r1, #40	@ 0x28
 800174a:	480b      	ldr	r0, [pc, #44]	@ (8001778 <shell_exec+0xd8>)
 800174c:	f005 feb0 	bl	80074b0 <sniprintf>
 8001750:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001754:	b29b      	uxth	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <shell_exec+0xd8>)
 800175a:	f7ff fed9 	bl	8001510 <uart_write>
	return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	3740      	adds	r7, #64	@ 0x40
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000308 	.word	0x20000308
 8001770:	20000304 	.word	0x20000304
 8001774:	08008940 	.word	0x08008940
 8001778:	20000608 	.word	0x20000608

0800177c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
	int reading = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800178a:	2102      	movs	r1, #2
 800178c:	482a      	ldr	r0, [pc, #168]	@ (8001838 <shell_run+0xbc>)
 800178e:	f7ff febf 	bl	8001510 <uart_write>
		reading = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001796:	e047      	b.n	8001828 <shell_run+0xac>
			char c = uart_read();
 8001798:	f7ff fea0 	bl	80014dc <uart_read>
 800179c:	4603      	mov	r3, r0
 800179e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d025      	beq.n	80017f2 <shell_run+0x76>
 80017a6:	2b0d      	cmp	r3, #13
 80017a8:	d12e      	bne.n	8001808 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 80017aa:	4a24      	ldr	r2, [pc, #144]	@ (800183c <shell_run+0xc0>)
 80017ac:	2128      	movs	r1, #40	@ 0x28
 80017ae:	4824      	ldr	r0, [pc, #144]	@ (8001840 <shell_run+0xc4>)
 80017b0:	f005 fe7e 	bl	80074b0 <sniprintf>
 80017b4:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4619      	mov	r1, r3
 80017bc:	4820      	ldr	r0, [pc, #128]	@ (8001840 <shell_run+0xc4>)
 80017be:	f7ff fea7 	bl	8001510 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	60ba      	str	r2, [r7, #8]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <shell_run+0xc8>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <shell_run+0xc8>)
 80017d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <shell_run+0xcc>)
 80017d2:	2128      	movs	r1, #40	@ 0x28
 80017d4:	481a      	ldr	r0, [pc, #104]	@ (8001840 <shell_run+0xc4>)
 80017d6:	f005 fe6b 	bl	80074b0 <sniprintf>
 80017da:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4817      	ldr	r0, [pc, #92]	@ (8001840 <shell_run+0xc4>)
 80017e4:	f7ff fe94 	bl	8001510 <uart_write>
				reading = 0;        //exit read loop
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
				break;
 80017f0:	e01a      	b.n	8001828 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd16      	ble.n	8001826 <shell_run+0xaa>
					pos--;          //remove it in buffer
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80017fe:	2103      	movs	r1, #3
 8001800:	4812      	ldr	r0, [pc, #72]	@ (800184c <shell_run+0xd0>)
 8001802:	f7ff fe85 	bl	8001510 <uart_write>
				}
				break;
 8001806:	e00e      	b.n	8001826 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b27      	cmp	r3, #39	@ 0x27
 800180c:	dc0c      	bgt.n	8001828 <shell_run+0xac>
					uart_write(&c, 1);
 800180e:	1cfb      	adds	r3, r7, #3
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe7c 	bl	8001510 <uart_write>
					cmd_buffer[pos++] = c; //store
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	78f9      	ldrb	r1, [r7, #3]
 8001820:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <shell_run+0xc8>)
 8001822:	54d1      	strb	r1, [r2, r3]
 8001824:	e000      	b.n	8001828 <shell_run+0xac>
				break;
 8001826:	bf00      	nop
		while(reading) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1b4      	bne.n	8001798 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <shell_run+0xc8>)
 8001830:	f7ff ff36 	bl	80016a0 <shell_exec>
		uart_write(prompt, 2);
 8001834:	e7a9      	b.n	800178a <shell_run+0xe>
 8001836:	bf00      	nop
 8001838:	20000004 	.word	0x20000004
 800183c:	08008958 	.word	0x08008958
 8001840:	20000608 	.word	0x20000608
 8001844:	20000634 	.word	0x20000634
 8001848:	0800895c 	.word	0x0800895c
 800184c:	20000000 	.word	0x20000000

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001878:	6453      	str	r3, [r2, #68]	@ 0x44
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f000 fb2e 	bl	8001eee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <NMI_Handler+0x4>

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <MemManage_Handler+0x4>

080018b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018da:	f000 f9e9 	bl	8001cb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018de:	f004 fdc1 	bl	8006464 <xTaskGetSchedulerState>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018e8:	f005 f9a6 	bl	8006c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <USART1_IRQHandler+0x10>)
 80018f6:	f001 ff6f 	bl	80037d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000660 	.word	0x20000660

08001904 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e00a      	b.n	800192c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001916:	f3af 8000 	nop.w
 800191a:	4601      	mov	r1, r0
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf0      	blt.n	8001916 <_read+0x12>
  }

  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e009      	b.n	8001964 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff faf1 	bl	8000f40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf1      	blt.n	8001950 <_write+0x12>
  }
  return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_close>:

int _close(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199e:	605a      	str	r2, [r3, #4]
  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_isatty>:

int _isatty(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f005 feaa 	bl	8007768 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20050000 	.word	0x20050000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	2000065c 	.word	0x2000065c
 8001a48:	20004588 	.word	0x20004588

08001a4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <MX_USART1_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <MX_USART1_UART_Init+0x58>)
 8001ab4:	f001 fd74 	bl	80035a0 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fce7 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000660 	.word	0x20000660
 8001acc:	40011000 	.word	0x40011000

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	2284      	movs	r2, #132	@ 0x84
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fdeb 	bl	80076cc <memset>
  if(uartHandle->Instance==USART1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a36      	ldr	r2, [pc, #216]	@ (8001bd4 <HAL_UART_MspInit+0x104>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d164      	bne.n	8001bca <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b00:	2340      	movs	r3, #64	@ 0x40
 8001b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b08:	f107 0318 	add.w	r3, r7, #24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 f957 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b18:	f7ff fcba 	bl	8001490 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	4a21      	ldr	r2, [pc, #132]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4814      	ldr	r0, [pc, #80]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b8a:	f000 fa79 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <HAL_UART_MspInit+0x110>)
 8001bb6:	f000 fa63 	bl	8002080 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	2025      	movs	r0, #37	@ 0x25
 8001bc0:	f000 f995 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc4:	2025      	movs	r0, #37	@ 0x25
 8001bc6:	f000 f9ae 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	37b0      	adds	r7, #176	@ 0xb0
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020000 	.word	0x40020000

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be8:	f7ff ff30 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	@ (8001c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c12:	f005 fdaf 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7ff fb91 	bl	800133c <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c28:	08008ac8 	.word	0x08008ac8
  ldr r2, =_sbss
 8001c2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c30:	20004584 	.word	0x20004584

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>

08001c36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f000 f94c 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c40:	200f      	movs	r0, #15
 8001c42:	f000 f805 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c46:	f7ff fe03 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f967 	bl	8001f42 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f92f 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	200006e8 	.word	0x200006e8

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200006e8 	.word	0x200006e8

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000010 	.word	0x20000010

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x40>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x40>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	05fa0000 	.word	0x05fa0000

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	@ (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	@ (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff29 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff3e 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff8e 	bl	8001e2c <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff31 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff feb6 	bl	8001cd8 <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d008      	beq.n	8001f8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e052      	b.n	8002032 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0216 	bic.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001faa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_DMA_Abort+0x62>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0208 	bic.w	r2, r2, #8
 8001fca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	e013      	b.n	8002006 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fde:	f7ff fe7b 	bl	8001cd8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d90c      	bls.n	8002006 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e015      	b.n	8002032 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e4      	bne.n	8001fde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e00c      	b.n	8002072 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2205      	movs	r2, #5
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e175      	b.n	800238c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8164 	bne.w	8002386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x56>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80be 	beq.w	8002386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	4b66      	ldr	r3, [pc, #408]	@ (80023a4 <HAL_GPIO_Init+0x324>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a65      	ldr	r2, [pc, #404]	@ (80023a4 <HAL_GPIO_Init+0x324>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_GPIO_Init+0x324>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002222:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <HAL_GPIO_Init+0x328>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d037      	beq.n	80022be <HAL_GPIO_Init+0x23e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a57      	ldr	r2, [pc, #348]	@ (80023b0 <HAL_GPIO_Init+0x330>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d031      	beq.n	80022ba <HAL_GPIO_Init+0x23a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a56      	ldr	r2, [pc, #344]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x236>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a55      	ldr	r2, [pc, #340]	@ (80023b8 <HAL_GPIO_Init+0x338>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x232>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a54      	ldr	r2, [pc, #336]	@ (80023bc <HAL_GPIO_Init+0x33c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x22e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a53      	ldr	r2, [pc, #332]	@ (80023c0 <HAL_GPIO_Init+0x340>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x22a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_GPIO_Init+0x344>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x226>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_GPIO_Init+0x348>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a50      	ldr	r2, [pc, #320]	@ (80023cc <HAL_GPIO_Init+0x34c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x21a>
 8002296:	2309      	movs	r3, #9
 8002298:	e012      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 800229a:	230a      	movs	r3, #10
 800229c:	e010      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 800229e:	2308      	movs	r3, #8
 80022a0:	e00e      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e00c      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022a6:	2306      	movs	r3, #6
 80022a8:	e00a      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022aa:	2305      	movs	r3, #5
 80022ac:	e008      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022be:	2300      	movs	r3, #0
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f002 0203 	and.w	r2, r2, #3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4093      	lsls	r3, r2
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d0:	4935      	ldr	r1, [pc, #212]	@ (80023a8 <HAL_GPIO_Init+0x328>)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022de:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002302:	4a34      	ldr	r2, [pc, #208]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002308:	4b32      	ldr	r3, [pc, #200]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800232c:	4a29      	ldr	r2, [pc, #164]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002332:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002356:	4a1f      	ldr	r2, [pc, #124]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_GPIO_Init+0x354>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	f67f ae86 	bls.w	80020a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40013800 	.word	0x40013800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020c00 	.word	0x40020c00
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40021400 	.word	0x40021400
 80023c4:	40021800 	.word	0x40021800
 80023c8:	40021c00 	.word	0x40021c00
 80023cc:	40022000 	.word	0x40022000
 80023d0:	40022400 	.word	0x40022400
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	619a      	str	r2, [r3, #24]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243a:	f7ff fc4d 	bl	8001cd8 <HAL_GetTick>
 800243e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002440:	e009      	b.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002442:	f7ff fc49 	bl	8001cd8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e022      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002462:	d1ee      	bne.n	8002442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800246e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002470:	f7ff fc32 	bl	8001cd8 <HAL_GetTick>
 8002474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002476:	e009      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002478:	f7ff fc2e 	bl	8001cd8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002486:	d901      	bls.n	800248c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e007      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002498:	d1ee      	bne.n	8002478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e291      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8087 	beq.w	80025de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d0:	4b96      	ldr	r3, [pc, #600]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024dc:	4b93      	ldr	r3, [pc, #588]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d112      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
 80024e8:	4b90      	ldr	r3, [pc, #576]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f4:	d10b      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4b8d      	ldr	r3, [pc, #564]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06c      	beq.n	80025dc <HAL_RCC_OscConfig+0x130>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d168      	bne.n	80025dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e26b      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x7a>
 8002518:	4b84      	ldr	r3, [pc, #528]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a83      	ldr	r2, [pc, #524]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e02e      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x9c>
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7b      	ldr	r2, [pc, #492]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0xc0>
 8002552:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b73      	ldr	r3, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a72      	ldr	r2, [pc, #456]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 800256c:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fba4 	bl	8001cd8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fba0 	bl	8001cd8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e21f      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fb90 	bl	8001cd8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff fb8c 	bl	8001cd8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e20b      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b57      	ldr	r3, [pc, #348]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x110>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d069      	beq.n	80026be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ea:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
 8002602:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1df      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	493d      	ldr	r1, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e040      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d023      	beq.n	800268c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff fb42 	bl	8001cd8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff fb3e 	bl	8001cd8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1bd      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b30      	ldr	r3, [pc, #192]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4929      	ldr	r1, [pc, #164]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fb1e 	bl	8001cd8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff fb1a 	bl	8001cd8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e199      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d038      	beq.n	800273c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	4a15      	ldr	r2, [pc, #84]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff fafb 	bl	8001cd8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff faf7 	bl	8001cd8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e176      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x23a>
 8002704:	e01a      	b.n	800273c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270a:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7ff fae1 	bl	8001cd8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271a:	f7ff fadd 	bl	8001cd8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d903      	bls.n	8002730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e15c      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
 800272c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b91      	ldr	r3, [pc, #580]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a4 	beq.w	8002892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b8b      	ldr	r3, [pc, #556]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a87      	ldr	r2, [pc, #540]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b85      	ldr	r3, [pc, #532]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800277e:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7e      	ldr	r2, [pc, #504]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7ff faa5 	bl	8001cd8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7ff faa1 	bl	8001cd8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e120      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a4:	4b75      	ldr	r3, [pc, #468]	@ (800297c <HAL_RCC_OscConfig+0x4d0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x31a>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	e02d      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x33c>
 80027ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a69      	ldr	r2, [pc, #420]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a66      	ldr	r2, [pc, #408]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	e01c      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x35e>
 80027f0:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	4a60      	ldr	r2, [pc, #384]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	4a5d      	ldr	r2, [pc, #372]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	@ 0x70
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
 800280a:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5a      	ldr	r2, [pc, #360]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d015      	beq.n	8002856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff fa55 	bl	8001cd8 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fa51 	bl	8001cd8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0ce      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCC_OscConfig+0x386>
 8002854:	e014      	b.n	8002880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff fa3f 	bl	8001cd8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff fa3b 	bl	8001cd8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ee      	bne.n	800285e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b3c      	ldr	r3, [pc, #240]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a3b      	ldr	r2, [pc, #236]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80a4 	beq.w	80029e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d06b      	beq.n	8002980 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d149      	bne.n	8002944 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff fa0c 	bl	8001cd8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff fa08 	bl	8001cd8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e087      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	4313      	orrs	r3, r2
 8002908:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800290e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff f9dc 	bl	8001cd8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f9d8 	bl	8001cd8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e057      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x478>
 8002942:	e04f      	b.n	80029e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f9c2 	bl	8001cd8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7ff f9be 	bl	8001cd8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03d      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x4ac>
 8002976:	e035      	b.n	80029e4 <HAL_RCC_OscConfig+0x538>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x544>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d028      	beq.n	80029e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d121      	bne.n	80029e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0d0      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b67      	ldr	r3, [pc, #412]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4965      	ldr	r1, [pc, #404]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a52      	ldr	r2, [pc, #328]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d040      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e073      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4936      	ldr	r1, [pc, #216]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7ff f8f6 	bl	8001cd8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7ff f8f2 	bl	8001cd8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e053      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d210      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	4922      	ldr	r1, [pc, #136]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b72:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	490a      	ldr	r1, [pc, #40]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f852 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	0800896c 	.word	0x0800896c
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b090      	sub	sp, #64	@ 0x40
 8002bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd8:	2300      	movs	r3, #0
 8002bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be4:	4b59      	ldr	r3, [pc, #356]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x40>
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	f200 80a1 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bfe:	e09b      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c04:	e09b      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c06:	4b53      	ldr	r3, [pc, #332]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c0a:	e098      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c16:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d028      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	2200      	movs	r2, #0
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c34:	2100      	movs	r1, #0
 8002c36:	4b47      	ldr	r3, [pc, #284]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c38:	fb03 f201 	mul.w	r2, r3, r1
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	4a43      	ldr	r2, [pc, #268]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c46:	fba0 1202 	umull	r1, r2, r0, r2
 8002c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c52:	4413      	add	r3, r2
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	2200      	movs	r2, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	61fa      	str	r2, [r7, #28]
 8002c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c66:	f7fd fb23 	bl	80002b0 <__aeabi_uldivmod>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4613      	mov	r3, r2
 8002c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c72:	e053      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b35      	ldr	r3, [pc, #212]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	617a      	str	r2, [r7, #20]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c86:	f04f 0b00 	mov.w	fp, #0
 8002c8a:	4652      	mov	r2, sl
 8002c8c:	465b      	mov	r3, fp
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	0159      	lsls	r1, r3, #5
 8002c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9c:	0150      	lsls	r0, r2, #5
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ca6:	eb63 090b 	sbc.w	r9, r3, fp
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cbe:	ebb2 0408 	subs.w	r4, r2, r8
 8002cc2:	eb63 0509 	sbc.w	r5, r3, r9
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	00eb      	lsls	r3, r5, #3
 8002cd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd4:	00e2      	lsls	r2, r4, #3
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	461d      	mov	r5, r3
 8002cda:	eb14 030a 	adds.w	r3, r4, sl
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	eb45 030b 	adc.w	r3, r5, fp
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d06:	2200      	movs	r2, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	60fa      	str	r2, [r7, #12]
 8002d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d10:	f7fd face 	bl	80002b0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3740      	adds	r7, #64	@ 0x40
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	017d7840 	.word	0x017d7840

08002d58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000008 	.word	0x20000008

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d74:	f7ff fff0 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	0800897c 	.word	0x0800897c

08002d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d9c:	f7ff ffdc 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0b5b      	lsrs	r3, r3, #13
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	0800897c 	.word	0x0800897c

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de8:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a68      	ldr	r2, [pc, #416]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002df2:	6093      	str	r3, [r2, #8]
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfc:	4964      	ldr	r1, [pc, #400]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d017      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	4959      	ldr	r1, [pc, #356]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e38:	d101      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e56:	4b4e      	ldr	r3, [pc, #312]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	494a      	ldr	r1, [pc, #296]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 808b 	beq.w	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	4a39      	ldr	r2, [pc, #228]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb0:	4b37      	ldr	r3, [pc, #220]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ebc:	4b35      	ldr	r3, [pc, #212]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a34      	ldr	r2, [pc, #208]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe ff06 	bl	8001cd8 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe ff02 	bl	8001cd8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e357      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eee:	4b28      	ldr	r3, [pc, #160]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d035      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d02e      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0c:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f2e:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f34:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d114      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe feca 	bl	8001cd8 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe fec6 	bl	8001cd8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e319      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ee      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f76:	d111      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f84:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	4901      	ldr	r1, [pc, #4]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
 8002f98:	0ffffcff 	.word	0x0ffffcff
 8002f9c:	4baa      	ldr	r3, [pc, #680]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4aa9      	ldr	r2, [pc, #676]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fa6:	6093      	str	r3, [r2, #8]
 8002fa8:	4ba7      	ldr	r3, [pc, #668]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	49a4      	ldr	r1, [pc, #656]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fc6:	4ba0      	ldr	r3, [pc, #640]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fcc:	4a9e      	ldr	r2, [pc, #632]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	4999      	ldr	r1, [pc, #612]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff4:	4b94      	ldr	r3, [pc, #592]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003002:	4991      	ldr	r1, [pc, #580]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003016:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003024:	4988      	ldr	r1, [pc, #544]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003038:	4b83      	ldr	r3, [pc, #524]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003046:	4980      	ldr	r1, [pc, #512]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800305a:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4977      	ldr	r1, [pc, #476]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307c:	4b72      	ldr	r3, [pc, #456]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	496f      	ldr	r1, [pc, #444]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309e:	4b6a      	ldr	r3, [pc, #424]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a4:	f023 020c 	bic.w	r2, r3, #12
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ac:	4966      	ldr	r1, [pc, #408]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c0:	4b61      	ldr	r3, [pc, #388]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	495e      	ldr	r1, [pc, #376]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e2:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f0:	4955      	ldr	r1, [pc, #340]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	494d      	ldr	r1, [pc, #308]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003126:	4b48      	ldr	r3, [pc, #288]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	4944      	ldr	r1, [pc, #272]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003148:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	493c      	ldr	r1, [pc, #240]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	4933      	ldr	r1, [pc, #204]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800318c:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800319a:	492b      	ldr	r1, [pc, #172]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d011      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ae:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031bc:	4922      	ldr	r1, [pc, #136]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031cc:	d101      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fc:	4912      	ldr	r1, [pc, #72]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003220:	4909      	ldr	r1, [pc, #36]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d006      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80d9 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800323c:	4b02      	ldr	r3, [pc, #8]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a01      	ldr	r2, [pc, #4]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003248:	40023800 	.word	0x40023800
 800324c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324e:	f7fe fd43 	bl	8001cd8 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003256:	f7fe fd3f 	bl	8001cd8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b64      	cmp	r3, #100	@ 0x64
 8003262:	d901      	bls.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e194      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003268:	4b6c      	ldr	r3, [pc, #432]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d021      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003288:	4b64      	ldr	r3, [pc, #400]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003296:	4b61      	ldr	r3, [pc, #388]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329c:	0e1b      	lsrs	r3, r3, #24
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	019a      	lsls	r2, r3, #6
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4957      	ldr	r1, [pc, #348]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02e      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ee:	d129      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032f0:	4b4a      	ldr	r3, [pc, #296]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003304:	0f1b      	lsrs	r3, r3, #28
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	019a      	lsls	r2, r3, #6
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	071b      	lsls	r3, r3, #28
 8003324:	493d      	ldr	r1, [pc, #244]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800332c:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003332:	f023 021f 	bic.w	r2, r3, #31
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	3b01      	subs	r3, #1
 800333c:	4937      	ldr	r1, [pc, #220]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003350:	4b32      	ldr	r3, [pc, #200]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003356:	0e1b      	lsrs	r3, r3, #24
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800335e:	4b2f      	ldr	r3, [pc, #188]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003364:	0f1b      	lsrs	r3, r3, #28
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	019a      	lsls	r2, r3, #6
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	431a      	orrs	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	071b      	lsls	r3, r3, #28
 8003384:	4925      	ldr	r1, [pc, #148]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d011      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	019a      	lsls	r2, r3, #6
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	071b      	lsls	r3, r3, #28
 80033b4:	4919      	ldr	r1, [pc, #100]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033bc:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fe fc86 	bl	8001cd8 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033d0:	f7fe fc82 	bl	8001cd8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0d7      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 80cd 	bne.w	8003590 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033f6:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a08      	ldr	r2, [pc, #32]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003402:	f7fe fc69 	bl	8001cd8 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800340a:	f7fe fc65 	bl	8001cd8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	@ 0x64
 8003416:	d903      	bls.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0ba      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800341c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003420:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342c:	d0ed      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02e      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d12a      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003456:	4b51      	ldr	r3, [pc, #324]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003464:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	0f1b      	lsrs	r3, r3, #28
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	019a      	lsls	r2, r3, #6
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	061b      	lsls	r3, r3, #24
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	071b      	lsls	r3, r3, #28
 800348a:	4944      	ldr	r1, [pc, #272]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003492:	4b42      	ldr	r3, [pc, #264]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003498:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	493d      	ldr	r1, [pc, #244]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d022      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034c0:	d11d      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c2:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	0e1b      	lsrs	r3, r3, #24
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	0f1b      	lsrs	r3, r3, #28
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	019a      	lsls	r2, r3, #6
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	4929      	ldr	r1, [pc, #164]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d028      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800350a:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	0e1b      	lsrs	r3, r3, #24
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003518:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	0c1b      	lsrs	r3, r3, #16
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	019a      	lsls	r2, r3, #6
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	071b      	lsls	r3, r3, #28
 800353e:	4917      	ldr	r1, [pc, #92]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800354c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	4911      	ldr	r1, [pc, #68]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0e      	ldr	r2, [pc, #56]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003568:	f7fe fbb6 	bl	8001cd8 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003570:	f7fe fbb2 	bl	8001cd8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e007      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800358a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800358e:	d1ef      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e040      	b.n	8003634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fa84 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fe4c 	bl	8004284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fbe5 	bl	8003dbc <UART_SetConfig>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e01b      	b.n	8003634 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800360a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800361a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fecb 	bl	80043c8 <UART_CheckIdleState>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003650:	2b20      	cmp	r3, #32
 8003652:	d177      	bne.n	8003744 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_UART_Transmit+0x24>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e070      	b.n	8003746 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2221      	movs	r2, #33	@ 0x21
 8003670:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003672:	f7fe fb31 	bl	8001cd8 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x68>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ac:	e02f      	b.n	800370e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	@ 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fedc 	bl	8004476 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e03b      	b.n	8003746 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	3302      	adds	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	e007      	b.n	80036fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1c9      	bne.n	80036ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fea6 	bl	8004476 <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e005      	b.n	8003746 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	@ 0x28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003762:	2b20      	cmp	r3, #32
 8003764:	d132      	bne.n	80037cc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_Receive_IT+0x24>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e02b      	b.n	80037ce <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	613b      	str	r3, [r7, #16]
   return(result);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	69f9      	ldr	r1, [r7, #28]
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e6      	bne.n	800378a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	461a      	mov	r2, r3
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fec4 	bl	8004550 <UART_Start_Receive_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	e000      	b.n	80037ce <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b0ba      	sub	sp, #232	@ 0xe8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003802:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003806:	4013      	ands	r3, r2
 8003808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800380c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00f      	beq.n	8003840 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8297 	beq.w	8003d64 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
      }
      return;
 800383e:	e291      	b.n	8003d64 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8117 	beq.w	8003a78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800385a:	4b85      	ldr	r3, [pc, #532]	@ (8003a70 <HAL_UART_IRQHandler+0x298>)
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 810a 	beq.w	8003a78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d011      	beq.n	8003894 <HAL_UART_IRQHandler+0xbc>
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2201      	movs	r2, #1
 8003882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <HAL_UART_IRQHandler+0xec>
 80038a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	f043 0204 	orr.w	r2, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d011      	beq.n	80038f4 <HAL_UART_IRQHandler+0x11c>
 80038d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2204      	movs	r2, #4
 80038e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800390c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003910:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2208      	movs	r2, #8
 800391e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003926:	f043 0208 	orr.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <HAL_UART_IRQHandler+0x18a>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 81fd 	beq.w	8003d68 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04f      	beq.n	8003a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe8e 	bl	80046dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	d141      	bne.n	8003a52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1d9      	bne.n	80039ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d013      	beq.n	8003a4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a26:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <HAL_UART_IRQHandler+0x29c>)
 8003a28:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fb03 	bl	800203a <HAL_DMA_Abort_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d017      	beq.n	8003a6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a44:	4610      	mov	r0, r2
 8003a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a48:	e00f      	b.n	8003a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9a0 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e00b      	b.n	8003a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f99c 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e007      	b.n	8003a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f998 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a68:	e17e      	b.n	8003d68 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6a:	bf00      	nop
    return;
 8003a6c:	e17c      	b.n	8003d68 <HAL_UART_IRQHandler+0x590>
 8003a6e:	bf00      	nop
 8003a70:	04000120 	.word	0x04000120
 8003a74:	080047a5 	.word	0x080047a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f040 814c 	bne.w	8003d1a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8145 	beq.w	8003d1a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 813e 	beq.w	8003d1a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b40      	cmp	r3, #64	@ 0x40
 8003ab2:	f040 80b6 	bne.w	8003c22 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8150 	beq.w	8003d6c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	f080 8148 	bcs.w	8003d6c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af0:	f000 8086 	beq.w	8003c00 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1da      	bne.n	8003af4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e1      	bne.n	8003b3e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e3      	bne.n	8003b7a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd0:	f023 0310 	bic.w	r3, r3, #16
 8003bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003be2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003be8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e4      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f9ad 	bl	8001f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8c2 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c20:	e0a4      	b.n	8003d6c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8096 	beq.w	8003d70 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8091 	beq.w	8003d70 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e4      	bne.n	8003c4e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	623b      	str	r3, [r7, #32]
   return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ca8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e3      	bne.n	8003c84 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0310 	bic.w	r3, r3, #16
 8003ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	69b9      	ldr	r1, [r7, #24]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e4      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f846 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d18:	e02a      	b.n	8003d70 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01c      	beq.n	8003d74 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
    }
    return;
 8003d42:	e017      	b.n	8003d74 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_UART_IRQHandler+0x59e>
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00c      	beq.n	8003d76 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fd37 	bl	80047d0 <UART_EndTransmit_IT>
    return;
 8003d62:	e008      	b.n	8003d76 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d64:	bf00      	nop
 8003d66:	e006      	b.n	8003d76 <HAL_UART_IRQHandler+0x59e>
    return;
 8003d68:	bf00      	nop
 8003d6a:	e004      	b.n	8003d76 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d6c:	bf00      	nop
 8003d6e:	e002      	b.n	8003d76 <HAL_UART_IRQHandler+0x59e>
      return;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <HAL_UART_IRQHandler+0x59e>
    return;
 8003d74:	bf00      	nop
  }

}
 8003d76:	37e8      	adds	r7, #232	@ 0xe8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4ba6      	ldr	r3, [pc, #664]	@ (8004080 <UART_SetConfig+0x2c4>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	6979      	ldr	r1, [r7, #20]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a94      	ldr	r2, [pc, #592]	@ (8004084 <UART_SetConfig+0x2c8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d120      	bne.n	8003e7a <UART_SetConfig+0xbe>
 8003e38:	4b93      	ldr	r3, [pc, #588]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d816      	bhi.n	8003e74 <UART_SetConfig+0xb8>
 8003e46:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <UART_SetConfig+0x90>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e69 	.word	0x08003e69
 8003e54:	08003e63 	.word	0x08003e63
 8003e58:	08003e6f 	.word	0x08003e6f
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e150      	b.n	8004104 <UART_SetConfig+0x348>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e14d      	b.n	8004104 <UART_SetConfig+0x348>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e14a      	b.n	8004104 <UART_SetConfig+0x348>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e147      	b.n	8004104 <UART_SetConfig+0x348>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e144      	b.n	8004104 <UART_SetConfig+0x348>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a83      	ldr	r2, [pc, #524]	@ (800408c <UART_SetConfig+0x2d0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d132      	bne.n	8003eea <UART_SetConfig+0x12e>
 8003e84:	4b80      	ldr	r3, [pc, #512]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d828      	bhi.n	8003ee4 <UART_SetConfig+0x128>
 8003e92:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0xdc>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003ee5 	.word	0x08003ee5
 8003ea0:	08003ee5 	.word	0x08003ee5
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ed9 	.word	0x08003ed9
 8003eac:	08003ee5 	.word	0x08003ee5
 8003eb0:	08003ee5 	.word	0x08003ee5
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ed3 	.word	0x08003ed3
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003ee5 	.word	0x08003ee5
 8003ec8:	08003edf 	.word	0x08003edf
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e118      	b.n	8004104 <UART_SetConfig+0x348>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e115      	b.n	8004104 <UART_SetConfig+0x348>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e112      	b.n	8004104 <UART_SetConfig+0x348>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e10f      	b.n	8004104 <UART_SetConfig+0x348>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e10c      	b.n	8004104 <UART_SetConfig+0x348>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <UART_SetConfig+0x2d4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <UART_SetConfig+0x17a>
 8003ef4:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003efe:	2b30      	cmp	r3, #48	@ 0x30
 8003f00:	d013      	beq.n	8003f2a <UART_SetConfig+0x16e>
 8003f02:	2b30      	cmp	r3, #48	@ 0x30
 8003f04:	d814      	bhi.n	8003f30 <UART_SetConfig+0x174>
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d009      	beq.n	8003f1e <UART_SetConfig+0x162>
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d810      	bhi.n	8003f30 <UART_SetConfig+0x174>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x15c>
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x168>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x174>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e0f2      	b.n	8004104 <UART_SetConfig+0x348>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e0ef      	b.n	8004104 <UART_SetConfig+0x348>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e0ec      	b.n	8004104 <UART_SetConfig+0x348>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e0e9      	b.n	8004104 <UART_SetConfig+0x348>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e0e6      	b.n	8004104 <UART_SetConfig+0x348>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a56      	ldr	r2, [pc, #344]	@ (8004094 <UART_SetConfig+0x2d8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d120      	bne.n	8003f82 <UART_SetConfig+0x1c6>
 8003f40:	4b51      	ldr	r3, [pc, #324]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f4c:	d013      	beq.n	8003f76 <UART_SetConfig+0x1ba>
 8003f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f50:	d814      	bhi.n	8003f7c <UART_SetConfig+0x1c0>
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d009      	beq.n	8003f6a <UART_SetConfig+0x1ae>
 8003f56:	2b80      	cmp	r3, #128	@ 0x80
 8003f58:	d810      	bhi.n	8003f7c <UART_SetConfig+0x1c0>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <UART_SetConfig+0x1a8>
 8003f5e:	2b40      	cmp	r3, #64	@ 0x40
 8003f60:	d006      	beq.n	8003f70 <UART_SetConfig+0x1b4>
 8003f62:	e00b      	b.n	8003f7c <UART_SetConfig+0x1c0>
 8003f64:	2300      	movs	r3, #0
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e0cc      	b.n	8004104 <UART_SetConfig+0x348>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e0c9      	b.n	8004104 <UART_SetConfig+0x348>
 8003f70:	2304      	movs	r3, #4
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e0c6      	b.n	8004104 <UART_SetConfig+0x348>
 8003f76:	2308      	movs	r3, #8
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e0c3      	b.n	8004104 <UART_SetConfig+0x348>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e0c0      	b.n	8004104 <UART_SetConfig+0x348>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a44      	ldr	r2, [pc, #272]	@ (8004098 <UART_SetConfig+0x2dc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d125      	bne.n	8003fd8 <UART_SetConfig+0x21c>
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f9a:	d017      	beq.n	8003fcc <UART_SetConfig+0x210>
 8003f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa0:	d817      	bhi.n	8003fd2 <UART_SetConfig+0x216>
 8003fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa6:	d00b      	beq.n	8003fc0 <UART_SetConfig+0x204>
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d811      	bhi.n	8003fd2 <UART_SetConfig+0x216>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <UART_SetConfig+0x1fe>
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	d006      	beq.n	8003fc6 <UART_SetConfig+0x20a>
 8003fb8:	e00b      	b.n	8003fd2 <UART_SetConfig+0x216>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e0a1      	b.n	8004104 <UART_SetConfig+0x348>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e09e      	b.n	8004104 <UART_SetConfig+0x348>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e09b      	b.n	8004104 <UART_SetConfig+0x348>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e098      	b.n	8004104 <UART_SetConfig+0x348>
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e095      	b.n	8004104 <UART_SetConfig+0x348>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800409c <UART_SetConfig+0x2e0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d125      	bne.n	800402e <UART_SetConfig+0x272>
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <UART_SetConfig+0x2cc>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff0:	d017      	beq.n	8004022 <UART_SetConfig+0x266>
 8003ff2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff6:	d817      	bhi.n	8004028 <UART_SetConfig+0x26c>
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffc:	d00b      	beq.n	8004016 <UART_SetConfig+0x25a>
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004002:	d811      	bhi.n	8004028 <UART_SetConfig+0x26c>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <UART_SetConfig+0x254>
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400c:	d006      	beq.n	800401c <UART_SetConfig+0x260>
 800400e:	e00b      	b.n	8004028 <UART_SetConfig+0x26c>
 8004010:	2301      	movs	r3, #1
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e076      	b.n	8004104 <UART_SetConfig+0x348>
 8004016:	2302      	movs	r3, #2
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e073      	b.n	8004104 <UART_SetConfig+0x348>
 800401c:	2304      	movs	r3, #4
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e070      	b.n	8004104 <UART_SetConfig+0x348>
 8004022:	2308      	movs	r3, #8
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e06d      	b.n	8004104 <UART_SetConfig+0x348>
 8004028:	2310      	movs	r3, #16
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e06a      	b.n	8004104 <UART_SetConfig+0x348>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <UART_SetConfig+0x2e4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d138      	bne.n	80040aa <UART_SetConfig+0x2ee>
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <UART_SetConfig+0x2cc>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004046:	d017      	beq.n	8004078 <UART_SetConfig+0x2bc>
 8004048:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800404c:	d82a      	bhi.n	80040a4 <UART_SetConfig+0x2e8>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004052:	d00b      	beq.n	800406c <UART_SetConfig+0x2b0>
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004058:	d824      	bhi.n	80040a4 <UART_SetConfig+0x2e8>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <UART_SetConfig+0x2aa>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004062:	d006      	beq.n	8004072 <UART_SetConfig+0x2b6>
 8004064:	e01e      	b.n	80040a4 <UART_SetConfig+0x2e8>
 8004066:	2300      	movs	r3, #0
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e04b      	b.n	8004104 <UART_SetConfig+0x348>
 800406c:	2302      	movs	r3, #2
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e048      	b.n	8004104 <UART_SetConfig+0x348>
 8004072:	2304      	movs	r3, #4
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e045      	b.n	8004104 <UART_SetConfig+0x348>
 8004078:	2308      	movs	r3, #8
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e042      	b.n	8004104 <UART_SetConfig+0x348>
 800407e:	bf00      	nop
 8004080:	efff69f3 	.word	0xefff69f3
 8004084:	40011000 	.word	0x40011000
 8004088:	40023800 	.word	0x40023800
 800408c:	40004400 	.word	0x40004400
 8004090:	40004800 	.word	0x40004800
 8004094:	40004c00 	.word	0x40004c00
 8004098:	40005000 	.word	0x40005000
 800409c:	40011400 	.word	0x40011400
 80040a0:	40007800 	.word	0x40007800
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e02c      	b.n	8004104 <UART_SetConfig+0x348>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a72      	ldr	r2, [pc, #456]	@ (8004278 <UART_SetConfig+0x4bc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d125      	bne.n	8004100 <UART_SetConfig+0x344>
 80040b4:	4b71      	ldr	r3, [pc, #452]	@ (800427c <UART_SetConfig+0x4c0>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040c2:	d017      	beq.n	80040f4 <UART_SetConfig+0x338>
 80040c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040c8:	d817      	bhi.n	80040fa <UART_SetConfig+0x33e>
 80040ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ce:	d00b      	beq.n	80040e8 <UART_SetConfig+0x32c>
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d4:	d811      	bhi.n	80040fa <UART_SetConfig+0x33e>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <UART_SetConfig+0x326>
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040de:	d006      	beq.n	80040ee <UART_SetConfig+0x332>
 80040e0:	e00b      	b.n	80040fa <UART_SetConfig+0x33e>
 80040e2:	2300      	movs	r3, #0
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e00d      	b.n	8004104 <UART_SetConfig+0x348>
 80040e8:	2302      	movs	r3, #2
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e00a      	b.n	8004104 <UART_SetConfig+0x348>
 80040ee:	2304      	movs	r3, #4
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e007      	b.n	8004104 <UART_SetConfig+0x348>
 80040f4:	2308      	movs	r3, #8
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e004      	b.n	8004104 <UART_SetConfig+0x348>
 80040fa:	2310      	movs	r3, #16
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e001      	b.n	8004104 <UART_SetConfig+0x348>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410c:	d15b      	bne.n	80041c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d828      	bhi.n	8004166 <UART_SetConfig+0x3aa>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0x360>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	08004167 	.word	0x08004167
 800412c:	08004157 	.word	0x08004157
 8004130:	08004167 	.word	0x08004167
 8004134:	08004167 	.word	0x08004167
 8004138:	08004167 	.word	0x08004167
 800413c:	0800415f 	.word	0x0800415f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fe fe16 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8004144:	61b8      	str	r0, [r7, #24]
        break;
 8004146:	e013      	b.n	8004170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe fe26 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 800414c:	61b8      	str	r0, [r7, #24]
        break;
 800414e:	e00f      	b.n	8004170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004150:	4b4b      	ldr	r3, [pc, #300]	@ (8004280 <UART_SetConfig+0x4c4>)
 8004152:	61bb      	str	r3, [r7, #24]
        break;
 8004154:	e00c      	b.n	8004170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004156:	f7fe fd39 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 800415a:	61b8      	str	r0, [r7, #24]
        break;
 800415c:	e008      	b.n	8004170 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004162:	61bb      	str	r3, [r7, #24]
        break;
 8004164:	e004      	b.n	8004170 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	77bb      	strb	r3, [r7, #30]
        break;
 800416e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d074      	beq.n	8004260 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	005a      	lsls	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d916      	bls.n	80041c0 <UART_SetConfig+0x404>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004198:	d212      	bcs.n	80041c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f023 030f 	bic.w	r3, r3, #15
 80041a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	89fa      	ldrh	r2, [r7, #14]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	e04f      	b.n	8004260 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	77bb      	strb	r3, [r7, #30]
 80041c4:	e04c      	b.n	8004260 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d828      	bhi.n	800421e <UART_SetConfig+0x462>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <UART_SetConfig+0x418>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004209 	.word	0x08004209
 80041e0:	0800421f 	.word	0x0800421f
 80041e4:	0800420f 	.word	0x0800420f
 80041e8:	0800421f 	.word	0x0800421f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800421f 	.word	0x0800421f
 80041f4:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe fdba 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 80041fc:	61b8      	str	r0, [r7, #24]
        break;
 80041fe:	e013      	b.n	8004228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fdca 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8004204:	61b8      	str	r0, [r7, #24]
        break;
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004208:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <UART_SetConfig+0x4c4>)
 800420a:	61bb      	str	r3, [r7, #24]
        break;
 800420c:	e00c      	b.n	8004228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420e:	f7fe fcdd 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004212:	61b8      	str	r0, [r7, #24]
        break;
 8004214:	e008      	b.n	8004228 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421a:	61bb      	str	r3, [r7, #24]
        break;
 800421c:	e004      	b.n	8004228 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77bb      	strb	r3, [r7, #30]
        break;
 8004226:	bf00      	nop
    }

    if (pclk != 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	085a      	lsrs	r2, r3, #1
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b0f      	cmp	r3, #15
 8004246:	d909      	bls.n	800425c <UART_SetConfig+0x4a0>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424e:	d205      	bcs.n	800425c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e001      	b.n	8004260 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800426c:	7fbb      	ldrb	r3, [r7, #30]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40007c00 	.word	0x40007c00
 800427c:	40023800 	.word	0x40023800
 8004280:	00f42400 	.word	0x00f42400

08004284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01a      	beq.n	800439a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004382:	d10a      	bne.n	800439a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043d8:	f7fd fc7e 	bl	8001cd8 <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d12e      	bne.n	800444a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f83b 	bl	8004476 <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d021      	beq.n	800444a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60fb      	str	r3, [r7, #12]
   return(result);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	69b9      	ldr	r1, [r7, #24]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	617b      	str	r3, [r7, #20]
   return(result);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e011      	b.n	800446e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3728      	adds	r7, #40	@ 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004486:	e04f      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d04b      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004490:	f7fd fc22 	bl	8001cd8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e04e      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d037      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d034      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d031      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d110      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2208      	movs	r2, #8
 80044d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f8fe 	bl	80046dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2208      	movs	r2, #8
 80044e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e029      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004502:	d111      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800450c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8e4 	bl	80046dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e00f      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d0a0      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b097      	sub	sp, #92	@ 0x5c
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d10e      	bne.n	80045a2 <UART_Start_Receive_IT+0x52>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <UART_Start_Receive_IT+0x48>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004592:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004596:	e02d      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	22ff      	movs	r2, #255	@ 0xff
 800459c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045a0:	e028      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <UART_Start_Receive_IT+0x76>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <UART_Start_Receive_IT+0x6c>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	22ff      	movs	r2, #255	@ 0xff
 80045b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045ba:	e01b      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	227f      	movs	r2, #127	@ 0x7f
 80045c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045c4:	e016      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ce:	d10d      	bne.n	80045ec <UART_Start_Receive_IT+0x9c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <UART_Start_Receive_IT+0x92>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	227f      	movs	r2, #127	@ 0x7f
 80045dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045e0:	e008      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	223f      	movs	r2, #63	@ 0x3f
 80045e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045ea:	e003      	b.n	80045f4 <UART_Start_Receive_IT+0xa4>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2222      	movs	r2, #34	@ 0x22
 8004600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004624:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004626:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800462a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004640:	d107      	bne.n	8004652 <UART_Start_Receive_IT+0x102>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <UART_Start_Receive_IT+0x184>)
 800464e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004650:	e002      	b.n	8004658 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <UART_Start_Receive_IT+0x188>)
 8004656:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d019      	beq.n	8004694 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004680:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800468c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e6      	bne.n	8004660 <UART_Start_Receive_IT+0x110>
 8004692:	e018      	b.n	80046c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	613b      	str	r3, [r7, #16]
   return(result);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f043 0320 	orr.w	r3, r3, #32
 80046a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	69f9      	ldr	r1, [r7, #28]
 80046b8:	6a3a      	ldr	r2, [r7, #32]
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e6      	bne.n	8004694 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	375c      	adds	r7, #92	@ 0x5c
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	080049cd 	.word	0x080049cd
 80046d8:	08004825 	.word	0x08004825

080046dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b095      	sub	sp, #84	@ 0x54
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004702:	643b      	str	r3, [r7, #64]	@ 0x40
 8004704:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3308      	adds	r3, #8
 800471c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	61fb      	str	r3, [r7, #28]
   return(result);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474e:	2b01      	cmp	r3, #1
 8004750:	d118      	bne.n	8004784 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f023 0310 	bic.w	r3, r3, #16
 8004766:	647b      	str	r3, [r7, #68]	@ 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	613b      	str	r3, [r7, #16]
   return(result);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e6      	bne.n	8004752 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004798:	bf00      	nop
 800479a:	3754      	adds	r7, #84	@ 0x54
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fae4 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6979      	ldr	r1, [r7, #20]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	613b      	str	r3, [r7, #16]
   return(result);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e6      	bne.n	80047d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fab0 	bl	8003d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481c:	bf00      	nop
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b09c      	sub	sp, #112	@ 0x70
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004832:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800483c:	2b22      	cmp	r3, #34	@ 0x22
 800483e:	f040 80b9 	bne.w	80049b4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800484c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004856:	b2da      	uxtb	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	400a      	ands	r2, r1
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 809c 	bne.w	80049c4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800489a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800489c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e6      	bne.n	800488c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048de:	647a      	str	r2, [r7, #68]	@ 0x44
 80048e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	623b      	str	r3, [r7, #32]
   return(result);
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004928:	663b      	str	r3, [r7, #96]	@ 0x60
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004932:	633b      	str	r3, [r7, #48]	@ 0x30
 8004934:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e6      	bne.n	8004914 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12e      	bne.n	80049ac <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	60fb      	str	r3, [r7, #12]
   return(result);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0310 	bic.w	r3, r3, #16
 8004968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	617b      	str	r3, [r7, #20]
   return(result);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d103      	bne.n	800499c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2210      	movs	r2, #16
 800499a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff f9fd 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049aa:	e00b      	b.n	80049c4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fc fae9 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 80049b2:	e007      	b.n	80049c4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0208 	orr.w	r2, r2, #8
 80049c2:	619a      	str	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	3770      	adds	r7, #112	@ 0x70
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b09c      	sub	sp, #112	@ 0x70
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	f040 80b9 	bne.w	8004b5c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80049fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80049fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 809c 	bne.w	8004b6c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e6      	bne.n	8004a34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d018      	beq.n	8004aee <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004adc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e6      	bne.n	8004abc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d12e      	bne.n	8004b54 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	613b      	str	r3, [r7, #16]
   return(result);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e6      	bne.n	8004afc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d103      	bne.n	8004b44 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2210      	movs	r2, #16
 8004b42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff f929 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b52:	e00b      	b.n	8004b6c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fc fa15 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8004b5a:	e007      	b.n	8004b6c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	619a      	str	r2, [r3, #24]
}
 8004b6c:	bf00      	nop
 8004b6e:	3770      	adds	r7, #112	@ 0x70
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b86:	2b84      	cmp	r3, #132	@ 0x84
 8004b88:	d005      	beq.n	8004b96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	3303      	adds	r3, #3
 8004b94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ba8:	f001 f83e 	bl	8005c28 <vTaskStartScheduler>
  
  return osOK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb4:	b089      	sub	sp, #36	@ 0x24
 8004bb6:	af04      	add	r7, sp, #16
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <osThreadCreate+0x54>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01c      	beq.n	8004c06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685c      	ldr	r4, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691e      	ldr	r6, [r3, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ffc8 	bl	8004b74 <makeFreeRtosPriority>
 8004be4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bee:	9202      	str	r2, [sp, #8]
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	9100      	str	r1, [sp, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4632      	mov	r2, r6
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fdaa 	bl	8005754 <xTaskCreateStatic>
 8004c00:	4603      	mov	r3, r0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e01c      	b.n	8004c40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685c      	ldr	r4, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c12:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ffaa 	bl	8004b74 <makeFreeRtosPriority>
 8004c20:	4602      	mov	r2, r0
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	9200      	str	r2, [sp, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 fdf5 	bl	8005820 <xTaskCreate>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <osDelay+0x16>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	e000      	b.n	8004c62 <osDelay+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ffa8 	bl	8005bb8 <vTaskDelay>
  
  return osOK;
 8004c68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f103 0208 	add.w	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f103 0208 	add.w	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f103 0208 	add.w	r2, r3, #8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d103      	bne.n	8004d34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e00c      	b.n	8004d4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3308      	adds	r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e002      	b.n	8004d42 <vListInsert+0x2e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d2f6      	bcs.n	8004d3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6892      	ldr	r2, [r2, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6852      	ldr	r2, [r2, #4]
 8004da6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d103      	bne.n	8004dba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10d      	bne.n	8004e0c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e0c:	f001 fe7e 	bl	8006b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	68f9      	ldr	r1, [r7, #12]
 8004e1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	22ff      	movs	r2, #255	@ 0xff
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	22ff      	movs	r2, #255	@ 0xff
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d114      	bne.n	8004e8c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01a      	beq.n	8004ea0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 f930 	bl	80060d4 <xTaskRemoveFromEventList>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d012      	beq.n	8004ea0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <xQueueGenericReset+0xd4>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	e009      	b.n	8004ea0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3310      	adds	r3, #16
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff feee 	bl	8004c72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fee9 	bl	8004c72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ea0:	f001 fe6a 	bl	8006b78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ea4:	2301      	movs	r3, #1
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10d      	bne.n	8004ee4 <xQueueGenericCreate+0x30>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	b672      	cpsid	i
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	b662      	cpsie	i
 8004edc:	613b      	str	r3, [r7, #16]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e004      	b.n	8004efa <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3348      	adds	r3, #72	@ 0x48
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 ff32 	bl	8006d68 <pvPortMalloc>
 8004f04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3348      	adds	r3, #72	@ 0x48
 8004f14:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f1e:	79fa      	ldrb	r2, [r7, #7]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f805 	bl	8004f3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f30:	69bb      	ldr	r3, [r7, #24]
	}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e002      	b.n	8004f5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f68:	2101      	movs	r1, #1
 8004f6a:	69b8      	ldr	r0, [r7, #24]
 8004f6c:	f7ff ff36 	bl	8004ddc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00e      	beq.n	8004fa4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f81c 	bl	8004fdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f7ff ff75 	bl	8004eb4 <xQueueGenericCreate>
 8004fca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff ffd3 	bl	8004f78 <prvInitialiseMutex>

		return xNewQueue;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	@ 0x38
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <xQueueGenericSend+0x38>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	b672      	cpsid	i
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	b662      	cpsie	i
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueGenericSend+0x46>
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xQueueGenericSend+0x4a>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueGenericSend+0x4c>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10d      	bne.n	8005048 <xQueueGenericSend+0x6c>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	b672      	cpsid	i
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	b662      	cpsie	i
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d103      	bne.n	8005056 <xQueueGenericSend+0x7a>
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <xQueueGenericSend+0x7e>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <xQueueGenericSend+0x80>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10d      	bne.n	800507c <xQueueGenericSend+0xa0>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	b672      	cpsid	i
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	b662      	cpsie	i
 8005074:	623b      	str	r3, [r7, #32]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800507c:	f001 f9f2 	bl	8006464 <xTaskGetSchedulerState>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <xQueueGenericSend+0xb0>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <xQueueGenericSend+0xb4>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <xQueueGenericSend+0xb6>
 8005090:	2300      	movs	r3, #0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	b672      	cpsid	i
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	b662      	cpsie	i
 80050aa:	61fb      	str	r3, [r7, #28]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050b2:	f001 fd2b 	bl	8006b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <xQueueGenericSend+0xec>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d129      	bne.n	800511c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ce:	f000 fa57 	bl	8005580 <prvCopyDataToQueue>
 80050d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	3324      	adds	r3, #36	@ 0x24
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fff7 	bl	80060d4 <xTaskRemoveFromEventList>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050ec:	4b3f      	ldr	r3, [pc, #252]	@ (80051ec <xQueueGenericSend+0x210>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	e00a      	b.n	8005114 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005104:	4b39      	ldr	r3, [pc, #228]	@ (80051ec <xQueueGenericSend+0x210>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005114:	f001 fd30 	bl	8006b78 <vPortExitCritical>
				return pdPASS;
 8005118:	2301      	movs	r3, #1
 800511a:	e063      	b.n	80051e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005122:	f001 fd29 	bl	8006b78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005126:	2300      	movs	r3, #0
 8005128:	e05c      	b.n	80051e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800512a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f833 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800513a:	2301      	movs	r3, #1
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800513e:	f001 fd1b 	bl	8006b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005142:	f000 fdd7 	bl	8005cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005146:	f001 fce1 	bl	8006b0c <vPortEnterCritical>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005150:	b25b      	sxtb	r3, r3
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <xQueueGenericSend+0x184>
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005166:	b25b      	sxtb	r3, r3
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d103      	bne.n	8005176 <xQueueGenericSend+0x19a>
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005176:	f001 fcff 	bl	8006b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517a:	1d3a      	adds	r2, r7, #4
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f822 	bl	80061cc <xTaskCheckForTimeOut>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d124      	bne.n	80051d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800518e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005190:	f000 fac8 	bl	8005724 <prvIsQueueFull>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	3310      	adds	r3, #16
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 ff6e 	bl	8006084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051aa:	f000 fa53 	bl	8005654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051ae:	f000 fdaf 	bl	8005d10 <xTaskResumeAll>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f af7c 	bne.w	80050b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <xQueueGenericSend+0x210>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	e772      	b.n	80050b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ce:	f000 fa41 	bl	8005654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d2:	f000 fd9d 	bl	8005d10 <xTaskResumeAll>
 80051d6:	e76c      	b.n	80050b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051da:	f000 fa3b 	bl	8005654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051de:	f000 fd97 	bl	8005d10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3738      	adds	r7, #56	@ 0x38
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	@ 0x38
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10d      	bne.n	8005220 <xQueueGiveFromISR+0x30>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	b672      	cpsid	i
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	b662      	cpsie	i
 8005218:	623b      	str	r3, [r7, #32]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <xQueueGiveFromISR+0x54>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	b672      	cpsid	i
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	b662      	cpsie	i
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <xQueueGiveFromISR+0x64>
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <xQueueGiveFromISR+0x68>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <xQueueGiveFromISR+0x6a>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <xQueueGiveFromISR+0x8a>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	b672      	cpsid	i
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	b662      	cpsie	i
 8005272:	61bb      	str	r3, [r7, #24]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800527a:	f001 fd2f 	bl	8006cdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800527e:	f3ef 8211 	mrs	r2, BASEPRI
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	617a      	str	r2, [r7, #20]
 8005298:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800529a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d22b      	bcs.n	8005306 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d112      	bne.n	80052f0 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	3324      	adds	r3, #36	@ 0x24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fefc 	bl	80060d4 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e007      	b.n	8005300 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f4:	3301      	adds	r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	b25a      	sxtb	r2, r3
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005300:	2301      	movs	r3, #1
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
 8005304:	e001      	b.n	800530a <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005306:	2300      	movs	r3, #0
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
 800530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005314:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005318:	4618      	mov	r0, r3
 800531a:	3738      	adds	r7, #56	@ 0x38
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005332:	2300      	movs	r3, #0
 8005334:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	b672      	cpsid	i
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	b662      	cpsie	i
 8005350:	623b      	str	r3, [r7, #32]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	61fb      	str	r3, [r7, #28]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800537c:	f001 f872 	bl	8006464 <xTaskGetSchedulerState>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <xQueueSemaphoreTake+0x6c>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <xQueueSemaphoreTake+0x70>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <xQueueSemaphoreTake+0x72>
 8005390:	2300      	movs	r3, #0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	b672      	cpsid	i
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	b662      	cpsie	i
 80053aa:	61bb      	str	r3, [r7, #24]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053b2:	f001 fbab 	bl	8006b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80053d2:	f001 fa11 	bl	80067f8 <pvTaskIncrementMutexHeldCount>
 80053d6:	4602      	mov	r2, r0
 80053d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	3310      	adds	r3, #16
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fe73 	bl	80060d4 <xTaskRemoveFromEventList>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b55      	ldr	r3, [pc, #340]	@ (800554c <xQueueSemaphoreTake+0x22c>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005404:	f001 fbb8 	bl	8006b78 <vPortExitCritical>
				return pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	e09a      	b.n	8005542 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d114      	bne.n	800543c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	b672      	cpsid	i
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	b662      	cpsie	i
 800542c:	617b      	str	r3, [r7, #20]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005434:	f001 fba0 	bl	8006b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005438:	2300      	movs	r3, #0
 800543a:	e082      	b.n	8005542 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	4618      	mov	r0, r3
 8005448:	f000 feaa 	bl	80061a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005450:	f001 fb92 	bl	8006b78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005454:	f000 fc4e 	bl	8005cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005458:	f001 fb58 	bl	8006b0c <vPortEnterCritical>
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005462:	b25b      	sxtb	r3, r3
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d103      	bne.n	8005472 <xQueueSemaphoreTake+0x152>
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005478:	b25b      	sxtb	r3, r3
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d103      	bne.n	8005488 <xQueueSemaphoreTake+0x168>
 8005480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005488:	f001 fb76 	bl	8006b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800548c:	463a      	mov	r2, r7
 800548e:	f107 030c 	add.w	r3, r7, #12
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fe99 	bl	80061cc <xTaskCheckForTimeOut>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d132      	bne.n	8005506 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054a2:	f000 f929 	bl	80056f8 <prvIsQueueEmpty>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d026      	beq.n	80054fa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80054b4:	f001 fb2a 	bl	8006b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 ffef 	bl	80064a0 <xTaskPriorityInherit>
 80054c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80054c4:	f001 fb58 	bl	8006b78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	3324      	adds	r3, #36	@ 0x24
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fdd7 	bl	8006084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054d8:	f000 f8bc 	bl	8005654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054dc:	f000 fc18 	bl	8005d10 <xTaskResumeAll>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f47f af65 	bne.w	80053b2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80054e8:	4b18      	ldr	r3, [pc, #96]	@ (800554c <xQueueSemaphoreTake+0x22c>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	e75b      	b.n	80053b2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054fc:	f000 f8aa 	bl	8005654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005500:	f000 fc06 	bl	8005d10 <xTaskResumeAll>
 8005504:	e755      	b.n	80053b2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005506:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005508:	f000 f8a4 	bl	8005654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800550c:	f000 fc00 	bl	8005d10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005512:	f000 f8f1 	bl	80056f8 <prvIsQueueEmpty>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	f43f af4a 	beq.w	80053b2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005524:	f001 faf2 	bl	8006b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005528:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800552a:	f000 f811 	bl	8005550 <prvGetDisinheritPriorityAfterTimeout>
 800552e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f001 f8be 	bl	80066b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800553c:	f001 fb1c 	bl	8006b78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005542:	4618      	mov	r0, r3
 8005544:	3738      	adds	r7, #56	@ 0x38
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1c3 0307 	rsb	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e001      	b.n	8005572 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005572:	68fb      	ldr	r3, [r7, #12]
	}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d14d      	bne.n	8005642 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fff8 	bl	80065a0 <xTaskPriorityDisinherit>
 80055b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	e043      	b.n	8005642 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d119      	bne.n	80055f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6858      	ldr	r0, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	461a      	mov	r2, r3
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	f002 f8f9 	bl	80077c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d32b      	bcc.n	8005642 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	e026      	b.n	8005642 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68d8      	ldr	r0, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	461a      	mov	r2, r3
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	f002 f8df 	bl	80077c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	425b      	negs	r3, r3
 800560e:	441a      	add	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d207      	bcs.n	8005630 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	425b      	negs	r3, r3
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d105      	bne.n	8005642 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3b01      	subs	r3, #1
 8005640:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800564a:	697b      	ldr	r3, [r7, #20]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800565c:	f001 fa56 	bl	8006b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005668:	e011      	b.n	800568e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d012      	beq.n	8005698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3324      	adds	r3, #36	@ 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fd2c 	bl	80060d4 <xTaskRemoveFromEventList>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005682:	f000 fe0b 	bl	800629c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	3b01      	subs	r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800568e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	dce9      	bgt.n	800566a <prvUnlockQueue+0x16>
 8005696:	e000      	b.n	800569a <prvUnlockQueue+0x46>
					break;
 8005698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	22ff      	movs	r2, #255	@ 0xff
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056a2:	f001 fa69 	bl	8006b78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056a6:	f001 fa31 	bl	8006b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b2:	e011      	b.n	80056d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d012      	beq.n	80056e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3310      	adds	r3, #16
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fd07 	bl	80060d4 <xTaskRemoveFromEventList>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056cc:	f000 fde6 	bl	800629c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056d0:	7bbb      	ldrb	r3, [r7, #14]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dce9      	bgt.n	80056b4 <prvUnlockQueue+0x60>
 80056e0:	e000      	b.n	80056e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	22ff      	movs	r2, #255	@ 0xff
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056ec:	f001 fa44 	bl	8006b78 <vPortExitCritical>
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005700:	f001 fa04 	bl	8006b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e001      	b.n	8005716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f001 fa2f 	bl	8006b78 <vPortExitCritical>

	return xReturn;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800572c:	f001 f9ee 	bl	8006b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	429a      	cmp	r2, r3
 800573a:	d102      	bne.n	8005742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005746:	f001 fa17 	bl	8006b78 <vPortExitCritical>

	return xReturn;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08e      	sub	sp, #56	@ 0x38
 8005758:	af04      	add	r7, sp, #16
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10d      	bne.n	8005784 <xTaskCreateStatic+0x30>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576c:	b672      	cpsid	i
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	b662      	cpsie	i
 800577c:	623b      	str	r3, [r7, #32]
}
 800577e:	bf00      	nop
 8005780:	bf00      	nop
 8005782:	e7fd      	b.n	8005780 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <xTaskCreateStatic+0x52>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	b672      	cpsid	i
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	b662      	cpsie	i
 800579e:	61fb      	str	r3, [r7, #28]
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	e7fd      	b.n	80057a2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057a6:	2354      	movs	r3, #84	@ 0x54
 80057a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b54      	cmp	r3, #84	@ 0x54
 80057ae:	d00d      	beq.n	80057cc <xTaskCreateStatic+0x78>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	b672      	cpsid	i
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	b662      	cpsie	i
 80057c4:	61bb      	str	r3, [r7, #24]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01e      	beq.n	8005812 <xTaskCreateStatic+0xbe>
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01b      	beq.n	8005812 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057ec:	2300      	movs	r3, #0
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	9302      	str	r3, [sp, #8]
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f850 	bl	80058aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800580a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800580c:	f000 f8d8 	bl	80059c0 <prvAddNewTaskToReadyList>
 8005810:	e001      	b.n	8005816 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005816:	697b      	ldr	r3, [r7, #20]
	}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fa97 	bl	8006d68 <pvPortMalloc>
 800583a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00e      	beq.n	8005860 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005842:	2054      	movs	r0, #84	@ 0x54
 8005844:	f001 fa90 	bl	8006d68 <pvPortMalloc>
 8005848:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
 8005856:	e005      	b.n	8005864 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f001 fb53 	bl	8006f04 <vPortFree>
 800585e:	e001      	b.n	8005864 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	2300      	movs	r3, #0
 8005876:	9303      	str	r3, [sp, #12]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f80e 	bl	80058aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800588e:	69f8      	ldr	r0, [r7, #28]
 8005890:	f000 f896 	bl	80059c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005894:	2301      	movs	r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e002      	b.n	80058a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058a0:	69bb      	ldr	r3, [r7, #24]
	}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b088      	sub	sp, #32
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80058c2:	440b      	add	r3, r1
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	b672      	cpsid	i
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	b662      	cpsie	i
 80058f0:	617b      	str	r3, [r7, #20]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01f      	beq.n	800593e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e012      	b.n	800592a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	7819      	ldrb	r1, [r3, #0]
 800590c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	3334      	adds	r3, #52	@ 0x34
 8005914:	460a      	mov	r2, r1
 8005916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d9e9      	bls.n	8005904 <prvInitialiseNewTask+0x5a>
 8005930:	e000      	b.n	8005934 <prvInitialiseNewTask+0x8a>
			{
				break;
 8005932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800593c:	e003      	b.n	8005946 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	2b06      	cmp	r3, #6
 800594a:	d901      	bls.n	8005950 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800594c:	2306      	movs	r3, #6
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005954:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	2200      	movs	r2, #0
 8005960:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff f9a3 	bl	8004cb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	3318      	adds	r3, #24
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff f99e 	bl	8004cb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	f1c3 0207 	rsb	r2, r3, #7
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	2200      	movs	r2, #0
 8005990:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	68f9      	ldr	r1, [r7, #12]
 800599e:	69b8      	ldr	r0, [r7, #24]
 80059a0:	f000 ffa4 	bl	80068ec <pxPortInitialiseStack>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b6:	bf00      	nop
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059c8:	f001 f8a0 	bl	8006b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a78 <prvAddNewTaskToReadyList+0xb8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	4a29      	ldr	r2, [pc, #164]	@ (8005a78 <prvAddNewTaskToReadyList+0xb8>)
 80059d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059d6:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <prvAddNewTaskToReadyList+0xbc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059de:	4a27      	ldr	r2, [pc, #156]	@ (8005a7c <prvAddNewTaskToReadyList+0xbc>)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059e4:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <prvAddNewTaskToReadyList+0xb8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d110      	bne.n	8005a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059ec:	f000 fc7a 	bl	80062e4 <prvInitialiseTaskLists>
 80059f0:	e00d      	b.n	8005a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059f2:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <prvAddNewTaskToReadyList+0xc0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059fa:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <prvAddNewTaskToReadyList+0xbc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d802      	bhi.n	8005a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a08:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <prvAddNewTaskToReadyList+0xbc>)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <prvAddNewTaskToReadyList+0xc4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <prvAddNewTaskToReadyList+0xc4>)
 8005a16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <prvAddNewTaskToReadyList+0xc8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	4a18      	ldr	r2, [pc, #96]	@ (8005a88 <prvAddNewTaskToReadyList+0xc8>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <prvAddNewTaskToReadyList+0xcc>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7ff f943 	bl	8004ccc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a46:	f001 f897 	bl	8006b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <prvAddNewTaskToReadyList+0xc0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00e      	beq.n	8005a70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a52:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <prvAddNewTaskToReadyList+0xbc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d207      	bcs.n	8005a70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a60:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <prvAddNewTaskToReadyList+0xd0>)
 8005a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200007ec 	.word	0x200007ec
 8005a7c:	200006ec 	.word	0x200006ec
 8005a80:	200007f8 	.word	0x200007f8
 8005a84:	20000808 	.word	0x20000808
 8005a88:	200007f4 	.word	0x200007f4
 8005a8c:	200006f0 	.word	0x200006f0
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005a9c:	f001 f836 	bl	8006b0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <vTaskDelete+0x18>
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8005b90 <vTaskDelete+0xfc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	e000      	b.n	8005aae <vTaskDelete+0x1a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff f966 	bl	8004d86 <uxListRemove>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d115      	bne.n	8005aec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	4933      	ldr	r1, [pc, #204]	@ (8005b94 <vTaskDelete+0x100>)
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <vTaskDelete+0x58>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	2201      	movs	r2, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43da      	mvns	r2, r3
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b98 <vTaskDelete+0x104>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b98 <vTaskDelete+0x104>)
 8005aea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3318      	adds	r3, #24
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff f944 	bl	8004d86 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <vTaskDelete+0x108>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a25      	ldr	r2, [pc, #148]	@ (8005b9c <vTaskDelete+0x108>)
 8005b06:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005b08:	4b21      	ldr	r3, [pc, #132]	@ (8005b90 <vTaskDelete+0xfc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d10b      	bne.n	8005b2a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4821      	ldr	r0, [pc, #132]	@ (8005ba0 <vTaskDelete+0x10c>)
 8005b1a:	f7ff f8d7 	bl	8004ccc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005b1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ba4 <vTaskDelete+0x110>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba4 <vTaskDelete+0x110>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e009      	b.n	8005b3e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <vTaskDelete+0x114>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <vTaskDelete+0x114>)
 8005b32:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fc43 	bl	80063c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005b3a:	f000 fc73 	bl	8006424 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005b3e:	f001 f81b 	bl	8006b78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005b42:	4b1a      	ldr	r3, [pc, #104]	@ (8005bac <vTaskDelete+0x118>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01e      	beq.n	8005b88 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8005b4a:	4b11      	ldr	r3, [pc, #68]	@ (8005b90 <vTaskDelete+0xfc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d119      	bne.n	8005b88 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005b54:	4b16      	ldr	r3, [pc, #88]	@ (8005bb0 <vTaskDelete+0x11c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <vTaskDelete+0xe4>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	b672      	cpsid	i
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	b662      	cpsie	i
 8005b70:	60bb      	str	r3, [r7, #8]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8005b78:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb4 <vTaskDelete+0x120>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200006ec 	.word	0x200006ec
 8005b94:	200006f0 	.word	0x200006f0
 8005b98:	200007f4 	.word	0x200007f4
 8005b9c:	20000808 	.word	0x20000808
 8005ba0:	200007c0 	.word	0x200007c0
 8005ba4:	200007d4 	.word	0x200007d4
 8005ba8:	200007ec 	.word	0x200007ec
 8005bac:	200007f8 	.word	0x200007f8
 8005bb0:	20000814 	.word	0x20000814
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d01a      	beq.n	8005c00 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bca:	4b15      	ldr	r3, [pc, #84]	@ (8005c20 <vTaskDelay+0x68>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <vTaskDelay+0x36>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	b672      	cpsid	i
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	b662      	cpsie	i
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005bee:	f000 f881 	bl	8005cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fe13 	bl	8006820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bfa:	f000 f889 	bl	8005d10 <xTaskResumeAll>
 8005bfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005c06:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <vTaskDelay+0x6c>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000814 	.word	0x20000814
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	@ 0x28
 8005c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c36:	463a      	mov	r2, r7
 8005c38:	1d39      	adds	r1, r7, #4
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fa fccc 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	9202      	str	r2, [sp, #8]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	460a      	mov	r2, r1
 8005c56:	4921      	ldr	r1, [pc, #132]	@ (8005cdc <vTaskStartScheduler+0xb4>)
 8005c58:	4821      	ldr	r0, [pc, #132]	@ (8005ce0 <vTaskStartScheduler+0xb8>)
 8005c5a:	f7ff fd7b 	bl	8005754 <xTaskCreateStatic>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <vTaskStartScheduler+0xbc>)
 8005c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c64:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce4 <vTaskStartScheduler+0xbc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e001      	b.n	8005c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d118      	bne.n	8005cae <vTaskStartScheduler+0x86>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	b672      	cpsid	i
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	b662      	cpsie	i
 8005c90:	613b      	str	r3, [r7, #16]
}
 8005c92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c94:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <vTaskStartScheduler+0xc0>)
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <vTaskStartScheduler+0xc4>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <vTaskStartScheduler+0xc8>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ca8:	f000 feb2 	bl	8006a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cac:	e011      	b.n	8005cd2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d10d      	bne.n	8005cd2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	60fb      	str	r3, [r7, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <vTaskStartScheduler+0xa6>
}
 8005cd2:	bf00      	nop
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	08008964 	.word	0x08008964
 8005ce0:	080062b5 	.word	0x080062b5
 8005ce4:	20000810 	.word	0x20000810
 8005ce8:	2000080c 	.word	0x2000080c
 8005cec:	200007f8 	.word	0x200007f8
 8005cf0:	200007f0 	.word	0x200007f0

08005cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	@ (8005d0c <vTaskSuspendAll+0x18>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4a03      	ldr	r2, [pc, #12]	@ (8005d0c <vTaskSuspendAll+0x18>)
 8005d00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000814 	.word	0x20000814

08005d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d1e:	4b43      	ldr	r3, [pc, #268]	@ (8005e2c <xTaskResumeAll+0x11c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <xTaskResumeAll+0x32>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	b672      	cpsid	i
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	b662      	cpsie	i
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d42:	f000 fee3 	bl	8006b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d46:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <xTaskResumeAll+0x11c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	4a37      	ldr	r2, [pc, #220]	@ (8005e2c <xTaskResumeAll+0x11c>)
 8005d4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d50:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <xTaskResumeAll+0x11c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d161      	bne.n	8005e1c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d58:	4b35      	ldr	r3, [pc, #212]	@ (8005e30 <xTaskResumeAll+0x120>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05d      	beq.n	8005e1c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d60:	e02e      	b.n	8005dc0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d62:	4b34      	ldr	r3, [pc, #208]	@ (8005e34 <xTaskResumeAll+0x124>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3318      	adds	r3, #24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff f809 	bl	8004d86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff f804 	bl	8004d86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	2201      	movs	r2, #1
 8005d84:	409a      	lsls	r2, r3
 8005d86:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <xTaskResumeAll+0x128>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <xTaskResumeAll+0x128>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4a27      	ldr	r2, [pc, #156]	@ (8005e3c <xTaskResumeAll+0x12c>)
 8005d9e:	441a      	add	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3304      	adds	r3, #4
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f7fe ff90 	bl	8004ccc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db0:	4b23      	ldr	r3, [pc, #140]	@ (8005e40 <xTaskResumeAll+0x130>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005dba:	4b22      	ldr	r3, [pc, #136]	@ (8005e44 <xTaskResumeAll+0x134>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e34 <xTaskResumeAll+0x124>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1cc      	bne.n	8005d62 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dce:	f000 fb29 	bl	8006424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <xTaskResumeAll+0x138>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d010      	beq.n	8005e00 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dde:	f000 f837 	bl	8005e50 <xTaskIncrementTick>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005de8:	4b16      	ldr	r3, [pc, #88]	@ (8005e44 <xTaskResumeAll+0x134>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f1      	bne.n	8005dde <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	@ (8005e48 <xTaskResumeAll+0x138>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e00:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <xTaskResumeAll+0x134>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <xTaskResumeAll+0x13c>)
 8005e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e1c:	f000 feac 	bl	8006b78 <vPortExitCritical>

	return xAlreadyYielded;
 8005e20:	68bb      	ldr	r3, [r7, #8]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000814 	.word	0x20000814
 8005e30:	200007ec 	.word	0x200007ec
 8005e34:	200007ac 	.word	0x200007ac
 8005e38:	200007f4 	.word	0x200007f4
 8005e3c:	200006f0 	.word	0x200006f0
 8005e40:	200006ec 	.word	0x200006ec
 8005e44:	20000800 	.word	0x20000800
 8005e48:	200007fc 	.word	0x200007fc
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5a:	4b50      	ldr	r3, [pc, #320]	@ (8005f9c <xTaskIncrementTick+0x14c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 808b 	bne.w	8005f7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e64:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d123      	bne.n	8005ec0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e78:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	b672      	cpsid	i
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	b662      	cpsie	i
 8005e96:	603b      	str	r3, [r7, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xTaskIncrementTick+0x4a>
 8005e9e:	4b41      	ldr	r3, [pc, #260]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	4b40      	ldr	r3, [pc, #256]	@ (8005fa8 <xTaskIncrementTick+0x158>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa8 <xTaskIncrementTick+0x158>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fac <xTaskIncrementTick+0x15c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005fac <xTaskIncrementTick+0x15c>)
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	f000 fab2 	bl	8006424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb0 <xTaskIncrementTick+0x160>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d348      	bcc.n	8005f5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eca:	4b36      	ldr	r3, [pc, #216]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed4:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <xTaskIncrementTick+0x160>)
 8005ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eda:	601a      	str	r2, [r3, #0]
					break;
 8005edc:	e03e      	b.n	8005f5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d203      	bcs.n	8005efe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb0 <xTaskIncrementTick+0x160>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005efc:	e02e      	b.n	8005f5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe ff3f 	bl	8004d86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	3318      	adds	r3, #24
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe ff36 	bl	8004d86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	2201      	movs	r2, #1
 8005f20:	409a      	lsls	r2, r3
 8005f22:	4b24      	ldr	r3, [pc, #144]	@ (8005fb4 <xTaskIncrementTick+0x164>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	4a22      	ldr	r2, [pc, #136]	@ (8005fb4 <xTaskIncrementTick+0x164>)
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb8 <xTaskIncrementTick+0x168>)
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	4610      	mov	r0, r2
 8005f44:	f7fe fec2 	bl	8004ccc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <xTaskIncrementTick+0x16c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3b9      	bcc.n	8005eca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f5a:	e7b6      	b.n	8005eca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f5c:	4b17      	ldr	r3, [pc, #92]	@ (8005fbc <xTaskIncrementTick+0x16c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4915      	ldr	r1, [pc, #84]	@ (8005fb8 <xTaskIncrementTick+0x168>)
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d907      	bls.n	8005f84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e004      	b.n	8005f84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f7a:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <xTaskIncrementTick+0x170>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc0 <xTaskIncrementTick+0x170>)
 8005f82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f84:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <xTaskIncrementTick+0x174>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f90:	697b      	ldr	r3, [r7, #20]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000814 	.word	0x20000814
 8005fa0:	200007f0 	.word	0x200007f0
 8005fa4:	200007a4 	.word	0x200007a4
 8005fa8:	200007a8 	.word	0x200007a8
 8005fac:	20000804 	.word	0x20000804
 8005fb0:	2000080c 	.word	0x2000080c
 8005fb4:	200007f4 	.word	0x200007f4
 8005fb8:	200006f0 	.word	0x200006f0
 8005fbc:	200006ec 	.word	0x200006ec
 8005fc0:	200007fc 	.word	0x200007fc
 8005fc4:	20000800 	.word	0x20000800

08005fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fce:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <vTaskSwitchContext+0xa8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fd6:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <vTaskSwitchContext+0xac>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fdc:	e042      	b.n	8006064 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005fde:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <vTaskSwitchContext+0xac>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <vTaskSwitchContext+0xb0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	f1c3 031f 	rsb	r3, r3, #31
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	4920      	ldr	r1, [pc, #128]	@ (800607c <vTaskSwitchContext+0xb4>)
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10d      	bne.n	800602a <vTaskSwitchContext+0x62>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	b672      	cpsid	i
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	b662      	cpsie	i
 8006022:	607b      	str	r3, [r7, #4]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <vTaskSwitchContext+0x5e>
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a11      	ldr	r2, [pc, #68]	@ (800607c <vTaskSwitchContext+0xb4>)
 8006036:	4413      	add	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	3308      	adds	r3, #8
 800604c:	429a      	cmp	r2, r3
 800604e:	d104      	bne.n	800605a <vTaskSwitchContext+0x92>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a07      	ldr	r2, [pc, #28]	@ (8006080 <vTaskSwitchContext+0xb8>)
 8006062:	6013      	str	r3, [r2, #0]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20000814 	.word	0x20000814
 8006074:	20000800 	.word	0x20000800
 8006078:	200007f4 	.word	0x200007f4
 800607c:	200006f0 	.word	0x200006f0
 8006080:	200006ec 	.word	0x200006ec

08006084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10d      	bne.n	80060b0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	b672      	cpsid	i
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	b662      	cpsie	i
 80060a8:	60fb      	str	r3, [r7, #12]
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <vTaskPlaceOnEventList+0x4c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fe fe2b 	bl	8004d14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	6838      	ldr	r0, [r7, #0]
 80060c2:	f000 fbad 	bl	8006820 <prvAddCurrentTaskToDelayedList>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200006ec 	.word	0x200006ec

080060d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	b672      	cpsid	i
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	b662      	cpsie	i
 80060fe:	60fb      	str	r3, [r7, #12]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3318      	adds	r3, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fe3b 	bl	8004d86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <xTaskRemoveFromEventList+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fe32 	bl	8004d86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	4b18      	ldr	r3, [pc, #96]	@ (800618c <xTaskRemoveFromEventList+0xb8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <xTaskRemoveFromEventList+0xb8>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a13      	ldr	r2, [pc, #76]	@ (8006190 <xTaskRemoveFromEventList+0xbc>)
 8006142:	441a      	add	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe fdbe 	bl	8004ccc <vListInsertEnd>
 8006150:	e005      	b.n	800615e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3318      	adds	r3, #24
 8006156:	4619      	mov	r1, r3
 8006158:	480e      	ldr	r0, [pc, #56]	@ (8006194 <xTaskRemoveFromEventList+0xc0>)
 800615a:	f7fe fdb7 	bl	8004ccc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <xTaskRemoveFromEventList+0xc4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d905      	bls.n	8006178 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <xTaskRemoveFromEventList+0xc8>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e001      	b.n	800617c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000814 	.word	0x20000814
 800618c:	200007f4 	.word	0x200007f4
 8006190:	200006f0 	.word	0x200006f0
 8006194:	200007ac 	.word	0x200007ac
 8006198:	200006ec 	.word	0x200006ec
 800619c:	20000800 	.word	0x20000800

080061a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <vTaskInternalSetTimeOutState+0x24>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <vTaskInternalSetTimeOutState+0x28>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	20000804 	.word	0x20000804
 80061c8:	200007f0 	.word	0x200007f0

080061cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	b672      	cpsid	i
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	b662      	cpsie	i
 8006212:	60fb      	str	r3, [r7, #12]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800621a:	f000 fc77 	bl	8006b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800621e:	4b1d      	ldr	r3, [pc, #116]	@ (8006294 <xTaskCheckForTimeOut+0xc8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d102      	bne.n	800623e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006238:	2300      	movs	r3, #0
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e023      	b.n	8006286 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <xTaskCheckForTimeOut+0xcc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d007      	beq.n	800625a <xTaskCheckForTimeOut+0x8e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e015      	b.n	8006286 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	429a      	cmp	r2, r3
 8006262:	d20b      	bcs.n	800627c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ff95 	bl	80061a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	e004      	b.n	8006286 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006286:	f000 fc77 	bl	8006b78 <vPortExitCritical>

	return xReturn;
 800628a:	69fb      	ldr	r3, [r7, #28]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200007f0 	.word	0x200007f0
 8006298:	20000804 	.word	0x20000804

0800629c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062a0:	4b03      	ldr	r3, [pc, #12]	@ (80062b0 <vTaskMissedYield+0x14>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
}
 80062a6:	bf00      	nop
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000800 	.word	0x20000800

080062b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062bc:	f000 f852 	bl	8006364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062c0:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <prvIdleTask+0x28>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d9f9      	bls.n	80062bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <prvIdleTask+0x2c>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062d8:	e7f0      	b.n	80062bc <prvIdleTask+0x8>
 80062da:	bf00      	nop
 80062dc:	200006f0 	.word	0x200006f0
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	e00c      	b.n	800630a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a12      	ldr	r2, [pc, #72]	@ (8006344 <prvInitialiseTaskLists+0x60>)
 80062fc:	4413      	add	r3, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fcb7 	bl	8004c72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3301      	adds	r3, #1
 8006308:	607b      	str	r3, [r7, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b06      	cmp	r3, #6
 800630e:	d9ef      	bls.n	80062f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006310:	480d      	ldr	r0, [pc, #52]	@ (8006348 <prvInitialiseTaskLists+0x64>)
 8006312:	f7fe fcae 	bl	8004c72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006316:	480d      	ldr	r0, [pc, #52]	@ (800634c <prvInitialiseTaskLists+0x68>)
 8006318:	f7fe fcab 	bl	8004c72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800631c:	480c      	ldr	r0, [pc, #48]	@ (8006350 <prvInitialiseTaskLists+0x6c>)
 800631e:	f7fe fca8 	bl	8004c72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006322:	480c      	ldr	r0, [pc, #48]	@ (8006354 <prvInitialiseTaskLists+0x70>)
 8006324:	f7fe fca5 	bl	8004c72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006328:	480b      	ldr	r0, [pc, #44]	@ (8006358 <prvInitialiseTaskLists+0x74>)
 800632a:	f7fe fca2 	bl	8004c72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <prvInitialiseTaskLists+0x78>)
 8006330:	4a05      	ldr	r2, [pc, #20]	@ (8006348 <prvInitialiseTaskLists+0x64>)
 8006332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006334:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <prvInitialiseTaskLists+0x7c>)
 8006336:	4a05      	ldr	r2, [pc, #20]	@ (800634c <prvInitialiseTaskLists+0x68>)
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	200006f0 	.word	0x200006f0
 8006348:	2000077c 	.word	0x2000077c
 800634c:	20000790 	.word	0x20000790
 8006350:	200007ac 	.word	0x200007ac
 8006354:	200007c0 	.word	0x200007c0
 8006358:	200007d8 	.word	0x200007d8
 800635c:	200007a4 	.word	0x200007a4
 8006360:	200007a8 	.word	0x200007a8

08006364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800636a:	e019      	b.n	80063a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800636c:	f000 fbce 	bl	8006b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006370:	4b10      	ldr	r3, [pc, #64]	@ (80063b4 <prvCheckTasksWaitingTermination+0x50>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fd02 	bl	8004d86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006382:	4b0d      	ldr	r3, [pc, #52]	@ (80063b8 <prvCheckTasksWaitingTermination+0x54>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3b01      	subs	r3, #1
 8006388:	4a0b      	ldr	r2, [pc, #44]	@ (80063b8 <prvCheckTasksWaitingTermination+0x54>)
 800638a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <prvCheckTasksWaitingTermination+0x58>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3b01      	subs	r3, #1
 8006392:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <prvCheckTasksWaitingTermination+0x58>)
 8006394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006396:	f000 fbef 	bl	8006b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f810 	bl	80063c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063a0:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <prvCheckTasksWaitingTermination+0x58>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e1      	bne.n	800636c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200007c0 	.word	0x200007c0
 80063b8:	200007ec 	.word	0x200007ec
 80063bc:	200007d4 	.word	0x200007d4

080063c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fd94 	bl	8006f04 <vPortFree>
				vPortFree( pxTCB );
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fd91 	bl	8006f04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063e2:	e01b      	b.n	800641c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d103      	bne.n	80063f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fd88 	bl	8006f04 <vPortFree>
	}
 80063f4:	e012      	b.n	800641c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d00d      	beq.n	800641c <prvDeleteTCB+0x5c>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	b672      	cpsid	i
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	b662      	cpsie	i
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <prvDeleteTCB+0x58>
	}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <prvResetNextTaskUnblockTime+0x38>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <prvResetNextTaskUnblockTime+0x3c>)
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800643c:	e008      	b.n	8006450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643e:	4b07      	ldr	r3, [pc, #28]	@ (800645c <prvResetNextTaskUnblockTime+0x38>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a04      	ldr	r2, [pc, #16]	@ (8006460 <prvResetNextTaskUnblockTime+0x3c>)
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	200007a4 	.word	0x200007a4
 8006460:	2000080c 	.word	0x2000080c

08006464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800646a:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <xTaskGetSchedulerState+0x34>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006472:	2301      	movs	r3, #1
 8006474:	607b      	str	r3, [r7, #4]
 8006476:	e008      	b.n	800648a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006478:	4b08      	ldr	r3, [pc, #32]	@ (800649c <xTaskGetSchedulerState+0x38>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006480:	2302      	movs	r3, #2
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	e001      	b.n	800648a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800648a:	687b      	ldr	r3, [r7, #4]
	}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	200007f8 	.word	0x200007f8
 800649c:	20000814 	.word	0x20000814

080064a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d069      	beq.n	800658a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <xTaskPriorityInherit+0xf4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d259      	bcs.n	8006578 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db06      	blt.n	80064da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064cc:	4b31      	ldr	r3, [pc, #196]	@ (8006594 <xTaskPriorityInherit+0xf4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	f1c3 0207 	rsb	r2, r3, #7
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6959      	ldr	r1, [r3, #20]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006598 <xTaskPriorityInherit+0xf8>)
 80064ec:	4413      	add	r3, r2
 80064ee:	4299      	cmp	r1, r3
 80064f0:	d13a      	bne.n	8006568 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fc45 	bl	8004d86 <uxListRemove>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d115      	bne.n	800652e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006506:	4924      	ldr	r1, [pc, #144]	@ (8006598 <xTaskPriorityInherit+0xf8>)
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xTaskPriorityInherit+0x8e>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	2201      	movs	r2, #1
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43da      	mvns	r2, r3
 8006524:	4b1d      	ldr	r3, [pc, #116]	@ (800659c <xTaskPriorityInherit+0xfc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4013      	ands	r3, r2
 800652a:	4a1c      	ldr	r2, [pc, #112]	@ (800659c <xTaskPriorityInherit+0xfc>)
 800652c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800652e:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <xTaskPriorityInherit+0xf4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	2201      	movs	r2, #1
 800653e:	409a      	lsls	r2, r3
 8006540:	4b16      	ldr	r3, [pc, #88]	@ (800659c <xTaskPriorityInherit+0xfc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4313      	orrs	r3, r2
 8006546:	4a15      	ldr	r2, [pc, #84]	@ (800659c <xTaskPriorityInherit+0xfc>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <xTaskPriorityInherit+0xf8>)
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fe fbb3 	bl	8004ccc <vListInsertEnd>
 8006566:	e004      	b.n	8006572 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006568:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <xTaskPriorityInherit+0xf4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e008      	b.n	800658a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <xTaskPriorityInherit+0xf4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	429a      	cmp	r2, r3
 8006584:	d201      	bcs.n	800658a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800658a:	68fb      	ldr	r3, [r7, #12]
	}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	200006ec 	.word	0x200006ec
 8006598:	200006f0 	.word	0x200006f0
 800659c:	200007f4 	.word	0x200007f4

080065a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d074      	beq.n	80066a0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065b6:	4b3d      	ldr	r3, [pc, #244]	@ (80066ac <xTaskPriorityDisinherit+0x10c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d00d      	beq.n	80065dc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	b672      	cpsid	i
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	b662      	cpsie	i
 80065d4:	60fb      	str	r3, [r7, #12]
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
 80065f8:	60bb      	str	r3, [r7, #8]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	429a      	cmp	r2, r3
 8006614:	d044      	beq.n	80066a0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661a:	2b00      	cmp	r3, #0
 800661c:	d140      	bne.n	80066a0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fbaf 	bl	8004d86 <uxListRemove>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d115      	bne.n	800665a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	491f      	ldr	r1, [pc, #124]	@ (80066b0 <xTaskPriorityDisinherit+0x110>)
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xTaskPriorityDisinherit+0xba>
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	2201      	movs	r2, #1
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43da      	mvns	r2, r3
 8006650:	4b18      	ldr	r3, [pc, #96]	@ (80066b4 <xTaskPriorityDisinherit+0x114>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4013      	ands	r3, r2
 8006656:	4a17      	ldr	r2, [pc, #92]	@ (80066b4 <xTaskPriorityDisinherit+0x114>)
 8006658:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	f1c3 0207 	rsb	r2, r3, #7
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	2201      	movs	r2, #1
 8006674:	409a      	lsls	r2, r3
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <xTaskPriorityDisinherit+0x114>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4313      	orrs	r3, r2
 800667c:	4a0d      	ldr	r2, [pc, #52]	@ (80066b4 <xTaskPriorityDisinherit+0x114>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a08      	ldr	r2, [pc, #32]	@ (80066b0 <xTaskPriorityDisinherit+0x110>)
 800668e:	441a      	add	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fb18 	bl	8004ccc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a0:	697b      	ldr	r3, [r7, #20]
	}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200006ec 	.word	0x200006ec
 80066b0:	200006f0 	.word	0x200006f0
 80066b4:	200007f4 	.word	0x200007f4

080066b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8089 	beq.w	80067e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	b672      	cpsid	i
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	b662      	cpsie	i
 80066ee:	60fb      	str	r3, [r7, #12]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d902      	bls.n	8006706 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e002      	b.n	800670c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	429a      	cmp	r2, r3
 8006714:	d066      	beq.n	80067e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	429a      	cmp	r2, r3
 800671e:	d161      	bne.n	80067e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006720:	4b32      	ldr	r3, [pc, #200]	@ (80067ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	429a      	cmp	r2, r3
 8006728:	d10d      	bne.n	8006746 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	b672      	cpsid	i
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	b662      	cpsie	i
 800673e:	60bb      	str	r3, [r7, #8]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	db04      	blt.n	8006764 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f1c3 0207 	rsb	r2, r3, #7
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	6959      	ldr	r1, [r3, #20]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006774:	4413      	add	r3, r2
 8006776:	4299      	cmp	r1, r3
 8006778:	d134      	bne.n	80067e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fb01 	bl	8004d86 <uxListRemove>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d115      	bne.n	80067b6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678e:	4918      	ldr	r1, [pc, #96]	@ (80067f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	4b11      	ldr	r3, [pc, #68]	@ (80067f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4013      	ands	r3, r2
 80067b2:	4a10      	ldr	r2, [pc, #64]	@ (80067f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80067b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	2201      	movs	r2, #1
 80067bc:	409a      	lsls	r2, r3
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	4a0b      	ldr	r2, [pc, #44]	@ (80067f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a06      	ldr	r2, [pc, #24]	@ (80067f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80067d6:	441a      	add	r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fe fa74 	bl	8004ccc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067e4:	bf00      	nop
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	200006ec 	.word	0x200006ec
 80067f0:	200006f0 	.word	0x200006f0
 80067f4:	200007f4 	.word	0x200007f4

080067f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <pvTaskIncrementMutexHeldCount+0x24>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006804:	4b05      	ldr	r3, [pc, #20]	@ (800681c <pvTaskIncrementMutexHeldCount+0x24>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800680a:	3201      	adds	r2, #1
 800680c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800680e:	4b03      	ldr	r3, [pc, #12]	@ (800681c <pvTaskIncrementMutexHeldCount+0x24>)
 8006810:	681b      	ldr	r3, [r3, #0]
	}
 8006812:	4618      	mov	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	200006ec 	.word	0x200006ec

08006820 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800682a:	4b29      	ldr	r3, [pc, #164]	@ (80068d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe faa5 	bl	8004d86 <uxListRemove>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006842:	4b24      	ldr	r3, [pc, #144]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	2201      	movs	r2, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43da      	mvns	r2, r3
 8006850:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4013      	ands	r3, r2
 8006856:	4a20      	ldr	r2, [pc, #128]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d10a      	bne.n	8006878 <prvAddCurrentTaskToDelayedList+0x58>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006868:	4b1a      	ldr	r3, [pc, #104]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4619      	mov	r1, r3
 8006870:	481a      	ldr	r0, [pc, #104]	@ (80068dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006872:	f7fe fa2b 	bl	8004ccc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006876:	e026      	b.n	80068c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006880:	4b14      	ldr	r3, [pc, #80]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	429a      	cmp	r2, r3
 800688e:	d209      	bcs.n	80068a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006890:	4b13      	ldr	r3, [pc, #76]	@ (80068e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b0f      	ldr	r3, [pc, #60]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7fe fa39 	bl	8004d14 <vListInsert>
}
 80068a2:	e010      	b.n	80068c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a4:	4b0f      	ldr	r3, [pc, #60]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fe fa2f 	bl	8004d14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068b6:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d202      	bcs.n	80068c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068c0:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6013      	str	r3, [r2, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200007f0 	.word	0x200007f0
 80068d4:	200006ec 	.word	0x200006ec
 80068d8:	200007f4 	.word	0x200007f4
 80068dc:	200007d8 	.word	0x200007d8
 80068e0:	200007a8 	.word	0x200007a8
 80068e4:	200007a4 	.word	0x200007a4
 80068e8:	2000080c 	.word	0x2000080c

080068ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3b04      	subs	r3, #4
 80068fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3b04      	subs	r3, #4
 800690a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f023 0201 	bic.w	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3b04      	subs	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800691c:	4a0c      	ldr	r2, [pc, #48]	@ (8006950 <pxPortInitialiseStack+0x64>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b14      	subs	r3, #20
 8006926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b04      	subs	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f06f 0202 	mvn.w	r2, #2
 800693a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b20      	subs	r3, #32
 8006940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	08006955 	.word	0x08006955

08006954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800695e:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <prvTaskExitError+0x60>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d00d      	beq.n	8006984 <prvTaskExitError+0x30>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	b672      	cpsid	i
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	b662      	cpsie	i
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <prvTaskExitError+0x2c>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	b672      	cpsid	i
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	b662      	cpsie	i
 8006998:	60bb      	str	r3, [r7, #8]
}
 800699a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800699c:	bf00      	nop
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0fc      	beq.n	800699e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000014 	.word	0x20000014
	...

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069e8:	4808      	ldr	r0, [pc, #32]	@ (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed08 	.word	0xe000ed08

08006a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a16:	4b37      	ldr	r3, [pc, #220]	@ (8006af4 <xPortStartScheduler+0xe4>)
 8006a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	@ 0xff
 8006a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006af8 <xPortStartScheduler+0xe8>)
 8006a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a44:	e009      	b.n	8006a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a46:	4b2d      	ldr	r3, [pc, #180]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	2b80      	cmp	r3, #128	@ 0x80
 8006a64:	d0ef      	beq.n	8006a46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a66:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1c3 0307 	rsb	r3, r3, #7
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d00d      	beq.n	8006a8e <xPortStartScheduler+0x7e>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	b672      	cpsid	i
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	b662      	cpsie	i
 8006a86:	60bb      	str	r3, [r7, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	e7fd      	b.n	8006a8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a98:	4b18      	ldr	r3, [pc, #96]	@ (8006afc <xPortStartScheduler+0xec>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006aa0:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <xPortStartScheduler+0xec>)
 8006aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aac:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <xPortStartScheduler+0xf0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	@ (8006b00 <xPortStartScheduler+0xf0>)
 8006ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	@ (8006b00 <xPortStartScheduler+0xf0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a10      	ldr	r2, [pc, #64]	@ (8006b00 <xPortStartScheduler+0xf0>)
 8006abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ac4:	f000 f8dc 	bl	8006c80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b04 <xPortStartScheduler+0xf4>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ace:	f000 f8fb 	bl	8006cc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <xPortStartScheduler+0xf8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b08 <xPortStartScheduler+0xf8>)
 8006ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ade:	f7ff ff83 	bl	80069e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ae2:	f7ff fa71 	bl	8005fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8006ae6:	f7ff ff35 	bl	8006954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	e000e400 	.word	0xe000e400
 8006af8:	20000818 	.word	0x20000818
 8006afc:	2000081c 	.word	0x2000081c
 8006b00:	e000ed20 	.word	0xe000ed20
 8006b04:	20000014 	.word	0x20000014
 8006b08:	e000ef34 	.word	0xe000ef34

08006b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	b672      	cpsid	i
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	b662      	cpsie	i
 8006b26:	607b      	str	r3, [r7, #4]
}
 8006b28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b2a:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <vPortEnterCritical+0x64>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	4a0f      	ldr	r2, [pc, #60]	@ (8006b70 <vPortEnterCritical+0x64>)
 8006b32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b34:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <vPortEnterCritical+0x64>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d112      	bne.n	8006b62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <vPortEnterCritical+0x68>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <vPortEnterCritical+0x56>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	b672      	cpsid	i
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	b662      	cpsie	i
 8006b5a:	603b      	str	r3, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <vPortEnterCritical+0x52>
	}
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000014 	.word	0x20000014
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b7e:	4b13      	ldr	r3, [pc, #76]	@ (8006bcc <vPortExitCritical+0x54>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <vPortExitCritical+0x2a>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	b672      	cpsid	i
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	b662      	cpsie	i
 8006b9a:	607b      	str	r3, [r7, #4]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <vPortExitCritical+0x54>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	4a08      	ldr	r2, [pc, #32]	@ (8006bcc <vPortExitCritical+0x54>)
 8006baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <vPortExitCritical+0x54>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <vPortExitCritical+0x48>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	20000014 	.word	0x20000014

08006bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bd0:	f3ef 8009 	mrs	r0, PSP
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <pxCurrentTCBConst>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f01e 0f10 	tst.w	lr, #16
 8006be0:	bf08      	it	eq
 8006be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	6010      	str	r0, [r2, #0]
 8006bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bf4:	b672      	cpsid	i
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	b662      	cpsie	i
 8006c04:	f7ff f9e0 	bl	8005fc8 <vTaskSwitchContext>
 8006c08:	f04f 0000 	mov.w	r0, #0
 8006c0c:	f380 8811 	msr	BASEPRI, r0
 8006c10:	bc09      	pop	{r0, r3}
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	6808      	ldr	r0, [r1, #0]
 8006c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	f01e 0f10 	tst.w	lr, #16
 8006c1e:	bf08      	it	eq
 8006c20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c24:	f380 8809 	msr	PSP, r0
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <pxCurrentTCBConst>:
 8006c30:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	607b      	str	r3, [r7, #4]
}
 8006c54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c56:	f7ff f8fb 	bl	8005e50 <xTaskIncrementTick>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <xPortSysTickHandler+0x44>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f383 8811 	msr	BASEPRI, r3
}
 8006c72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c84:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <vPortSetupTimerInterrupt+0x34>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <vPortSetupTimerInterrupt+0x38>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	@ (8006cbc <vPortSetupTimerInterrupt+0x3c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc0 <vPortSetupTimerInterrupt+0x40>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	099b      	lsrs	r3, r3, #6
 8006c9c:	4a09      	ldr	r2, [pc, #36]	@ (8006cc4 <vPortSetupTimerInterrupt+0x44>)
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ca2:	4b04      	ldr	r3, [pc, #16]	@ (8006cb4 <vPortSetupTimerInterrupt+0x34>)
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	601a      	str	r2, [r3, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	e000e010 	.word	0xe000e010
 8006cb8:	e000e018 	.word	0xe000e018
 8006cbc:	20000008 	.word	0x20000008
 8006cc0:	10624dd3 	.word	0x10624dd3
 8006cc4:	e000e014 	.word	0xe000e014

08006cc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cd8 <vPortEnableVFP+0x10>
 8006ccc:	6801      	ldr	r1, [r0, #0]
 8006cce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cd2:	6001      	str	r1, [r0, #0]
 8006cd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cd6:	bf00      	nop
 8006cd8:	e000ed88 	.word	0xe000ed88

08006cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ce2:	f3ef 8305 	mrs	r3, IPSR
 8006ce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d917      	bls.n	8006d1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cee:	4a1a      	ldr	r2, [pc, #104]	@ (8006d58 <vPortValidateInterruptPriority+0x7c>)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cf8:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <vPortValidateInterruptPriority+0x80>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	7afa      	ldrb	r2, [r7, #11]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20d      	bcs.n	8006d1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	b672      	cpsid	i
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	b662      	cpsie	i
 8006d16:	607b      	str	r3, [r7, #4]
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d1e:	4b10      	ldr	r3, [pc, #64]	@ (8006d60 <vPortValidateInterruptPriority+0x84>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d26:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <vPortValidateInterruptPriority+0x88>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d90d      	bls.n	8006d4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	b672      	cpsid	i
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	b662      	cpsie	i
 8006d42:	603b      	str	r3, [r7, #0]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <vPortValidateInterruptPriority+0x6a>
	}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	e000e3f0 	.word	0xe000e3f0
 8006d5c:	20000818 	.word	0x20000818
 8006d60:	e000ed0c 	.word	0xe000ed0c
 8006d64:	2000081c 	.word	0x2000081c

08006d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d74:	f7fe ffbe 	bl	8005cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d78:	4b5d      	ldr	r3, [pc, #372]	@ (8006ef0 <pvPortMalloc+0x188>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d80:	f000 f920 	bl	8006fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d84:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef4 <pvPortMalloc+0x18c>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f040 8094 	bne.w	8006eba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d020      	beq.n	8006dda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006d98:	2208      	movs	r2, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	3308      	adds	r3, #8
 8006db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <pvPortMalloc+0x72>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	b672      	cpsid	i
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	b662      	cpsie	i
 8006dd2:	617b      	str	r3, [r7, #20]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d06c      	beq.n	8006eba <pvPortMalloc+0x152>
 8006de0:	4b45      	ldr	r3, [pc, #276]	@ (8006ef8 <pvPortMalloc+0x190>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d867      	bhi.n	8006eba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dea:	4b44      	ldr	r3, [pc, #272]	@ (8006efc <pvPortMalloc+0x194>)
 8006dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dee:	4b43      	ldr	r3, [pc, #268]	@ (8006efc <pvPortMalloc+0x194>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006df4:	e004      	b.n	8006e00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d903      	bls.n	8006e12 <pvPortMalloc+0xaa>
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f1      	bne.n	8006df6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e12:	4b37      	ldr	r3, [pc, #220]	@ (8006ef0 <pvPortMalloc+0x188>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d04e      	beq.n	8006eba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2208      	movs	r2, #8
 8006e22:	4413      	add	r3, r2
 8006e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	1ad2      	subs	r2, r2, r3
 8006e36:	2308      	movs	r3, #8
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d922      	bls.n	8006e84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4413      	add	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00d      	beq.n	8006e6c <pvPortMalloc+0x104>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	613b      	str	r3, [r7, #16]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e7e:	69b8      	ldr	r0, [r7, #24]
 8006e80:	f000 f902 	bl	8007088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e84:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef8 <pvPortMalloc+0x190>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ef8 <pvPortMalloc+0x190>)
 8006e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e92:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <pvPortMalloc+0x190>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <pvPortMalloc+0x198>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d203      	bcs.n	8006ea6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e9e:	4b16      	ldr	r3, [pc, #88]	@ (8006ef8 <pvPortMalloc+0x190>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a17      	ldr	r2, [pc, #92]	@ (8006f00 <pvPortMalloc+0x198>)
 8006ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <pvPortMalloc+0x18c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006eba:	f7fe ff29 	bl	8005d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00d      	beq.n	8006ee4 <pvPortMalloc+0x17c>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ecc:	b672      	cpsid	i
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	b662      	cpsie	i
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <pvPortMalloc+0x178>
	return pvReturn;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3728      	adds	r7, #40	@ 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20004428 	.word	0x20004428
 8006ef4:	20004434 	.word	0x20004434
 8006ef8:	2000442c 	.word	0x2000442c
 8006efc:	20004420 	.word	0x20004420
 8006f00:	20004430 	.word	0x20004430

08006f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04e      	beq.n	8006fb4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f16:	2308      	movs	r3, #8
 8006f18:	425b      	negs	r3, r3
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <vPortFree+0xb8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10d      	bne.n	8006f4e <vPortFree+0x4a>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
 8006f46:	60fb      	str	r3, [r7, #12]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <vPortFree+0x6e>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	b672      	cpsid	i
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	b662      	cpsie	i
 8006f6a:	60bb      	str	r3, [r7, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	4b11      	ldr	r3, [pc, #68]	@ (8006fbc <vPortFree+0xb8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d019      	beq.n	8006fb4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d115      	bne.n	8006fb4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <vPortFree+0xb8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	401a      	ands	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f98:	f7fe feac 	bl	8005cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	4b07      	ldr	r3, [pc, #28]	@ (8006fc0 <vPortFree+0xbc>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	4a06      	ldr	r2, [pc, #24]	@ (8006fc0 <vPortFree+0xbc>)
 8006fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f000 f86c 	bl	8007088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fb0:	f7fe feae 	bl	8005d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20004434 	.word	0x20004434
 8006fc0:	2000442c 	.word	0x2000442c

08006fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fd0:	4b27      	ldr	r3, [pc, #156]	@ (8007070 <prvHeapInit+0xac>)
 8006fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8007070 <prvHeapInit+0xac>)
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8007074 <prvHeapInit+0xb0>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007002:	4b1c      	ldr	r3, [pc, #112]	@ (8007074 <prvHeapInit+0xb0>)
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007010:	2208      	movs	r2, #8
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0307 	bic.w	r3, r3, #7
 800701e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a15      	ldr	r2, [pc, #84]	@ (8007078 <prvHeapInit+0xb4>)
 8007024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007026:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <prvHeapInit+0xb4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800702e:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <prvHeapInit+0xb4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007044:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <prvHeapInit+0xb4>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a0a      	ldr	r2, [pc, #40]	@ (800707c <prvHeapInit+0xb8>)
 8007052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4a09      	ldr	r2, [pc, #36]	@ (8007080 <prvHeapInit+0xbc>)
 800705a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800705c:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <prvHeapInit+0xc0>)
 800705e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20000820 	.word	0x20000820
 8007074:	20004420 	.word	0x20004420
 8007078:	20004428 	.word	0x20004428
 800707c:	20004430 	.word	0x20004430
 8007080:	2000442c 	.word	0x2000442c
 8007084:	20004434 	.word	0x20004434

08007088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007090:	4b28      	ldr	r3, [pc, #160]	@ (8007134 <prvInsertBlockIntoFreeList+0xac>)
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	e002      	b.n	800709c <prvInsertBlockIntoFreeList+0x14>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d8f7      	bhi.n	8007096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4413      	add	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d108      	bne.n	80070ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d118      	bne.n	8007110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <prvInsertBlockIntoFreeList+0xb0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d00d      	beq.n	8007106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	441a      	add	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e008      	b.n	8007118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007106:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <prvInsertBlockIntoFreeList+0xb0>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e003      	b.n	8007118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	d002      	beq.n	8007126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20004420 	.word	0x20004420
 8007138:	20004428 	.word	0x20004428

0800713c <atoi>:
 800713c:	220a      	movs	r2, #10
 800713e:	2100      	movs	r1, #0
 8007140:	f000 b87a 	b.w	8007238 <strtol>

08007144 <_strtol_l.isra.0>:
 8007144:	2b24      	cmp	r3, #36	@ 0x24
 8007146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714a:	4686      	mov	lr, r0
 800714c:	4690      	mov	r8, r2
 800714e:	d801      	bhi.n	8007154 <_strtol_l.isra.0+0x10>
 8007150:	2b01      	cmp	r3, #1
 8007152:	d106      	bne.n	8007162 <_strtol_l.isra.0+0x1e>
 8007154:	f000 fb08 	bl	8007768 <__errno>
 8007158:	2316      	movs	r3, #22
 800715a:	6003      	str	r3, [r0, #0]
 800715c:	2000      	movs	r0, #0
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	4834      	ldr	r0, [pc, #208]	@ (8007234 <_strtol_l.isra.0+0xf0>)
 8007164:	460d      	mov	r5, r1
 8007166:	462a      	mov	r2, r5
 8007168:	f815 4b01 	ldrb.w	r4, [r5], #1
 800716c:	5d06      	ldrb	r6, [r0, r4]
 800716e:	f016 0608 	ands.w	r6, r6, #8
 8007172:	d1f8      	bne.n	8007166 <_strtol_l.isra.0+0x22>
 8007174:	2c2d      	cmp	r4, #45	@ 0x2d
 8007176:	d110      	bne.n	800719a <_strtol_l.isra.0+0x56>
 8007178:	782c      	ldrb	r4, [r5, #0]
 800717a:	2601      	movs	r6, #1
 800717c:	1c95      	adds	r5, r2, #2
 800717e:	f033 0210 	bics.w	r2, r3, #16
 8007182:	d115      	bne.n	80071b0 <_strtol_l.isra.0+0x6c>
 8007184:	2c30      	cmp	r4, #48	@ 0x30
 8007186:	d10d      	bne.n	80071a4 <_strtol_l.isra.0+0x60>
 8007188:	782a      	ldrb	r2, [r5, #0]
 800718a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800718e:	2a58      	cmp	r2, #88	@ 0x58
 8007190:	d108      	bne.n	80071a4 <_strtol_l.isra.0+0x60>
 8007192:	786c      	ldrb	r4, [r5, #1]
 8007194:	3502      	adds	r5, #2
 8007196:	2310      	movs	r3, #16
 8007198:	e00a      	b.n	80071b0 <_strtol_l.isra.0+0x6c>
 800719a:	2c2b      	cmp	r4, #43	@ 0x2b
 800719c:	bf04      	itt	eq
 800719e:	782c      	ldrbeq	r4, [r5, #0]
 80071a0:	1c95      	addeq	r5, r2, #2
 80071a2:	e7ec      	b.n	800717e <_strtol_l.isra.0+0x3a>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f6      	bne.n	8007196 <_strtol_l.isra.0+0x52>
 80071a8:	2c30      	cmp	r4, #48	@ 0x30
 80071aa:	bf14      	ite	ne
 80071ac:	230a      	movne	r3, #10
 80071ae:	2308      	moveq	r3, #8
 80071b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80071b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071b8:	2200      	movs	r2, #0
 80071ba:	fbbc f9f3 	udiv	r9, ip, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80071c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071c8:	2f09      	cmp	r7, #9
 80071ca:	d80f      	bhi.n	80071ec <_strtol_l.isra.0+0xa8>
 80071cc:	463c      	mov	r4, r7
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	dd1b      	ble.n	800720a <_strtol_l.isra.0+0xc6>
 80071d2:	1c57      	adds	r7, r2, #1
 80071d4:	d007      	beq.n	80071e6 <_strtol_l.isra.0+0xa2>
 80071d6:	4581      	cmp	r9, r0
 80071d8:	d314      	bcc.n	8007204 <_strtol_l.isra.0+0xc0>
 80071da:	d101      	bne.n	80071e0 <_strtol_l.isra.0+0x9c>
 80071dc:	45a2      	cmp	sl, r4
 80071de:	db11      	blt.n	8007204 <_strtol_l.isra.0+0xc0>
 80071e0:	fb00 4003 	mla	r0, r0, r3, r4
 80071e4:	2201      	movs	r2, #1
 80071e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ea:	e7eb      	b.n	80071c4 <_strtol_l.isra.0+0x80>
 80071ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071f0:	2f19      	cmp	r7, #25
 80071f2:	d801      	bhi.n	80071f8 <_strtol_l.isra.0+0xb4>
 80071f4:	3c37      	subs	r4, #55	@ 0x37
 80071f6:	e7ea      	b.n	80071ce <_strtol_l.isra.0+0x8a>
 80071f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071fc:	2f19      	cmp	r7, #25
 80071fe:	d804      	bhi.n	800720a <_strtol_l.isra.0+0xc6>
 8007200:	3c57      	subs	r4, #87	@ 0x57
 8007202:	e7e4      	b.n	80071ce <_strtol_l.isra.0+0x8a>
 8007204:	f04f 32ff 	mov.w	r2, #4294967295
 8007208:	e7ed      	b.n	80071e6 <_strtol_l.isra.0+0xa2>
 800720a:	1c53      	adds	r3, r2, #1
 800720c:	d108      	bne.n	8007220 <_strtol_l.isra.0+0xdc>
 800720e:	2322      	movs	r3, #34	@ 0x22
 8007210:	f8ce 3000 	str.w	r3, [lr]
 8007214:	4660      	mov	r0, ip
 8007216:	f1b8 0f00 	cmp.w	r8, #0
 800721a:	d0a0      	beq.n	800715e <_strtol_l.isra.0+0x1a>
 800721c:	1e69      	subs	r1, r5, #1
 800721e:	e006      	b.n	800722e <_strtol_l.isra.0+0xea>
 8007220:	b106      	cbz	r6, 8007224 <_strtol_l.isra.0+0xe0>
 8007222:	4240      	negs	r0, r0
 8007224:	f1b8 0f00 	cmp.w	r8, #0
 8007228:	d099      	beq.n	800715e <_strtol_l.isra.0+0x1a>
 800722a:	2a00      	cmp	r2, #0
 800722c:	d1f6      	bne.n	800721c <_strtol_l.isra.0+0xd8>
 800722e:	f8c8 1000 	str.w	r1, [r8]
 8007232:	e794      	b.n	800715e <_strtol_l.isra.0+0x1a>
 8007234:	08008985 	.word	0x08008985

08007238 <strtol>:
 8007238:	4613      	mov	r3, r2
 800723a:	460a      	mov	r2, r1
 800723c:	4601      	mov	r1, r0
 800723e:	4802      	ldr	r0, [pc, #8]	@ (8007248 <strtol+0x10>)
 8007240:	6800      	ldr	r0, [r0, #0]
 8007242:	f7ff bf7f 	b.w	8007144 <_strtol_l.isra.0>
 8007246:	bf00      	nop
 8007248:	20000024 	.word	0x20000024

0800724c <std>:
 800724c:	2300      	movs	r3, #0
 800724e:	b510      	push	{r4, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	e9c0 3300 	strd	r3, r3, [r0]
 8007256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800725a:	6083      	str	r3, [r0, #8]
 800725c:	8181      	strh	r1, [r0, #12]
 800725e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007260:	81c2      	strh	r2, [r0, #14]
 8007262:	6183      	str	r3, [r0, #24]
 8007264:	4619      	mov	r1, r3
 8007266:	2208      	movs	r2, #8
 8007268:	305c      	adds	r0, #92	@ 0x5c
 800726a:	f000 fa2f 	bl	80076cc <memset>
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x58>)
 8007270:	6263      	str	r3, [r4, #36]	@ 0x24
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x5c>)
 8007274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x60>)
 8007278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <std+0x64>)
 800727c:	6323      	str	r3, [r4, #48]	@ 0x30
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <std+0x68>)
 8007280:	6224      	str	r4, [r4, #32]
 8007282:	429c      	cmp	r4, r3
 8007284:	d006      	beq.n	8007294 <std+0x48>
 8007286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800728a:	4294      	cmp	r4, r2
 800728c:	d002      	beq.n	8007294 <std+0x48>
 800728e:	33d0      	adds	r3, #208	@ 0xd0
 8007290:	429c      	cmp	r4, r3
 8007292:	d105      	bne.n	80072a0 <std+0x54>
 8007294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f000 ba8e 	b.w	80077bc <__retarget_lock_init_recursive>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	0800751d 	.word	0x0800751d
 80072a8:	0800753f 	.word	0x0800753f
 80072ac:	08007577 	.word	0x08007577
 80072b0:	0800759b 	.word	0x0800759b
 80072b4:	20004438 	.word	0x20004438

080072b8 <stdio_exit_handler>:
 80072b8:	4a02      	ldr	r2, [pc, #8]	@ (80072c4 <stdio_exit_handler+0xc>)
 80072ba:	4903      	ldr	r1, [pc, #12]	@ (80072c8 <stdio_exit_handler+0x10>)
 80072bc:	4803      	ldr	r0, [pc, #12]	@ (80072cc <stdio_exit_handler+0x14>)
 80072be:	f000 b869 	b.w	8007394 <_fwalk_sglue>
 80072c2:	bf00      	nop
 80072c4:	20000018 	.word	0x20000018
 80072c8:	08008325 	.word	0x08008325
 80072cc:	20000028 	.word	0x20000028

080072d0 <cleanup_stdio>:
 80072d0:	6841      	ldr	r1, [r0, #4]
 80072d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <cleanup_stdio+0x34>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	d001      	beq.n	80072e0 <cleanup_stdio+0x10>
 80072dc:	f001 f822 	bl	8008324 <_fflush_r>
 80072e0:	68a1      	ldr	r1, [r4, #8]
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <cleanup_stdio+0x38>)
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <cleanup_stdio+0x1e>
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 f81b 	bl	8008324 <_fflush_r>
 80072ee:	68e1      	ldr	r1, [r4, #12]
 80072f0:	4b06      	ldr	r3, [pc, #24]	@ (800730c <cleanup_stdio+0x3c>)
 80072f2:	4299      	cmp	r1, r3
 80072f4:	d004      	beq.n	8007300 <cleanup_stdio+0x30>
 80072f6:	4620      	mov	r0, r4
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f001 b812 	b.w	8008324 <_fflush_r>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	20004438 	.word	0x20004438
 8007308:	200044a0 	.word	0x200044a0
 800730c:	20004508 	.word	0x20004508

08007310 <global_stdio_init.part.0>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <global_stdio_init.part.0+0x30>)
 8007314:	4c0b      	ldr	r4, [pc, #44]	@ (8007344 <global_stdio_init.part.0+0x34>)
 8007316:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <global_stdio_init.part.0+0x38>)
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	4620      	mov	r0, r4
 800731c:	2200      	movs	r2, #0
 800731e:	2104      	movs	r1, #4
 8007320:	f7ff ff94 	bl	800724c <std>
 8007324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007328:	2201      	movs	r2, #1
 800732a:	2109      	movs	r1, #9
 800732c:	f7ff ff8e 	bl	800724c <std>
 8007330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007334:	2202      	movs	r2, #2
 8007336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733a:	2112      	movs	r1, #18
 800733c:	f7ff bf86 	b.w	800724c <std>
 8007340:	20004570 	.word	0x20004570
 8007344:	20004438 	.word	0x20004438
 8007348:	080072b9 	.word	0x080072b9

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	@ (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 ba36 	b.w	80077be <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20004579 	.word	0x20004579

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	@ (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 ba31 	b.w	80077c0 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20004579 	.word	0x20004579

08007364 <__sinit>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4604      	mov	r4, r0
 8007368:	f7ff fff0 	bl	800734c <__sfp_lock_acquire>
 800736c:	6a23      	ldr	r3, [r4, #32]
 800736e:	b11b      	cbz	r3, 8007378 <__sinit+0x14>
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007374:	f7ff bff0 	b.w	8007358 <__sfp_lock_release>
 8007378:	4b04      	ldr	r3, [pc, #16]	@ (800738c <__sinit+0x28>)
 800737a:	6223      	str	r3, [r4, #32]
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <__sinit+0x2c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f5      	bne.n	8007370 <__sinit+0xc>
 8007384:	f7ff ffc4 	bl	8007310 <global_stdio_init.part.0>
 8007388:	e7f2      	b.n	8007370 <__sinit+0xc>
 800738a:	bf00      	nop
 800738c:	080072d1 	.word	0x080072d1
 8007390:	20004570 	.word	0x20004570

08007394 <_fwalk_sglue>:
 8007394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007398:	4607      	mov	r7, r0
 800739a:	4688      	mov	r8, r1
 800739c:	4614      	mov	r4, r2
 800739e:	2600      	movs	r6, #0
 80073a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a4:	f1b9 0901 	subs.w	r9, r9, #1
 80073a8:	d505      	bpl.n	80073b6 <_fwalk_sglue+0x22>
 80073aa:	6824      	ldr	r4, [r4, #0]
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d1f7      	bne.n	80073a0 <_fwalk_sglue+0xc>
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d907      	bls.n	80073cc <_fwalk_sglue+0x38>
 80073bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c0:	3301      	adds	r3, #1
 80073c2:	d003      	beq.n	80073cc <_fwalk_sglue+0x38>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	4306      	orrs	r6, r0
 80073cc:	3568      	adds	r5, #104	@ 0x68
 80073ce:	e7e9      	b.n	80073a4 <_fwalk_sglue+0x10>

080073d0 <iprintf>:
 80073d0:	b40f      	push	{r0, r1, r2, r3}
 80073d2:	b507      	push	{r0, r1, r2, lr}
 80073d4:	4906      	ldr	r1, [pc, #24]	@ (80073f0 <iprintf+0x20>)
 80073d6:	ab04      	add	r3, sp, #16
 80073d8:	6808      	ldr	r0, [r1, #0]
 80073da:	f853 2b04 	ldr.w	r2, [r3], #4
 80073de:	6881      	ldr	r1, [r0, #8]
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	f000 fc77 	bl	8007cd4 <_vfiprintf_r>
 80073e6:	b003      	add	sp, #12
 80073e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ec:	b004      	add	sp, #16
 80073ee:	4770      	bx	lr
 80073f0:	20000024 	.word	0x20000024

080073f4 <_puts_r>:
 80073f4:	6a03      	ldr	r3, [r0, #32]
 80073f6:	b570      	push	{r4, r5, r6, lr}
 80073f8:	6884      	ldr	r4, [r0, #8]
 80073fa:	4605      	mov	r5, r0
 80073fc:	460e      	mov	r6, r1
 80073fe:	b90b      	cbnz	r3, 8007404 <_puts_r+0x10>
 8007400:	f7ff ffb0 	bl	8007364 <__sinit>
 8007404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007406:	07db      	lsls	r3, r3, #31
 8007408:	d405      	bmi.n	8007416 <_puts_r+0x22>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	0598      	lsls	r0, r3, #22
 800740e:	d402      	bmi.n	8007416 <_puts_r+0x22>
 8007410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007412:	f000 f9d4 	bl	80077be <__retarget_lock_acquire_recursive>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	0719      	lsls	r1, r3, #28
 800741a:	d502      	bpl.n	8007422 <_puts_r+0x2e>
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d135      	bne.n	800748e <_puts_r+0x9a>
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f8fb 	bl	8007620 <__swsetup_r>
 800742a:	b380      	cbz	r0, 800748e <_puts_r+0x9a>
 800742c:	f04f 35ff 	mov.w	r5, #4294967295
 8007430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007432:	07da      	lsls	r2, r3, #31
 8007434:	d405      	bmi.n	8007442 <_puts_r+0x4e>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	059b      	lsls	r3, r3, #22
 800743a:	d402      	bmi.n	8007442 <_puts_r+0x4e>
 800743c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743e:	f000 f9bf 	bl	80077c0 <__retarget_lock_release_recursive>
 8007442:	4628      	mov	r0, r5
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	2b00      	cmp	r3, #0
 8007448:	da04      	bge.n	8007454 <_puts_r+0x60>
 800744a:	69a2      	ldr	r2, [r4, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	dc17      	bgt.n	8007480 <_puts_r+0x8c>
 8007450:	290a      	cmp	r1, #10
 8007452:	d015      	beq.n	8007480 <_puts_r+0x8c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	6022      	str	r2, [r4, #0]
 800745a:	7019      	strb	r1, [r3, #0]
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007462:	3b01      	subs	r3, #1
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	2900      	cmp	r1, #0
 8007468:	d1ed      	bne.n	8007446 <_puts_r+0x52>
 800746a:	2b00      	cmp	r3, #0
 800746c:	da11      	bge.n	8007492 <_puts_r+0x9e>
 800746e:	4622      	mov	r2, r4
 8007470:	210a      	movs	r1, #10
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f895 	bl	80075a2 <__swbuf_r>
 8007478:	3001      	adds	r0, #1
 800747a:	d0d7      	beq.n	800742c <_puts_r+0x38>
 800747c:	250a      	movs	r5, #10
 800747e:	e7d7      	b.n	8007430 <_puts_r+0x3c>
 8007480:	4622      	mov	r2, r4
 8007482:	4628      	mov	r0, r5
 8007484:	f000 f88d 	bl	80075a2 <__swbuf_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d1e7      	bne.n	800745c <_puts_r+0x68>
 800748c:	e7ce      	b.n	800742c <_puts_r+0x38>
 800748e:	3e01      	subs	r6, #1
 8007490:	e7e4      	b.n	800745c <_puts_r+0x68>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	220a      	movs	r2, #10
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	e7ee      	b.n	800747c <_puts_r+0x88>
	...

080074a0 <puts>:
 80074a0:	4b02      	ldr	r3, [pc, #8]	@ (80074ac <puts+0xc>)
 80074a2:	4601      	mov	r1, r0
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f7ff bfa5 	b.w	80073f4 <_puts_r>
 80074aa:	bf00      	nop
 80074ac:	20000024 	.word	0x20000024

080074b0 <sniprintf>:
 80074b0:	b40c      	push	{r2, r3}
 80074b2:	b530      	push	{r4, r5, lr}
 80074b4:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <sniprintf+0x68>)
 80074b6:	1e0c      	subs	r4, r1, #0
 80074b8:	681d      	ldr	r5, [r3, #0]
 80074ba:	b09d      	sub	sp, #116	@ 0x74
 80074bc:	da08      	bge.n	80074d0 <sniprintf+0x20>
 80074be:	238b      	movs	r3, #139	@ 0x8b
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	b01d      	add	sp, #116	@ 0x74
 80074c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074cc:	b002      	add	sp, #8
 80074ce:	4770      	bx	lr
 80074d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074de:	bf14      	ite	ne
 80074e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074e4:	4623      	moveq	r3, r4
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074ee:	9002      	str	r0, [sp, #8]
 80074f0:	9006      	str	r0, [sp, #24]
 80074f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074f8:	ab21      	add	r3, sp, #132	@ 0x84
 80074fa:	a902      	add	r1, sp, #8
 80074fc:	4628      	mov	r0, r5
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	f000 fac2 	bl	8007a88 <_svfiprintf_r>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	bfbc      	itt	lt
 8007508:	238b      	movlt	r3, #139	@ 0x8b
 800750a:	602b      	strlt	r3, [r5, #0]
 800750c:	2c00      	cmp	r4, #0
 800750e:	d0da      	beq.n	80074c6 <sniprintf+0x16>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	e7d6      	b.n	80074c6 <sniprintf+0x16>
 8007518:	20000024 	.word	0x20000024

0800751c <__sread>:
 800751c:	b510      	push	{r4, lr}
 800751e:	460c      	mov	r4, r1
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	f000 f8fc 	bl	8007720 <_read_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	bfab      	itete	ge
 800752c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800752e:	89a3      	ldrhlt	r3, [r4, #12]
 8007530:	181b      	addge	r3, r3, r0
 8007532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007536:	bfac      	ite	ge
 8007538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800753a:	81a3      	strhlt	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__swrite>:
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	461f      	mov	r7, r3
 8007544:	898b      	ldrh	r3, [r1, #12]
 8007546:	05db      	lsls	r3, r3, #23
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4616      	mov	r6, r2
 800754e:	d505      	bpl.n	800755c <__swrite+0x1e>
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2302      	movs	r3, #2
 8007556:	2200      	movs	r2, #0
 8007558:	f000 f8d0 	bl	80076fc <_lseek_r>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f000 b8e7 	b.w	8007744 <_write_r>

08007576 <__sseek>:
 8007576:	b510      	push	{r4, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 f8bd 	bl	80076fc <_lseek_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	bf15      	itete	ne
 8007588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800758a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800758e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007592:	81a3      	strheq	r3, [r4, #12]
 8007594:	bf18      	it	ne
 8007596:	81a3      	strhne	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__sclose>:
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 b89d 	b.w	80076dc <_close_r>

080075a2 <__swbuf_r>:
 80075a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a4:	460e      	mov	r6, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	4605      	mov	r5, r0
 80075aa:	b118      	cbz	r0, 80075b4 <__swbuf_r+0x12>
 80075ac:	6a03      	ldr	r3, [r0, #32]
 80075ae:	b90b      	cbnz	r3, 80075b4 <__swbuf_r+0x12>
 80075b0:	f7ff fed8 	bl	8007364 <__sinit>
 80075b4:	69a3      	ldr	r3, [r4, #24]
 80075b6:	60a3      	str	r3, [r4, #8]
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	071a      	lsls	r2, r3, #28
 80075bc:	d501      	bpl.n	80075c2 <__swbuf_r+0x20>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	b943      	cbnz	r3, 80075d4 <__swbuf_r+0x32>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 f82b 	bl	8007620 <__swsetup_r>
 80075ca:	b118      	cbz	r0, 80075d4 <__swbuf_r+0x32>
 80075cc:	f04f 37ff 	mov.w	r7, #4294967295
 80075d0:	4638      	mov	r0, r7
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	6922      	ldr	r2, [r4, #16]
 80075d8:	1a98      	subs	r0, r3, r2
 80075da:	6963      	ldr	r3, [r4, #20]
 80075dc:	b2f6      	uxtb	r6, r6
 80075de:	4283      	cmp	r3, r0
 80075e0:	4637      	mov	r7, r6
 80075e2:	dc05      	bgt.n	80075f0 <__swbuf_r+0x4e>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 fe9c 	bl	8008324 <_fflush_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1ed      	bne.n	80075cc <__swbuf_r+0x2a>
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	701e      	strb	r6, [r3, #0]
 80075fe:	6962      	ldr	r2, [r4, #20]
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	429a      	cmp	r2, r3
 8007604:	d004      	beq.n	8007610 <__swbuf_r+0x6e>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	07db      	lsls	r3, r3, #31
 800760a:	d5e1      	bpl.n	80075d0 <__swbuf_r+0x2e>
 800760c:	2e0a      	cmp	r6, #10
 800760e:	d1df      	bne.n	80075d0 <__swbuf_r+0x2e>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 fe86 	bl	8008324 <_fflush_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0d9      	beq.n	80075d0 <__swbuf_r+0x2e>
 800761c:	e7d6      	b.n	80075cc <__swbuf_r+0x2a>
	...

08007620 <__swsetup_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4b29      	ldr	r3, [pc, #164]	@ (80076c8 <__swsetup_r+0xa8>)
 8007624:	4605      	mov	r5, r0
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	460c      	mov	r4, r1
 800762a:	b118      	cbz	r0, 8007634 <__swsetup_r+0x14>
 800762c:	6a03      	ldr	r3, [r0, #32]
 800762e:	b90b      	cbnz	r3, 8007634 <__swsetup_r+0x14>
 8007630:	f7ff fe98 	bl	8007364 <__sinit>
 8007634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007638:	0719      	lsls	r1, r3, #28
 800763a:	d422      	bmi.n	8007682 <__swsetup_r+0x62>
 800763c:	06da      	lsls	r2, r3, #27
 800763e:	d407      	bmi.n	8007650 <__swsetup_r+0x30>
 8007640:	2209      	movs	r2, #9
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	e033      	b.n	80076b8 <__swsetup_r+0x98>
 8007650:	0758      	lsls	r0, r3, #29
 8007652:	d512      	bpl.n	800767a <__swsetup_r+0x5a>
 8007654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007656:	b141      	cbz	r1, 800766a <__swsetup_r+0x4a>
 8007658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <__swsetup_r+0x46>
 8007660:	4628      	mov	r0, r5
 8007662:	f000 f8bd 	bl	80077e0 <_free_r>
 8007666:	2300      	movs	r3, #0
 8007668:	6363      	str	r3, [r4, #52]	@ 0x34
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	2300      	movs	r3, #0
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0308 	orr.w	r3, r3, #8
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	b94b      	cbnz	r3, 800769a <__swsetup_r+0x7a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800768c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007690:	d003      	beq.n	800769a <__swsetup_r+0x7a>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 fe93 	bl	80083c0 <__smakebuf_r>
 800769a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769e:	f013 0201 	ands.w	r2, r3, #1
 80076a2:	d00a      	beq.n	80076ba <__swsetup_r+0x9a>
 80076a4:	2200      	movs	r2, #0
 80076a6:	60a2      	str	r2, [r4, #8]
 80076a8:	6962      	ldr	r2, [r4, #20]
 80076aa:	4252      	negs	r2, r2
 80076ac:	61a2      	str	r2, [r4, #24]
 80076ae:	6922      	ldr	r2, [r4, #16]
 80076b0:	b942      	cbnz	r2, 80076c4 <__swsetup_r+0xa4>
 80076b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076b6:	d1c5      	bne.n	8007644 <__swsetup_r+0x24>
 80076b8:	bd38      	pop	{r3, r4, r5, pc}
 80076ba:	0799      	lsls	r1, r3, #30
 80076bc:	bf58      	it	pl
 80076be:	6962      	ldrpl	r2, [r4, #20]
 80076c0:	60a2      	str	r2, [r4, #8]
 80076c2:	e7f4      	b.n	80076ae <__swsetup_r+0x8e>
 80076c4:	2000      	movs	r0, #0
 80076c6:	e7f7      	b.n	80076b8 <__swsetup_r+0x98>
 80076c8:	20000024 	.word	0x20000024

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <_close_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d06      	ldr	r5, [pc, #24]	@ (80076f8 <_close_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7fa f945 	bl	8001976 <_close>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_close_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_close_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20004574 	.word	0x20004574

080076fc <_lseek_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d07      	ldr	r5, [pc, #28]	@ (800771c <_lseek_r+0x20>)
 8007700:	4604      	mov	r4, r0
 8007702:	4608      	mov	r0, r1
 8007704:	4611      	mov	r1, r2
 8007706:	2200      	movs	r2, #0
 8007708:	602a      	str	r2, [r5, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f7fa f95a 	bl	80019c4 <_lseek>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_lseek_r+0x1e>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_lseek_r+0x1e>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20004574 	.word	0x20004574

08007720 <_read_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d07      	ldr	r5, [pc, #28]	@ (8007740 <_read_r+0x20>)
 8007724:	4604      	mov	r4, r0
 8007726:	4608      	mov	r0, r1
 8007728:	4611      	mov	r1, r2
 800772a:	2200      	movs	r2, #0
 800772c:	602a      	str	r2, [r5, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	f7fa f8e8 	bl	8001904 <_read>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d102      	bne.n	800773e <_read_r+0x1e>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	b103      	cbz	r3, 800773e <_read_r+0x1e>
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	20004574 	.word	0x20004574

08007744 <_write_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	@ (8007764 <_write_r+0x20>)
 8007748:	4604      	mov	r4, r0
 800774a:	4608      	mov	r0, r1
 800774c:	4611      	mov	r1, r2
 800774e:	2200      	movs	r2, #0
 8007750:	602a      	str	r2, [r5, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	f7fa f8f3 	bl	800193e <_write>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_write_r+0x1e>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_write_r+0x1e>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	20004574 	.word	0x20004574

08007768 <__errno>:
 8007768:	4b01      	ldr	r3, [pc, #4]	@ (8007770 <__errno+0x8>)
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000024 	.word	0x20000024

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	@ (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	@ (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	@ (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	@ (80077b8 <__libc_init_array+0x44>)
 8007788:	f000 fed8 	bl	800853c <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	08008ac0 	.word	0x08008ac0
 80077b0:	08008ac0 	.word	0x08008ac0
 80077b4:	08008ac0 	.word	0x08008ac0
 80077b8:	08008ac4 	.word	0x08008ac4

080077bc <__retarget_lock_init_recursive>:
 80077bc:	4770      	bx	lr

080077be <__retarget_lock_acquire_recursive>:
 80077be:	4770      	bx	lr

080077c0 <__retarget_lock_release_recursive>:
 80077c0:	4770      	bx	lr

080077c2 <memcpy>:
 80077c2:	440a      	add	r2, r1
 80077c4:	4291      	cmp	r1, r2
 80077c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ca:	d100      	bne.n	80077ce <memcpy+0xc>
 80077cc:	4770      	bx	lr
 80077ce:	b510      	push	{r4, lr}
 80077d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d8:	4291      	cmp	r1, r2
 80077da:	d1f9      	bne.n	80077d0 <memcpy+0xe>
 80077dc:	bd10      	pop	{r4, pc}
	...

080077e0 <_free_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4605      	mov	r5, r0
 80077e4:	2900      	cmp	r1, #0
 80077e6:	d041      	beq.n	800786c <_free_r+0x8c>
 80077e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ec:	1f0c      	subs	r4, r1, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	18e4      	addlt	r4, r4, r3
 80077f4:	f000 f8e0 	bl	80079b8 <__malloc_lock>
 80077f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007870 <_free_r+0x90>)
 80077fa:	6813      	ldr	r3, [r2, #0]
 80077fc:	b933      	cbnz	r3, 800780c <_free_r+0x2c>
 80077fe:	6063      	str	r3, [r4, #4]
 8007800:	6014      	str	r4, [r2, #0]
 8007802:	4628      	mov	r0, r5
 8007804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007808:	f000 b8dc 	b.w	80079c4 <__malloc_unlock>
 800780c:	42a3      	cmp	r3, r4
 800780e:	d908      	bls.n	8007822 <_free_r+0x42>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	1821      	adds	r1, r4, r0
 8007814:	428b      	cmp	r3, r1
 8007816:	bf01      	itttt	eq
 8007818:	6819      	ldreq	r1, [r3, #0]
 800781a:	685b      	ldreq	r3, [r3, #4]
 800781c:	1809      	addeq	r1, r1, r0
 800781e:	6021      	streq	r1, [r4, #0]
 8007820:	e7ed      	b.n	80077fe <_free_r+0x1e>
 8007822:	461a      	mov	r2, r3
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b10b      	cbz	r3, 800782c <_free_r+0x4c>
 8007828:	42a3      	cmp	r3, r4
 800782a:	d9fa      	bls.n	8007822 <_free_r+0x42>
 800782c:	6811      	ldr	r1, [r2, #0]
 800782e:	1850      	adds	r0, r2, r1
 8007830:	42a0      	cmp	r0, r4
 8007832:	d10b      	bne.n	800784c <_free_r+0x6c>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	4401      	add	r1, r0
 8007838:	1850      	adds	r0, r2, r1
 800783a:	4283      	cmp	r3, r0
 800783c:	6011      	str	r1, [r2, #0]
 800783e:	d1e0      	bne.n	8007802 <_free_r+0x22>
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	6053      	str	r3, [r2, #4]
 8007846:	4408      	add	r0, r1
 8007848:	6010      	str	r0, [r2, #0]
 800784a:	e7da      	b.n	8007802 <_free_r+0x22>
 800784c:	d902      	bls.n	8007854 <_free_r+0x74>
 800784e:	230c      	movs	r3, #12
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	e7d6      	b.n	8007802 <_free_r+0x22>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	1821      	adds	r1, r4, r0
 8007858:	428b      	cmp	r3, r1
 800785a:	bf04      	itt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	6063      	str	r3, [r4, #4]
 8007862:	bf04      	itt	eq
 8007864:	1809      	addeq	r1, r1, r0
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	6054      	str	r4, [r2, #4]
 800786a:	e7ca      	b.n	8007802 <_free_r+0x22>
 800786c:	bd38      	pop	{r3, r4, r5, pc}
 800786e:	bf00      	nop
 8007870:	20004580 	.word	0x20004580

08007874 <sbrk_aligned>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	4e0f      	ldr	r6, [pc, #60]	@ (80078b4 <sbrk_aligned+0x40>)
 8007878:	460c      	mov	r4, r1
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	4605      	mov	r5, r0
 800787e:	b911      	cbnz	r1, 8007886 <sbrk_aligned+0x12>
 8007880:	f000 fe16 	bl	80084b0 <_sbrk_r>
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fe11 	bl	80084b0 <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d103      	bne.n	800789a <sbrk_aligned+0x26>
 8007892:	f04f 34ff 	mov.w	r4, #4294967295
 8007896:	4620      	mov	r0, r4
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0f8      	beq.n	8007896 <sbrk_aligned+0x22>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fe02 	bl	80084b0 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1f2      	bne.n	8007896 <sbrk_aligned+0x22>
 80078b0:	e7ef      	b.n	8007892 <sbrk_aligned+0x1e>
 80078b2:	bf00      	nop
 80078b4:	2000457c 	.word	0x2000457c

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d904      	bls.n	80078de <_malloc_r+0x26>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b4 <_malloc_r+0xfc>
 80078e2:	f000 f869 	bl	80079b8 <__malloc_lock>
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	461c      	mov	r4, r3
 80078ec:	bb44      	cbnz	r4, 8007940 <_malloc_r+0x88>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbf 	bl	8007874 <sbrk_aligned>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	d158      	bne.n	80079ae <_malloc_r+0xf6>
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	4627      	mov	r7, r4
 8007902:	2f00      	cmp	r7, #0
 8007904:	d143      	bne.n	800798e <_malloc_r+0xd6>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d04b      	beq.n	80079a2 <_malloc_r+0xea>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	eb04 0903 	add.w	r9, r4, r3
 8007914:	f000 fdcc 	bl	80084b0 <_sbrk_r>
 8007918:	4581      	cmp	r9, r0
 800791a:	d142      	bne.n	80079a2 <_malloc_r+0xea>
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	1a6d      	subs	r5, r5, r1
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffa6 	bl	8007874 <sbrk_aligned>
 8007928:	3001      	adds	r0, #1
 800792a:	d03a      	beq.n	80079a2 <_malloc_r+0xea>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	442b      	add	r3, r5
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	bb62      	cbnz	r2, 8007994 <_malloc_r+0xdc>
 800793a:	f8c8 7000 	str.w	r7, [r8]
 800793e:	e00f      	b.n	8007960 <_malloc_r+0xa8>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1b52      	subs	r2, r2, r5
 8007944:	d420      	bmi.n	8007988 <_malloc_r+0xd0>
 8007946:	2a0b      	cmp	r2, #11
 8007948:	d917      	bls.n	800797a <_malloc_r+0xc2>
 800794a:	1961      	adds	r1, r4, r5
 800794c:	42a3      	cmp	r3, r4
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	6059      	strne	r1, [r3, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	bf08      	it	eq
 8007958:	f8c8 1000 	streq.w	r1, [r8]
 800795c:	5162      	str	r2, [r4, r5]
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f82f 	bl	80079c4 <__malloc_unlock>
 8007966:	f104 000b 	add.w	r0, r4, #11
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	f020 0007 	bic.w	r0, r0, #7
 8007970:	1ac2      	subs	r2, r0, r3
 8007972:	bf1c      	itt	ne
 8007974:	1a1b      	subne	r3, r3, r0
 8007976:	50a3      	strne	r3, [r4, r2]
 8007978:	e7af      	b.n	80078da <_malloc_r+0x22>
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	42a3      	cmp	r3, r4
 800797e:	bf0c      	ite	eq
 8007980:	f8c8 2000 	streq.w	r2, [r8]
 8007984:	605a      	strne	r2, [r3, #4]
 8007986:	e7eb      	b.n	8007960 <_malloc_r+0xa8>
 8007988:	4623      	mov	r3, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7ae      	b.n	80078ec <_malloc_r+0x34>
 800798e:	463c      	mov	r4, r7
 8007990:	687f      	ldr	r7, [r7, #4]
 8007992:	e7b6      	b.n	8007902 <_malloc_r+0x4a>
 8007994:	461a      	mov	r2, r3
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	d1fb      	bne.n	8007994 <_malloc_r+0xdc>
 800799c:	2300      	movs	r3, #0
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7de      	b.n	8007960 <_malloc_r+0xa8>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f80c 	bl	80079c4 <__malloc_unlock>
 80079ac:	e794      	b.n	80078d8 <_malloc_r+0x20>
 80079ae:	6005      	str	r5, [r0, #0]
 80079b0:	e7d6      	b.n	8007960 <_malloc_r+0xa8>
 80079b2:	bf00      	nop
 80079b4:	20004580 	.word	0x20004580

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff bf00 	b.w	80077be <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20004578 	.word	0x20004578

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff befb 	b.w	80077c0 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20004578 	.word	0x20004578

080079d0 <__ssputs_r>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	688e      	ldr	r6, [r1, #8]
 80079d6:	461f      	mov	r7, r3
 80079d8:	42be      	cmp	r6, r7
 80079da:	680b      	ldr	r3, [r1, #0]
 80079dc:	4682      	mov	sl, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	4690      	mov	r8, r2
 80079e2:	d82d      	bhi.n	8007a40 <__ssputs_r+0x70>
 80079e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079ec:	d026      	beq.n	8007a3c <__ssputs_r+0x6c>
 80079ee:	6965      	ldr	r5, [r4, #20]
 80079f0:	6909      	ldr	r1, [r1, #16]
 80079f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f6:	eba3 0901 	sub.w	r9, r3, r1
 80079fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079fe:	1c7b      	adds	r3, r7, #1
 8007a00:	444b      	add	r3, r9
 8007a02:	106d      	asrs	r5, r5, #1
 8007a04:	429d      	cmp	r5, r3
 8007a06:	bf38      	it	cc
 8007a08:	461d      	movcc	r5, r3
 8007a0a:	0553      	lsls	r3, r2, #21
 8007a0c:	d527      	bpl.n	8007a5e <__ssputs_r+0x8e>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7ff ff52 	bl	80078b8 <_malloc_r>
 8007a14:	4606      	mov	r6, r0
 8007a16:	b360      	cbz	r0, 8007a72 <__ssputs_r+0xa2>
 8007a18:	6921      	ldr	r1, [r4, #16]
 8007a1a:	464a      	mov	r2, r9
 8007a1c:	f7ff fed1 	bl	80077c2 <memcpy>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	6126      	str	r6, [r4, #16]
 8007a2e:	6165      	str	r5, [r4, #20]
 8007a30:	444e      	add	r6, r9
 8007a32:	eba5 0509 	sub.w	r5, r5, r9
 8007a36:	6026      	str	r6, [r4, #0]
 8007a38:	60a5      	str	r5, [r4, #8]
 8007a3a:	463e      	mov	r6, r7
 8007a3c:	42be      	cmp	r6, r7
 8007a3e:	d900      	bls.n	8007a42 <__ssputs_r+0x72>
 8007a40:	463e      	mov	r6, r7
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	4632      	mov	r2, r6
 8007a46:	4641      	mov	r1, r8
 8007a48:	f000 fcf6 	bl	8008438 <memmove>
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	1b9b      	subs	r3, r3, r6
 8007a50:	60a3      	str	r3, [r4, #8]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	4433      	add	r3, r6
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	462a      	mov	r2, r5
 8007a60:	f000 fd36 	bl	80084d0 <_realloc_r>
 8007a64:	4606      	mov	r6, r0
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d1e0      	bne.n	8007a2c <__ssputs_r+0x5c>
 8007a6a:	6921      	ldr	r1, [r4, #16]
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	f7ff feb7 	bl	80077e0 <_free_r>
 8007a72:	230c      	movs	r3, #12
 8007a74:	f8ca 3000 	str.w	r3, [sl]
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	e7e9      	b.n	8007a5a <__ssputs_r+0x8a>
	...

08007a88 <_svfiprintf_r>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	4698      	mov	r8, r3
 8007a8e:	898b      	ldrh	r3, [r1, #12]
 8007a90:	061b      	lsls	r3, r3, #24
 8007a92:	b09d      	sub	sp, #116	@ 0x74
 8007a94:	4607      	mov	r7, r0
 8007a96:	460d      	mov	r5, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	d510      	bpl.n	8007abe <_svfiprintf_r+0x36>
 8007a9c:	690b      	ldr	r3, [r1, #16]
 8007a9e:	b973      	cbnz	r3, 8007abe <_svfiprintf_r+0x36>
 8007aa0:	2140      	movs	r1, #64	@ 0x40
 8007aa2:	f7ff ff09 	bl	80078b8 <_malloc_r>
 8007aa6:	6028      	str	r0, [r5, #0]
 8007aa8:	6128      	str	r0, [r5, #16]
 8007aaa:	b930      	cbnz	r0, 8007aba <_svfiprintf_r+0x32>
 8007aac:	230c      	movs	r3, #12
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b01d      	add	sp, #116	@ 0x74
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	2340      	movs	r3, #64	@ 0x40
 8007abc:	616b      	str	r3, [r5, #20]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007acc:	2330      	movs	r3, #48	@ 0x30
 8007ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c6c <_svfiprintf_r+0x1e4>
 8007ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ad6:	f04f 0901 	mov.w	r9, #1
 8007ada:	4623      	mov	r3, r4
 8007adc:	469a      	mov	sl, r3
 8007ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae2:	b10a      	cbz	r2, 8007ae8 <_svfiprintf_r+0x60>
 8007ae4:	2a25      	cmp	r2, #37	@ 0x25
 8007ae6:	d1f9      	bne.n	8007adc <_svfiprintf_r+0x54>
 8007ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8007aec:	d00b      	beq.n	8007b06 <_svfiprintf_r+0x7e>
 8007aee:	465b      	mov	r3, fp
 8007af0:	4622      	mov	r2, r4
 8007af2:	4629      	mov	r1, r5
 8007af4:	4638      	mov	r0, r7
 8007af6:	f7ff ff6b 	bl	80079d0 <__ssputs_r>
 8007afa:	3001      	adds	r0, #1
 8007afc:	f000 80a7 	beq.w	8007c4e <_svfiprintf_r+0x1c6>
 8007b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b02:	445a      	add	r2, fp
 8007b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b06:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 809f 	beq.w	8007c4e <_svfiprintf_r+0x1c6>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1a:	f10a 0a01 	add.w	sl, sl, #1
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b28:	4654      	mov	r4, sl
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b30:	484e      	ldr	r0, [pc, #312]	@ (8007c6c <_svfiprintf_r+0x1e4>)
 8007b32:	f7f8 fb6d 	bl	8000210 <memchr>
 8007b36:	9a04      	ldr	r2, [sp, #16]
 8007b38:	b9d8      	cbnz	r0, 8007b72 <_svfiprintf_r+0xea>
 8007b3a:	06d0      	lsls	r0, r2, #27
 8007b3c:	bf44      	itt	mi
 8007b3e:	2320      	movmi	r3, #32
 8007b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b44:	0711      	lsls	r1, r2, #28
 8007b46:	bf44      	itt	mi
 8007b48:	232b      	movmi	r3, #43	@ 0x2b
 8007b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b54:	d015      	beq.n	8007b82 <_svfiprintf_r+0xfa>
 8007b56:	9a07      	ldr	r2, [sp, #28]
 8007b58:	4654      	mov	r4, sl
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f04f 0c0a 	mov.w	ip, #10
 8007b60:	4621      	mov	r1, r4
 8007b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b66:	3b30      	subs	r3, #48	@ 0x30
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	d94b      	bls.n	8007c04 <_svfiprintf_r+0x17c>
 8007b6c:	b1b0      	cbz	r0, 8007b9c <_svfiprintf_r+0x114>
 8007b6e:	9207      	str	r2, [sp, #28]
 8007b70:	e014      	b.n	8007b9c <_svfiprintf_r+0x114>
 8007b72:	eba0 0308 	sub.w	r3, r0, r8
 8007b76:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	46a2      	mov	sl, r4
 8007b80:	e7d2      	b.n	8007b28 <_svfiprintf_r+0xa0>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	1d19      	adds	r1, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	9103      	str	r1, [sp, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfbb      	ittet	lt
 8007b8e:	425b      	neglt	r3, r3
 8007b90:	f042 0202 	orrlt.w	r2, r2, #2
 8007b94:	9307      	strge	r3, [sp, #28]
 8007b96:	9307      	strlt	r3, [sp, #28]
 8007b98:	bfb8      	it	lt
 8007b9a:	9204      	strlt	r2, [sp, #16]
 8007b9c:	7823      	ldrb	r3, [r4, #0]
 8007b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ba0:	d10a      	bne.n	8007bb8 <_svfiprintf_r+0x130>
 8007ba2:	7863      	ldrb	r3, [r4, #1]
 8007ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba6:	d132      	bne.n	8007c0e <_svfiprintf_r+0x186>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	1d1a      	adds	r2, r3, #4
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	9203      	str	r2, [sp, #12]
 8007bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bb4:	3402      	adds	r4, #2
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c7c <_svfiprintf_r+0x1f4>
 8007bbc:	7821      	ldrb	r1, [r4, #0]
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	f7f8 fb25 	bl	8000210 <memchr>
 8007bc6:	b138      	cbz	r0, 8007bd8 <_svfiprintf_r+0x150>
 8007bc8:	9b04      	ldr	r3, [sp, #16]
 8007bca:	eba0 000a 	sub.w	r0, r0, sl
 8007bce:	2240      	movs	r2, #64	@ 0x40
 8007bd0:	4082      	lsls	r2, r0
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bdc:	4824      	ldr	r0, [pc, #144]	@ (8007c70 <_svfiprintf_r+0x1e8>)
 8007bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007be2:	2206      	movs	r2, #6
 8007be4:	f7f8 fb14 	bl	8000210 <memchr>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d036      	beq.n	8007c5a <_svfiprintf_r+0x1d2>
 8007bec:	4b21      	ldr	r3, [pc, #132]	@ (8007c74 <_svfiprintf_r+0x1ec>)
 8007bee:	bb1b      	cbnz	r3, 8007c38 <_svfiprintf_r+0x1b0>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	3307      	adds	r3, #7
 8007bf4:	f023 0307 	bic.w	r3, r3, #7
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfe:	4433      	add	r3, r6
 8007c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c02:	e76a      	b.n	8007ada <_svfiprintf_r+0x52>
 8007c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c08:	460c      	mov	r4, r1
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	e7a8      	b.n	8007b60 <_svfiprintf_r+0xd8>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	3401      	adds	r4, #1
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	4619      	mov	r1, r3
 8007c16:	f04f 0c0a 	mov.w	ip, #10
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c20:	3a30      	subs	r2, #48	@ 0x30
 8007c22:	2a09      	cmp	r2, #9
 8007c24:	d903      	bls.n	8007c2e <_svfiprintf_r+0x1a6>
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0c6      	beq.n	8007bb8 <_svfiprintf_r+0x130>
 8007c2a:	9105      	str	r1, [sp, #20]
 8007c2c:	e7c4      	b.n	8007bb8 <_svfiprintf_r+0x130>
 8007c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c32:	4604      	mov	r4, r0
 8007c34:	2301      	movs	r3, #1
 8007c36:	e7f0      	b.n	8007c1a <_svfiprintf_r+0x192>
 8007c38:	ab03      	add	r3, sp, #12
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c78 <_svfiprintf_r+0x1f0>)
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	4638      	mov	r0, r7
 8007c44:	f3af 8000 	nop.w
 8007c48:	1c42      	adds	r2, r0, #1
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	d1d6      	bne.n	8007bfc <_svfiprintf_r+0x174>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	065b      	lsls	r3, r3, #25
 8007c52:	f53f af2d 	bmi.w	8007ab0 <_svfiprintf_r+0x28>
 8007c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c58:	e72c      	b.n	8007ab4 <_svfiprintf_r+0x2c>
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4b05      	ldr	r3, [pc, #20]	@ (8007c78 <_svfiprintf_r+0x1f0>)
 8007c62:	a904      	add	r1, sp, #16
 8007c64:	4638      	mov	r0, r7
 8007c66:	f000 f9bb 	bl	8007fe0 <_printf_i>
 8007c6a:	e7ed      	b.n	8007c48 <_svfiprintf_r+0x1c0>
 8007c6c:	08008a85 	.word	0x08008a85
 8007c70:	08008a8f 	.word	0x08008a8f
 8007c74:	00000000 	.word	0x00000000
 8007c78:	080079d1 	.word	0x080079d1
 8007c7c:	08008a8b 	.word	0x08008a8b

08007c80 <__sfputc_r>:
 8007c80:	6893      	ldr	r3, [r2, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	b410      	push	{r4}
 8007c88:	6093      	str	r3, [r2, #8]
 8007c8a:	da08      	bge.n	8007c9e <__sfputc_r+0x1e>
 8007c8c:	6994      	ldr	r4, [r2, #24]
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	db01      	blt.n	8007c96 <__sfputc_r+0x16>
 8007c92:	290a      	cmp	r1, #10
 8007c94:	d103      	bne.n	8007c9e <__sfputc_r+0x1e>
 8007c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c9a:	f7ff bc82 	b.w	80075a2 <__swbuf_r>
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	1c58      	adds	r0, r3, #1
 8007ca2:	6010      	str	r0, [r2, #0]
 8007ca4:	7019      	strb	r1, [r3, #0]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <__sfputs_r>:
 8007cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	18d5      	adds	r5, r2, r3
 8007cb8:	42ac      	cmp	r4, r5
 8007cba:	d101      	bne.n	8007cc0 <__sfputs_r+0x12>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e007      	b.n	8007cd0 <__sfputs_r+0x22>
 8007cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ffda 	bl	8007c80 <__sfputc_r>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d1f3      	bne.n	8007cb8 <__sfputs_r+0xa>
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cd4 <_vfiprintf_r>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	460d      	mov	r5, r1
 8007cda:	b09d      	sub	sp, #116	@ 0x74
 8007cdc:	4614      	mov	r4, r2
 8007cde:	4698      	mov	r8, r3
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	b118      	cbz	r0, 8007cec <_vfiprintf_r+0x18>
 8007ce4:	6a03      	ldr	r3, [r0, #32]
 8007ce6:	b90b      	cbnz	r3, 8007cec <_vfiprintf_r+0x18>
 8007ce8:	f7ff fb3c 	bl	8007364 <__sinit>
 8007cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cee:	07d9      	lsls	r1, r3, #31
 8007cf0:	d405      	bmi.n	8007cfe <_vfiprintf_r+0x2a>
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	059a      	lsls	r2, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_vfiprintf_r+0x2a>
 8007cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cfa:	f7ff fd60 	bl	80077be <__retarget_lock_acquire_recursive>
 8007cfe:	89ab      	ldrh	r3, [r5, #12]
 8007d00:	071b      	lsls	r3, r3, #28
 8007d02:	d501      	bpl.n	8007d08 <_vfiprintf_r+0x34>
 8007d04:	692b      	ldr	r3, [r5, #16]
 8007d06:	b99b      	cbnz	r3, 8007d30 <_vfiprintf_r+0x5c>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff fc88 	bl	8007620 <__swsetup_r>
 8007d10:	b170      	cbz	r0, 8007d30 <_vfiprintf_r+0x5c>
 8007d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d14:	07dc      	lsls	r4, r3, #31
 8007d16:	d504      	bpl.n	8007d22 <_vfiprintf_r+0x4e>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	b01d      	add	sp, #116	@ 0x74
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	0598      	lsls	r0, r3, #22
 8007d26:	d4f7      	bmi.n	8007d18 <_vfiprintf_r+0x44>
 8007d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d2a:	f7ff fd49 	bl	80077c0 <__retarget_lock_release_recursive>
 8007d2e:	e7f3      	b.n	8007d18 <_vfiprintf_r+0x44>
 8007d30:	2300      	movs	r3, #0
 8007d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d34:	2320      	movs	r3, #32
 8007d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d3e:	2330      	movs	r3, #48	@ 0x30
 8007d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ef0 <_vfiprintf_r+0x21c>
 8007d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d48:	f04f 0901 	mov.w	r9, #1
 8007d4c:	4623      	mov	r3, r4
 8007d4e:	469a      	mov	sl, r3
 8007d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d54:	b10a      	cbz	r2, 8007d5a <_vfiprintf_r+0x86>
 8007d56:	2a25      	cmp	r2, #37	@ 0x25
 8007d58:	d1f9      	bne.n	8007d4e <_vfiprintf_r+0x7a>
 8007d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d5e:	d00b      	beq.n	8007d78 <_vfiprintf_r+0xa4>
 8007d60:	465b      	mov	r3, fp
 8007d62:	4622      	mov	r2, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7ff ffa1 	bl	8007cae <__sfputs_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	f000 80a7 	beq.w	8007ec0 <_vfiprintf_r+0x1ec>
 8007d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d74:	445a      	add	r2, fp
 8007d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d78:	f89a 3000 	ldrb.w	r3, [sl]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 809f 	beq.w	8007ec0 <_vfiprintf_r+0x1ec>
 8007d82:	2300      	movs	r3, #0
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295
 8007d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d8c:	f10a 0a01 	add.w	sl, sl, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d9a:	4654      	mov	r4, sl
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da2:	4853      	ldr	r0, [pc, #332]	@ (8007ef0 <_vfiprintf_r+0x21c>)
 8007da4:	f7f8 fa34 	bl	8000210 <memchr>
 8007da8:	9a04      	ldr	r2, [sp, #16]
 8007daa:	b9d8      	cbnz	r0, 8007de4 <_vfiprintf_r+0x110>
 8007dac:	06d1      	lsls	r1, r2, #27
 8007dae:	bf44      	itt	mi
 8007db0:	2320      	movmi	r3, #32
 8007db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007db6:	0713      	lsls	r3, r2, #28
 8007db8:	bf44      	itt	mi
 8007dba:	232b      	movmi	r3, #43	@ 0x2b
 8007dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dc6:	d015      	beq.n	8007df4 <_vfiprintf_r+0x120>
 8007dc8:	9a07      	ldr	r2, [sp, #28]
 8007dca:	4654      	mov	r4, sl
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f04f 0c0a 	mov.w	ip, #10
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd8:	3b30      	subs	r3, #48	@ 0x30
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d94b      	bls.n	8007e76 <_vfiprintf_r+0x1a2>
 8007dde:	b1b0      	cbz	r0, 8007e0e <_vfiprintf_r+0x13a>
 8007de0:	9207      	str	r2, [sp, #28]
 8007de2:	e014      	b.n	8007e0e <_vfiprintf_r+0x13a>
 8007de4:	eba0 0308 	sub.w	r3, r0, r8
 8007de8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	46a2      	mov	sl, r4
 8007df2:	e7d2      	b.n	8007d9a <_vfiprintf_r+0xc6>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	1d19      	adds	r1, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	9103      	str	r1, [sp, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbb      	ittet	lt
 8007e00:	425b      	neglt	r3, r3
 8007e02:	f042 0202 	orrlt.w	r2, r2, #2
 8007e06:	9307      	strge	r3, [sp, #28]
 8007e08:	9307      	strlt	r3, [sp, #28]
 8007e0a:	bfb8      	it	lt
 8007e0c:	9204      	strlt	r2, [sp, #16]
 8007e0e:	7823      	ldrb	r3, [r4, #0]
 8007e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e12:	d10a      	bne.n	8007e2a <_vfiprintf_r+0x156>
 8007e14:	7863      	ldrb	r3, [r4, #1]
 8007e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e18:	d132      	bne.n	8007e80 <_vfiprintf_r+0x1ac>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d1a      	adds	r2, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9203      	str	r2, [sp, #12]
 8007e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e26:	3402      	adds	r4, #2
 8007e28:	9305      	str	r3, [sp, #20]
 8007e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f00 <_vfiprintf_r+0x22c>
 8007e2e:	7821      	ldrb	r1, [r4, #0]
 8007e30:	2203      	movs	r2, #3
 8007e32:	4650      	mov	r0, sl
 8007e34:	f7f8 f9ec 	bl	8000210 <memchr>
 8007e38:	b138      	cbz	r0, 8007e4a <_vfiprintf_r+0x176>
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	eba0 000a 	sub.w	r0, r0, sl
 8007e40:	2240      	movs	r2, #64	@ 0x40
 8007e42:	4082      	lsls	r2, r0
 8007e44:	4313      	orrs	r3, r2
 8007e46:	3401      	adds	r4, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4829      	ldr	r0, [pc, #164]	@ (8007ef4 <_vfiprintf_r+0x220>)
 8007e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e54:	2206      	movs	r2, #6
 8007e56:	f7f8 f9db 	bl	8000210 <memchr>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d03f      	beq.n	8007ede <_vfiprintf_r+0x20a>
 8007e5e:	4b26      	ldr	r3, [pc, #152]	@ (8007ef8 <_vfiprintf_r+0x224>)
 8007e60:	bb1b      	cbnz	r3, 8007eaa <_vfiprintf_r+0x1d6>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e70:	443b      	add	r3, r7
 8007e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e74:	e76a      	b.n	8007d4c <_vfiprintf_r+0x78>
 8007e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	e7a8      	b.n	8007dd2 <_vfiprintf_r+0xfe>
 8007e80:	2300      	movs	r3, #0
 8007e82:	3401      	adds	r4, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	4619      	mov	r1, r3
 8007e88:	f04f 0c0a 	mov.w	ip, #10
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e92:	3a30      	subs	r2, #48	@ 0x30
 8007e94:	2a09      	cmp	r2, #9
 8007e96:	d903      	bls.n	8007ea0 <_vfiprintf_r+0x1cc>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0c6      	beq.n	8007e2a <_vfiprintf_r+0x156>
 8007e9c:	9105      	str	r1, [sp, #20]
 8007e9e:	e7c4      	b.n	8007e2a <_vfiprintf_r+0x156>
 8007ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7f0      	b.n	8007e8c <_vfiprintf_r+0x1b8>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4b12      	ldr	r3, [pc, #72]	@ (8007efc <_vfiprintf_r+0x228>)
 8007eb2:	a904      	add	r1, sp, #16
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f3af 8000 	nop.w
 8007eba:	4607      	mov	r7, r0
 8007ebc:	1c78      	adds	r0, r7, #1
 8007ebe:	d1d6      	bne.n	8007e6e <_vfiprintf_r+0x19a>
 8007ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ec2:	07d9      	lsls	r1, r3, #31
 8007ec4:	d405      	bmi.n	8007ed2 <_vfiprintf_r+0x1fe>
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	059a      	lsls	r2, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <_vfiprintf_r+0x1fe>
 8007ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ece:	f7ff fc77 	bl	80077c0 <__retarget_lock_release_recursive>
 8007ed2:	89ab      	ldrh	r3, [r5, #12]
 8007ed4:	065b      	lsls	r3, r3, #25
 8007ed6:	f53f af1f 	bmi.w	8007d18 <_vfiprintf_r+0x44>
 8007eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007edc:	e71e      	b.n	8007d1c <_vfiprintf_r+0x48>
 8007ede:	ab03      	add	r3, sp, #12
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4b05      	ldr	r3, [pc, #20]	@ (8007efc <_vfiprintf_r+0x228>)
 8007ee6:	a904      	add	r1, sp, #16
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 f879 	bl	8007fe0 <_printf_i>
 8007eee:	e7e4      	b.n	8007eba <_vfiprintf_r+0x1e6>
 8007ef0:	08008a85 	.word	0x08008a85
 8007ef4:	08008a8f 	.word	0x08008a8f
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	08007caf 	.word	0x08007caf
 8007f00:	08008a8b 	.word	0x08008a8b

08007f04 <_printf_common>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	4616      	mov	r6, r2
 8007f0a:	4698      	mov	r8, r3
 8007f0c:	688a      	ldr	r2, [r1, #8]
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bfb8      	it	lt
 8007f18:	4613      	movlt	r3, r2
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f20:	4607      	mov	r7, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b10a      	cbz	r2, 8007f2a <_printf_common+0x26>
 8007f26:	3301      	adds	r3, #1
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	0699      	lsls	r1, r3, #26
 8007f2e:	bf42      	ittt	mi
 8007f30:	6833      	ldrmi	r3, [r6, #0]
 8007f32:	3302      	addmi	r3, #2
 8007f34:	6033      	strmi	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	f015 0506 	ands.w	r5, r5, #6
 8007f3c:	d106      	bne.n	8007f4c <_printf_common+0x48>
 8007f3e:	f104 0a19 	add.w	sl, r4, #25
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	6832      	ldr	r2, [r6, #0]
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	dc26      	bgt.n	8007f9a <_printf_common+0x96>
 8007f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	3b00      	subs	r3, #0
 8007f54:	bf18      	it	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	0692      	lsls	r2, r2, #26
 8007f5a:	d42b      	bmi.n	8007fb4 <_printf_common+0xb0>
 8007f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f60:	4641      	mov	r1, r8
 8007f62:	4638      	mov	r0, r7
 8007f64:	47c8      	blx	r9
 8007f66:	3001      	adds	r0, #1
 8007f68:	d01e      	beq.n	8007fa8 <_printf_common+0xa4>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	6922      	ldr	r2, [r4, #16]
 8007f6e:	f003 0306 	and.w	r3, r3, #6
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	bf02      	ittt	eq
 8007f76:	68e5      	ldreq	r5, [r4, #12]
 8007f78:	6833      	ldreq	r3, [r6, #0]
 8007f7a:	1aed      	subeq	r5, r5, r3
 8007f7c:	68a3      	ldr	r3, [r4, #8]
 8007f7e:	bf0c      	ite	eq
 8007f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f84:	2500      	movne	r5, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfc4      	itt	gt
 8007f8a:	1a9b      	subgt	r3, r3, r2
 8007f8c:	18ed      	addgt	r5, r5, r3
 8007f8e:	2600      	movs	r6, #0
 8007f90:	341a      	adds	r4, #26
 8007f92:	42b5      	cmp	r5, r6
 8007f94:	d11a      	bne.n	8007fcc <_printf_common+0xc8>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e008      	b.n	8007fac <_printf_common+0xa8>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	47c8      	blx	r9
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d103      	bne.n	8007fb0 <_printf_common+0xac>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	e7c6      	b.n	8007f42 <_printf_common+0x3e>
 8007fb4:	18e1      	adds	r1, r4, r3
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	2030      	movs	r0, #48	@ 0x30
 8007fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fbe:	4422      	add	r2, r4
 8007fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fc8:	3302      	adds	r3, #2
 8007fca:	e7c7      	b.n	8007f5c <_printf_common+0x58>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	47c8      	blx	r9
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d0e6      	beq.n	8007fa8 <_printf_common+0xa4>
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7d9      	b.n	8007f92 <_printf_common+0x8e>
	...

08007fe0 <_printf_i>:
 8007fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	7e0f      	ldrb	r7, [r1, #24]
 8007fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fe8:	2f78      	cmp	r7, #120	@ 0x78
 8007fea:	4691      	mov	r9, r2
 8007fec:	4680      	mov	r8, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	469a      	mov	sl, r3
 8007ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ff6:	d807      	bhi.n	8008008 <_printf_i+0x28>
 8007ff8:	2f62      	cmp	r7, #98	@ 0x62
 8007ffa:	d80a      	bhi.n	8008012 <_printf_i+0x32>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	f000 80d1 	beq.w	80081a4 <_printf_i+0x1c4>
 8008002:	2f58      	cmp	r7, #88	@ 0x58
 8008004:	f000 80b8 	beq.w	8008178 <_printf_i+0x198>
 8008008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800800c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008010:	e03a      	b.n	8008088 <_printf_i+0xa8>
 8008012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008016:	2b15      	cmp	r3, #21
 8008018:	d8f6      	bhi.n	8008008 <_printf_i+0x28>
 800801a:	a101      	add	r1, pc, #4	@ (adr r1, 8008020 <_printf_i+0x40>)
 800801c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008020:	08008079 	.word	0x08008079
 8008024:	0800808d 	.word	0x0800808d
 8008028:	08008009 	.word	0x08008009
 800802c:	08008009 	.word	0x08008009
 8008030:	08008009 	.word	0x08008009
 8008034:	08008009 	.word	0x08008009
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008009 	.word	0x08008009
 8008040:	08008009 	.word	0x08008009
 8008044:	08008009 	.word	0x08008009
 8008048:	08008009 	.word	0x08008009
 800804c:	0800818b 	.word	0x0800818b
 8008050:	080080b7 	.word	0x080080b7
 8008054:	08008145 	.word	0x08008145
 8008058:	08008009 	.word	0x08008009
 800805c:	08008009 	.word	0x08008009
 8008060:	080081ad 	.word	0x080081ad
 8008064:	08008009 	.word	0x08008009
 8008068:	080080b7 	.word	0x080080b7
 800806c:	08008009 	.word	0x08008009
 8008070:	08008009 	.word	0x08008009
 8008074:	0800814d 	.word	0x0800814d
 8008078:	6833      	ldr	r3, [r6, #0]
 800807a:	1d1a      	adds	r2, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6032      	str	r2, [r6, #0]
 8008080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008088:	2301      	movs	r3, #1
 800808a:	e09c      	b.n	80081c6 <_printf_i+0x1e6>
 800808c:	6833      	ldr	r3, [r6, #0]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	1d19      	adds	r1, r3, #4
 8008092:	6031      	str	r1, [r6, #0]
 8008094:	0606      	lsls	r6, r0, #24
 8008096:	d501      	bpl.n	800809c <_printf_i+0xbc>
 8008098:	681d      	ldr	r5, [r3, #0]
 800809a:	e003      	b.n	80080a4 <_printf_i+0xc4>
 800809c:	0645      	lsls	r5, r0, #25
 800809e:	d5fb      	bpl.n	8008098 <_printf_i+0xb8>
 80080a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	da03      	bge.n	80080b0 <_printf_i+0xd0>
 80080a8:	232d      	movs	r3, #45	@ 0x2d
 80080aa:	426d      	negs	r5, r5
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080b0:	4858      	ldr	r0, [pc, #352]	@ (8008214 <_printf_i+0x234>)
 80080b2:	230a      	movs	r3, #10
 80080b4:	e011      	b.n	80080da <_printf_i+0xfa>
 80080b6:	6821      	ldr	r1, [r4, #0]
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	0608      	lsls	r0, r1, #24
 80080bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80080c0:	d402      	bmi.n	80080c8 <_printf_i+0xe8>
 80080c2:	0649      	lsls	r1, r1, #25
 80080c4:	bf48      	it	mi
 80080c6:	b2ad      	uxthmi	r5, r5
 80080c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080ca:	4852      	ldr	r0, [pc, #328]	@ (8008214 <_printf_i+0x234>)
 80080cc:	6033      	str	r3, [r6, #0]
 80080ce:	bf14      	ite	ne
 80080d0:	230a      	movne	r3, #10
 80080d2:	2308      	moveq	r3, #8
 80080d4:	2100      	movs	r1, #0
 80080d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080da:	6866      	ldr	r6, [r4, #4]
 80080dc:	60a6      	str	r6, [r4, #8]
 80080de:	2e00      	cmp	r6, #0
 80080e0:	db05      	blt.n	80080ee <_printf_i+0x10e>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	432e      	orrs	r6, r5
 80080e6:	f021 0104 	bic.w	r1, r1, #4
 80080ea:	6021      	str	r1, [r4, #0]
 80080ec:	d04b      	beq.n	8008186 <_printf_i+0x1a6>
 80080ee:	4616      	mov	r6, r2
 80080f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80080f4:	fb03 5711 	mls	r7, r3, r1, r5
 80080f8:	5dc7      	ldrb	r7, [r0, r7]
 80080fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080fe:	462f      	mov	r7, r5
 8008100:	42bb      	cmp	r3, r7
 8008102:	460d      	mov	r5, r1
 8008104:	d9f4      	bls.n	80080f0 <_printf_i+0x110>
 8008106:	2b08      	cmp	r3, #8
 8008108:	d10b      	bne.n	8008122 <_printf_i+0x142>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	07df      	lsls	r7, r3, #31
 800810e:	d508      	bpl.n	8008122 <_printf_i+0x142>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	6861      	ldr	r1, [r4, #4]
 8008114:	4299      	cmp	r1, r3
 8008116:	bfde      	ittt	le
 8008118:	2330      	movle	r3, #48	@ 0x30
 800811a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800811e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008122:	1b92      	subs	r2, r2, r6
 8008124:	6122      	str	r2, [r4, #16]
 8008126:	f8cd a000 	str.w	sl, [sp]
 800812a:	464b      	mov	r3, r9
 800812c:	aa03      	add	r2, sp, #12
 800812e:	4621      	mov	r1, r4
 8008130:	4640      	mov	r0, r8
 8008132:	f7ff fee7 	bl	8007f04 <_printf_common>
 8008136:	3001      	adds	r0, #1
 8008138:	d14a      	bne.n	80081d0 <_printf_i+0x1f0>
 800813a:	f04f 30ff 	mov.w	r0, #4294967295
 800813e:	b004      	add	sp, #16
 8008140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	f043 0320 	orr.w	r3, r3, #32
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	4832      	ldr	r0, [pc, #200]	@ (8008218 <_printf_i+0x238>)
 800814e:	2778      	movs	r7, #120	@ 0x78
 8008150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	6831      	ldr	r1, [r6, #0]
 8008158:	061f      	lsls	r7, r3, #24
 800815a:	f851 5b04 	ldr.w	r5, [r1], #4
 800815e:	d402      	bmi.n	8008166 <_printf_i+0x186>
 8008160:	065f      	lsls	r7, r3, #25
 8008162:	bf48      	it	mi
 8008164:	b2ad      	uxthmi	r5, r5
 8008166:	6031      	str	r1, [r6, #0]
 8008168:	07d9      	lsls	r1, r3, #31
 800816a:	bf44      	itt	mi
 800816c:	f043 0320 	orrmi.w	r3, r3, #32
 8008170:	6023      	strmi	r3, [r4, #0]
 8008172:	b11d      	cbz	r5, 800817c <_printf_i+0x19c>
 8008174:	2310      	movs	r3, #16
 8008176:	e7ad      	b.n	80080d4 <_printf_i+0xf4>
 8008178:	4826      	ldr	r0, [pc, #152]	@ (8008214 <_printf_i+0x234>)
 800817a:	e7e9      	b.n	8008150 <_printf_i+0x170>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	e7f6      	b.n	8008174 <_printf_i+0x194>
 8008186:	4616      	mov	r6, r2
 8008188:	e7bd      	b.n	8008106 <_printf_i+0x126>
 800818a:	6833      	ldr	r3, [r6, #0]
 800818c:	6825      	ldr	r5, [r4, #0]
 800818e:	6961      	ldr	r1, [r4, #20]
 8008190:	1d18      	adds	r0, r3, #4
 8008192:	6030      	str	r0, [r6, #0]
 8008194:	062e      	lsls	r6, r5, #24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	d501      	bpl.n	800819e <_printf_i+0x1be>
 800819a:	6019      	str	r1, [r3, #0]
 800819c:	e002      	b.n	80081a4 <_printf_i+0x1c4>
 800819e:	0668      	lsls	r0, r5, #25
 80081a0:	d5fb      	bpl.n	800819a <_printf_i+0x1ba>
 80081a2:	8019      	strh	r1, [r3, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	4616      	mov	r6, r2
 80081aa:	e7bc      	b.n	8008126 <_printf_i+0x146>
 80081ac:	6833      	ldr	r3, [r6, #0]
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	6032      	str	r2, [r6, #0]
 80081b2:	681e      	ldr	r6, [r3, #0]
 80081b4:	6862      	ldr	r2, [r4, #4]
 80081b6:	2100      	movs	r1, #0
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7f8 f829 	bl	8000210 <memchr>
 80081be:	b108      	cbz	r0, 80081c4 <_printf_i+0x1e4>
 80081c0:	1b80      	subs	r0, r0, r6
 80081c2:	6060      	str	r0, [r4, #4]
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	2300      	movs	r3, #0
 80081ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081ce:	e7aa      	b.n	8008126 <_printf_i+0x146>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	4632      	mov	r2, r6
 80081d4:	4649      	mov	r1, r9
 80081d6:	4640      	mov	r0, r8
 80081d8:	47d0      	blx	sl
 80081da:	3001      	adds	r0, #1
 80081dc:	d0ad      	beq.n	800813a <_printf_i+0x15a>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	079b      	lsls	r3, r3, #30
 80081e2:	d413      	bmi.n	800820c <_printf_i+0x22c>
 80081e4:	68e0      	ldr	r0, [r4, #12]
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	4298      	cmp	r0, r3
 80081ea:	bfb8      	it	lt
 80081ec:	4618      	movlt	r0, r3
 80081ee:	e7a6      	b.n	800813e <_printf_i+0x15e>
 80081f0:	2301      	movs	r3, #1
 80081f2:	4632      	mov	r2, r6
 80081f4:	4649      	mov	r1, r9
 80081f6:	4640      	mov	r0, r8
 80081f8:	47d0      	blx	sl
 80081fa:	3001      	adds	r0, #1
 80081fc:	d09d      	beq.n	800813a <_printf_i+0x15a>
 80081fe:	3501      	adds	r5, #1
 8008200:	68e3      	ldr	r3, [r4, #12]
 8008202:	9903      	ldr	r1, [sp, #12]
 8008204:	1a5b      	subs	r3, r3, r1
 8008206:	42ab      	cmp	r3, r5
 8008208:	dcf2      	bgt.n	80081f0 <_printf_i+0x210>
 800820a:	e7eb      	b.n	80081e4 <_printf_i+0x204>
 800820c:	2500      	movs	r5, #0
 800820e:	f104 0619 	add.w	r6, r4, #25
 8008212:	e7f5      	b.n	8008200 <_printf_i+0x220>
 8008214:	08008a96 	.word	0x08008a96
 8008218:	08008aa7 	.word	0x08008aa7

0800821c <__sflush_r>:
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	0716      	lsls	r6, r2, #28
 8008226:	4605      	mov	r5, r0
 8008228:	460c      	mov	r4, r1
 800822a:	d454      	bmi.n	80082d6 <__sflush_r+0xba>
 800822c:	684b      	ldr	r3, [r1, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc02      	bgt.n	8008238 <__sflush_r+0x1c>
 8008232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd48      	ble.n	80082ca <__sflush_r+0xae>
 8008238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800823a:	2e00      	cmp	r6, #0
 800823c:	d045      	beq.n	80082ca <__sflush_r+0xae>
 800823e:	2300      	movs	r3, #0
 8008240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008244:	682f      	ldr	r7, [r5, #0]
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	d030      	beq.n	80082ae <__sflush_r+0x92>
 800824c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	0759      	lsls	r1, r3, #29
 8008252:	d505      	bpl.n	8008260 <__sflush_r+0x44>
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800825a:	b10b      	cbz	r3, 8008260 <__sflush_r+0x44>
 800825c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	2300      	movs	r3, #0
 8008262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	4628      	mov	r0, r5
 8008268:	47b0      	blx	r6
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	d106      	bne.n	800827e <__sflush_r+0x62>
 8008270:	6829      	ldr	r1, [r5, #0]
 8008272:	291d      	cmp	r1, #29
 8008274:	d82b      	bhi.n	80082ce <__sflush_r+0xb2>
 8008276:	4a2a      	ldr	r2, [pc, #168]	@ (8008320 <__sflush_r+0x104>)
 8008278:	40ca      	lsrs	r2, r1
 800827a:	07d6      	lsls	r6, r2, #31
 800827c:	d527      	bpl.n	80082ce <__sflush_r+0xb2>
 800827e:	2200      	movs	r2, #0
 8008280:	6062      	str	r2, [r4, #4]
 8008282:	04d9      	lsls	r1, r3, #19
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	d504      	bpl.n	8008294 <__sflush_r+0x78>
 800828a:	1c42      	adds	r2, r0, #1
 800828c:	d101      	bne.n	8008292 <__sflush_r+0x76>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b903      	cbnz	r3, 8008294 <__sflush_r+0x78>
 8008292:	6560      	str	r0, [r4, #84]	@ 0x54
 8008294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008296:	602f      	str	r7, [r5, #0]
 8008298:	b1b9      	cbz	r1, 80082ca <__sflush_r+0xae>
 800829a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800829e:	4299      	cmp	r1, r3
 80082a0:	d002      	beq.n	80082a8 <__sflush_r+0x8c>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff fa9c 	bl	80077e0 <_free_r>
 80082a8:	2300      	movs	r3, #0
 80082aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ac:	e00d      	b.n	80082ca <__sflush_r+0xae>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b0      	blx	r6
 80082b4:	4602      	mov	r2, r0
 80082b6:	1c50      	adds	r0, r2, #1
 80082b8:	d1c9      	bne.n	800824e <__sflush_r+0x32>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c6      	beq.n	800824e <__sflush_r+0x32>
 80082c0:	2b1d      	cmp	r3, #29
 80082c2:	d001      	beq.n	80082c8 <__sflush_r+0xac>
 80082c4:	2b16      	cmp	r3, #22
 80082c6:	d11e      	bne.n	8008306 <__sflush_r+0xea>
 80082c8:	602f      	str	r7, [r5, #0]
 80082ca:	2000      	movs	r0, #0
 80082cc:	e022      	b.n	8008314 <__sflush_r+0xf8>
 80082ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d2:	b21b      	sxth	r3, r3
 80082d4:	e01b      	b.n	800830e <__sflush_r+0xf2>
 80082d6:	690f      	ldr	r7, [r1, #16]
 80082d8:	2f00      	cmp	r7, #0
 80082da:	d0f6      	beq.n	80082ca <__sflush_r+0xae>
 80082dc:	0793      	lsls	r3, r2, #30
 80082de:	680e      	ldr	r6, [r1, #0]
 80082e0:	bf08      	it	eq
 80082e2:	694b      	ldreq	r3, [r1, #20]
 80082e4:	600f      	str	r7, [r1, #0]
 80082e6:	bf18      	it	ne
 80082e8:	2300      	movne	r3, #0
 80082ea:	eba6 0807 	sub.w	r8, r6, r7
 80082ee:	608b      	str	r3, [r1, #8]
 80082f0:	f1b8 0f00 	cmp.w	r8, #0
 80082f4:	dde9      	ble.n	80082ca <__sflush_r+0xae>
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082fa:	4643      	mov	r3, r8
 80082fc:	463a      	mov	r2, r7
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	2800      	cmp	r0, #0
 8008304:	dc08      	bgt.n	8008318 <__sflush_r+0xfc>
 8008306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	4407      	add	r7, r0
 800831a:	eba8 0800 	sub.w	r8, r8, r0
 800831e:	e7e7      	b.n	80082f0 <__sflush_r+0xd4>
 8008320:	20400001 	.word	0x20400001

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b913      	cbnz	r3, 8008334 <_fflush_r+0x10>
 800832e:	2500      	movs	r5, #0
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	b118      	cbz	r0, 800833e <_fflush_r+0x1a>
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	b90b      	cbnz	r3, 800833e <_fflush_r+0x1a>
 800833a:	f7ff f813 	bl	8007364 <__sinit>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f3      	beq.n	800832e <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x32>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x32>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f7ff fa34 	bl	80077be <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff5f 	bl	800821c <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e4      	bmi.n	8008330 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4e1      	bmi.n	8008330 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800836e:	f7ff fa27 	bl	80077c0 <__retarget_lock_release_recursive>
 8008372:	e7dd      	b.n	8008330 <_fflush_r+0xc>

08008374 <__swhatbuf_r>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	460c      	mov	r4, r1
 8008378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837c:	2900      	cmp	r1, #0
 800837e:	b096      	sub	sp, #88	@ 0x58
 8008380:	4615      	mov	r5, r2
 8008382:	461e      	mov	r6, r3
 8008384:	da0d      	bge.n	80083a2 <__swhatbuf_r+0x2e>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	bf14      	ite	ne
 8008392:	2340      	movne	r3, #64	@ 0x40
 8008394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008398:	2000      	movs	r0, #0
 800839a:	6031      	str	r1, [r6, #0]
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	b016      	add	sp, #88	@ 0x58
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	466a      	mov	r2, sp
 80083a4:	f000 f862 	bl	800846c <_fstat_r>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dbec      	blt.n	8008386 <__swhatbuf_r+0x12>
 80083ac:	9901      	ldr	r1, [sp, #4]
 80083ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083b6:	4259      	negs	r1, r3
 80083b8:	4159      	adcs	r1, r3
 80083ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083be:	e7eb      	b.n	8008398 <__swhatbuf_r+0x24>

080083c0 <__smakebuf_r>:
 80083c0:	898b      	ldrh	r3, [r1, #12]
 80083c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083c4:	079d      	lsls	r5, r3, #30
 80083c6:	4606      	mov	r6, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	d507      	bpl.n	80083dc <__smakebuf_r+0x1c>
 80083cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	2301      	movs	r3, #1
 80083d6:	6163      	str	r3, [r4, #20]
 80083d8:	b003      	add	sp, #12
 80083da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083dc:	ab01      	add	r3, sp, #4
 80083de:	466a      	mov	r2, sp
 80083e0:	f7ff ffc8 	bl	8008374 <__swhatbuf_r>
 80083e4:	9f00      	ldr	r7, [sp, #0]
 80083e6:	4605      	mov	r5, r0
 80083e8:	4639      	mov	r1, r7
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff fa64 	bl	80078b8 <_malloc_r>
 80083f0:	b948      	cbnz	r0, 8008406 <__smakebuf_r+0x46>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	059a      	lsls	r2, r3, #22
 80083f8:	d4ee      	bmi.n	80083d8 <__smakebuf_r+0x18>
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	f043 0302 	orr.w	r3, r3, #2
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	e7e2      	b.n	80083cc <__smakebuf_r+0xc>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	6020      	str	r0, [r4, #0]
 800840a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008416:	b15b      	cbz	r3, 8008430 <__smakebuf_r+0x70>
 8008418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841c:	4630      	mov	r0, r6
 800841e:	f000 f837 	bl	8008490 <_isatty_r>
 8008422:	b128      	cbz	r0, 8008430 <__smakebuf_r+0x70>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	431d      	orrs	r5, r3
 8008434:	81a5      	strh	r5, [r4, #12]
 8008436:	e7cf      	b.n	80083d8 <__smakebuf_r+0x18>

08008438 <memmove>:
 8008438:	4288      	cmp	r0, r1
 800843a:	b510      	push	{r4, lr}
 800843c:	eb01 0402 	add.w	r4, r1, r2
 8008440:	d902      	bls.n	8008448 <memmove+0x10>
 8008442:	4284      	cmp	r4, r0
 8008444:	4623      	mov	r3, r4
 8008446:	d807      	bhi.n	8008458 <memmove+0x20>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	42a1      	cmp	r1, r4
 800844c:	d008      	beq.n	8008460 <memmove+0x28>
 800844e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008456:	e7f8      	b.n	800844a <memmove+0x12>
 8008458:	4402      	add	r2, r0
 800845a:	4601      	mov	r1, r0
 800845c:	428a      	cmp	r2, r1
 800845e:	d100      	bne.n	8008462 <memmove+0x2a>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800846a:	e7f7      	b.n	800845c <memmove+0x24>

0800846c <_fstat_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	@ (800848c <_fstat_r+0x20>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f9 fa88 	bl	800198e <_fstat>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_fstat_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_fstat_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20004574 	.word	0x20004574

08008490 <_isatty_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d06      	ldr	r5, [pc, #24]	@ (80084ac <_isatty_r+0x1c>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f9 fa87 	bl	80019ae <_isatty>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_isatty_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_isatty_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20004574 	.word	0x20004574

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d06      	ldr	r5, [pc, #24]	@ (80084cc <_sbrk_r+0x1c>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7f9 fa90 	bl	80019e0 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_sbrk_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_sbrk_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	20004574 	.word	0x20004574

080084d0 <_realloc_r>:
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	4607      	mov	r7, r0
 80084d6:	4614      	mov	r4, r2
 80084d8:	460d      	mov	r5, r1
 80084da:	b921      	cbnz	r1, 80084e6 <_realloc_r+0x16>
 80084dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e0:	4611      	mov	r1, r2
 80084e2:	f7ff b9e9 	b.w	80078b8 <_malloc_r>
 80084e6:	b92a      	cbnz	r2, 80084f4 <_realloc_r+0x24>
 80084e8:	f7ff f97a 	bl	80077e0 <_free_r>
 80084ec:	4625      	mov	r5, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	f000 f81a 	bl	800852c <_malloc_usable_size_r>
 80084f8:	4284      	cmp	r4, r0
 80084fa:	4606      	mov	r6, r0
 80084fc:	d802      	bhi.n	8008504 <_realloc_r+0x34>
 80084fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008502:	d8f4      	bhi.n	80084ee <_realloc_r+0x1e>
 8008504:	4621      	mov	r1, r4
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff f9d6 	bl	80078b8 <_malloc_r>
 800850c:	4680      	mov	r8, r0
 800850e:	b908      	cbnz	r0, 8008514 <_realloc_r+0x44>
 8008510:	4645      	mov	r5, r8
 8008512:	e7ec      	b.n	80084ee <_realloc_r+0x1e>
 8008514:	42b4      	cmp	r4, r6
 8008516:	4622      	mov	r2, r4
 8008518:	4629      	mov	r1, r5
 800851a:	bf28      	it	cs
 800851c:	4632      	movcs	r2, r6
 800851e:	f7ff f950 	bl	80077c2 <memcpy>
 8008522:	4629      	mov	r1, r5
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff f95b 	bl	80077e0 <_free_r>
 800852a:	e7f1      	b.n	8008510 <_realloc_r+0x40>

0800852c <_malloc_usable_size_r>:
 800852c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008530:	1f18      	subs	r0, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfbc      	itt	lt
 8008536:	580b      	ldrlt	r3, [r1, r0]
 8008538:	18c0      	addlt	r0, r0, r3
 800853a:	4770      	bx	lr

0800853c <_init>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr

08008548 <_fini>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	bf00      	nop
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr
