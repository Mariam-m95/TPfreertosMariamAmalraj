
tp_amal_mariam_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008254  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008424  08008424  00009424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008880  08008880  00009880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00009888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008890  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004504  20000074  08008904  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004578  08008904  0000a578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012752  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339a  00000000  00000000  0001c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7b  00000000  00000000  00020ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ab  00000000  00000000  0002162b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001400b  00000000  00000000  00026cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c2f  00000000  00000000  0003ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  0012d954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00131efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800840c 	.word	0x0800840c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800840c 	.word	0x0800840c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000094 	.word	0x20000094
 80005d0:	200000e8 	.word	0x200000e8

080005d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_FREERTOS_Init+0x30>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fa4a 	bl	8004a8a <osThreadCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a03      	ldr	r2, [pc, #12]	@ (8000608 <MX_FREERTOS_Init+0x34>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bdb0      	pop	{r4, r5, r7, pc}
 8000604:	08008430 	.word	0x08008430
 8000608:	20000090 	.word	0x20000090

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f004 fa84 	bl	8004b22 <osDelay>
 800061a:	e7fb      	b.n	8000614 <StartDefaultTask+0x8>

0800061c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	@ 0x40
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000632:	4bad      	ldr	r3, [pc, #692]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4aac      	ldr	r2, [pc, #688]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4baa      	ldr	r3, [pc, #680]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0310 	and.w	r3, r3, #16
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064a:	4ba7      	ldr	r3, [pc, #668]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4aa6      	ldr	r2, [pc, #664]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4ba4      	ldr	r3, [pc, #656]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4ba1      	ldr	r3, [pc, #644]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4aa0      	ldr	r2, [pc, #640]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b9e      	ldr	r3, [pc, #632]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	623b      	str	r3, [r7, #32]
 8000678:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067a:	4b9b      	ldr	r3, [pc, #620]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a9a      	ldr	r2, [pc, #616]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b98      	ldr	r3, [pc, #608]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b95      	ldr	r3, [pc, #596]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a94      	ldr	r2, [pc, #592]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b92      	ldr	r3, [pc, #584]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b8f      	ldr	r3, [pc, #572]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a8e      	ldr	r2, [pc, #568]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b8c      	ldr	r3, [pc, #560]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006c2:	4b89      	ldr	r3, [pc, #548]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a88      	ldr	r2, [pc, #544]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b86      	ldr	r3, [pc, #536]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006da:	4b83      	ldr	r3, [pc, #524]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a82      	ldr	r2, [pc, #520]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b80      	ldr	r3, [pc, #512]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006f2:	4b7d      	ldr	r3, [pc, #500]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a7c      	ldr	r2, [pc, #496]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 80006f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b7a      	ldr	r3, [pc, #488]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b77      	ldr	r3, [pc, #476]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a76      	ldr	r2, [pc, #472]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b74      	ldr	r3, [pc, #464]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	4b71      	ldr	r3, [pc, #452]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a70      	ldr	r2, [pc, #448]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b6e      	ldr	r3, [pc, #440]	@ (80008e8 <MX_GPIO_Init+0x2cc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2120      	movs	r1, #32
 800073e:	486b      	ldr	r0, [pc, #428]	@ (80008ec <MX_GPIO_Init+0x2d0>)
 8000740:	f001 fdb6 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f241 010e 	movw	r1, #4110	@ 0x100e
 800074a:	4869      	ldr	r0, [pc, #420]	@ (80008f0 <MX_GPIO_Init+0x2d4>)
 800074c:	f001 fdb0 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2108      	movs	r1, #8
 8000754:	4867      	ldr	r0, [pc, #412]	@ (80008f4 <MX_GPIO_Init+0x2d8>)
 8000756:	f001 fdab 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000760:	4865      	ldr	r0, [pc, #404]	@ (80008f8 <MX_GPIO_Init+0x2dc>)
 8000762:	f001 fda5 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	21c8      	movs	r1, #200	@ 0xc8
 800076a:	4864      	ldr	r0, [pc, #400]	@ (80008fc <MX_GPIO_Init+0x2e0>)
 800076c:	f001 fda0 	bl	80022b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000780:	230e      	movs	r3, #14
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	485d      	ldr	r0, [pc, #372]	@ (8000900 <MX_GPIO_Init+0x2e4>)
 800078c:	f001 fbe4 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000790:	2308      	movs	r3, #8
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	4857      	ldr	r0, [pc, #348]	@ (8000900 <MX_GPIO_Init+0x2e4>)
 80007a4:	f001 fbd8 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007a8:	2304      	movs	r3, #4
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007b8:	2309      	movs	r3, #9
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c0:	4619      	mov	r1, r3
 80007c2:	484f      	ldr	r0, [pc, #316]	@ (8000900 <MX_GPIO_Init+0x2e4>)
 80007c4:	f001 fbc8 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007c8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007da:	230b      	movs	r3, #11
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4845      	ldr	r0, [pc, #276]	@ (80008fc <MX_GPIO_Init+0x2e0>)
 80007e6:	f001 fbb7 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007ea:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007fc:	230c      	movs	r3, #12
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000804:	4619      	mov	r1, r3
 8000806:	483e      	ldr	r0, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x2e4>)
 8000808:	f001 fba6 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800080c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	2312      	movs	r3, #18
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081e:	2304      	movs	r3, #4
 8000820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000826:	4619      	mov	r1, r3
 8000828:	4836      	ldr	r0, [pc, #216]	@ (8000904 <MX_GPIO_Init+0x2e8>)
 800082a:	f001 fb95 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800082e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000840:	230a      	movs	r3, #10
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000848:	4619      	mov	r1, r3
 800084a:	482e      	ldr	r0, [pc, #184]	@ (8000904 <MX_GPIO_Init+0x2e8>)
 800084c:	f001 fb84 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000850:	2310      	movs	r3, #16
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000860:	2302      	movs	r3, #2
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000868:	4619      	mov	r1, r3
 800086a:	4826      	ldr	r0, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x2e8>)
 800086c:	f001 fb74 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000880:	2308      	movs	r3, #8
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000888:	4619      	mov	r1, r3
 800088a:	4818      	ldr	r0, [pc, #96]	@ (80008ec <MX_GPIO_Init+0x2d0>)
 800088c:	f001 fb64 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000890:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008a2:	230c      	movs	r3, #12
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4816      	ldr	r0, [pc, #88]	@ (8000908 <MX_GPIO_Init+0x2ec>)
 80008ae:	f001 fb53 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008c4:	2301      	movs	r3, #1
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	@ (800090c <MX_GPIO_Init+0x2f0>)
 80008d0:	f001 fb42 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008d4:	2360      	movs	r3, #96	@ 0x60
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008e4:	230d      	movs	r3, #13
 80008e6:	e013      	b.n	8000910 <MX_GPIO_Init+0x2f4>
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40022000 	.word	0x40022000
 80008f4:	40022800 	.word	0x40022800
 80008f8:	40021c00 	.word	0x40021c00
 80008fc:	40021800 	.word	0x40021800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020400 	.word	0x40020400
 8000908:	40020800 	.word	0x40020800
 800090c:	40020000 	.word	0x40020000
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	48bc      	ldr	r0, [pc, #752]	@ (8000c0c <MX_GPIO_Init+0x5f0>)
 800091a:	f001 fb1d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800091e:	2340      	movs	r3, #64	@ 0x40
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800092e:	230a      	movs	r3, #10
 8000930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	48b5      	ldr	r0, [pc, #724]	@ (8000c10 <MX_GPIO_Init+0x5f4>)
 800093a:	f001 fb0d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800093e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000950:	230c      	movs	r3, #12
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000954:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000958:	4619      	mov	r1, r3
 800095a:	48ae      	ldr	r0, [pc, #696]	@ (8000c14 <MX_GPIO_Init+0x5f8>)
 800095c:	f001 fafc 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000960:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000972:	230e      	movs	r3, #14
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097a:	4619      	mov	r1, r3
 800097c:	48a6      	ldr	r0, [pc, #664]	@ (8000c18 <MX_GPIO_Init+0x5fc>)
 800097e:	f001 faeb 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	48a0      	ldr	r0, [pc, #640]	@ (8000c18 <MX_GPIO_Init+0x5fc>)
 8000998:	f001 fade 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	489a      	ldr	r0, [pc, #616]	@ (8000c1c <MX_GPIO_Init+0x600>)
 80009b2:	f001 fad1 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c8:	230c      	movs	r3, #12
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4892      	ldr	r0, [pc, #584]	@ (8000c1c <MX_GPIO_Init+0x600>)
 80009d4:	f001 fac0 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	488a      	ldr	r0, [pc, #552]	@ (8000c20 <MX_GPIO_Init+0x604>)
 80009f6:	f001 faaf 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009fa:	23f0      	movs	r3, #240	@ 0xf0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a12:	4619      	mov	r1, r3
 8000a14:	4883      	ldr	r0, [pc, #524]	@ (8000c24 <MX_GPIO_Init+0x608>)
 8000a16:	f001 fa9f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a1a:	23f7      	movs	r3, #247	@ 0xf7
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	487c      	ldr	r0, [pc, #496]	@ (8000c28 <MX_GPIO_Init+0x60c>)
 8000a36:	f001 fa8f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a4c:	2309      	movs	r3, #9
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	486f      	ldr	r0, [pc, #444]	@ (8000c14 <MX_GPIO_Init+0x5f8>)
 8000a58:	f001 fa7e 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4866      	ldr	r0, [pc, #408]	@ (8000c14 <MX_GPIO_Init+0x5f8>)
 8000a7a:	f001 fa6d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a92:	4619      	mov	r1, r3
 8000a94:	4861      	ldr	r0, [pc, #388]	@ (8000c1c <MX_GPIO_Init+0x600>)
 8000a96:	f001 fa5f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000aaa:	230d      	movs	r3, #13
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4859      	ldr	r0, [pc, #356]	@ (8000c1c <MX_GPIO_Init+0x600>)
 8000ab6:	f001 fa4f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000aba:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4854      	ldr	r0, [pc, #336]	@ (8000c24 <MX_GPIO_Init+0x608>)
 8000ad4:	f001 fa40 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aea:	4619      	mov	r1, r3
 8000aec:	484f      	ldr	r0, [pc, #316]	@ (8000c2c <MX_GPIO_Init+0x610>)
 8000aee:	f001 fa33 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000af2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b04:	230c      	movs	r3, #12
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4848      	ldr	r0, [pc, #288]	@ (8000c30 <MX_GPIO_Init+0x614>)
 8000b10:	f001 fa22 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b14:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b26:	230e      	movs	r3, #14
 8000b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	483c      	ldr	r0, [pc, #240]	@ (8000c24 <MX_GPIO_Init+0x608>)
 8000b32:	f001 fa11 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b36:	2308      	movs	r3, #8
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <MX_GPIO_Init+0x60c>)
 8000b4e:	f001 fa03 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b64:	230d      	movs	r3, #13
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4829      	ldr	r0, [pc, #164]	@ (8000c14 <MX_GPIO_Init+0x5f8>)
 8000b70:	f001 f9f2 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b84:	4619      	mov	r1, r3
 8000b86:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <MX_GPIO_Init+0x600>)
 8000b88:	f001 f9e6 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481d      	ldr	r0, [pc, #116]	@ (8000c1c <MX_GPIO_Init+0x600>)
 8000ba8:	f001 f9d6 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bac:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481c      	ldr	r0, [pc, #112]	@ (8000c34 <MX_GPIO_Init+0x618>)
 8000bc2:	f001 f9c9 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <MX_GPIO_Init+0x618>)
 8000be0:	f001 f9ba 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000be4:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bf6:	230d      	movs	r3, #13
 8000bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_GPIO_Init+0x618>)
 8000c02:	f001 f9a9 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e016      	b.n	8000c38 <MX_GPIO_Init+0x61c>
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40021800 	.word	0x40021800
 8000c18:	40022400 	.word	0x40022400
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40022000 	.word	0x40022000
 8000c28:	40022800 	.word	0x40022800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40021400 	.word	0x40021400
 8000c34:	40021c00 	.word	0x40021c00
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c46:	2302      	movs	r3, #2
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	48a4      	ldr	r0, [pc, #656]	@ (8000ee4 <MX_GPIO_Init+0x8c8>)
 8000c52:	f001 f981 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	489e      	ldr	r0, [pc, #632]	@ (8000ee4 <MX_GPIO_Init+0x8c8>)
 8000c6c:	f001 f974 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4896      	ldr	r0, [pc, #600]	@ (8000ee8 <MX_GPIO_Init+0x8cc>)
 8000c8e:	f001 f963 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c98:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	488e      	ldr	r0, [pc, #568]	@ (8000ee4 <MX_GPIO_Init+0x8c8>)
 8000caa:	f001 f955 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cae:	23c0      	movs	r3, #192	@ 0xc0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4888      	ldr	r0, [pc, #544]	@ (8000eec <MX_GPIO_Init+0x8d0>)
 8000cca:	f001 f945 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cde:	230a      	movs	r3, #10
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4881      	ldr	r0, [pc, #516]	@ (8000ef0 <MX_GPIO_Init+0x8d4>)
 8000cea:	f001 f935 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000cee:	2328      	movs	r3, #40	@ 0x28
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4879      	ldr	r0, [pc, #484]	@ (8000ef0 <MX_GPIO_Init+0x8d4>)
 8000d0a:	f001 f925 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d0e:	23c8      	movs	r3, #200	@ 0xc8
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4873      	ldr	r0, [pc, #460]	@ (8000ef4 <MX_GPIO_Init+0x8d8>)
 8000d26:	f001 f917 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d2a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	486e      	ldr	r0, [pc, #440]	@ (8000ef8 <MX_GPIO_Init+0x8dc>)
 8000d40:	f001 f90a 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d44:	2308      	movs	r3, #8
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d54:	230c      	movs	r3, #12
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4863      	ldr	r0, [pc, #396]	@ (8000eec <MX_GPIO_Init+0x8d0>)
 8000d60:	f001 f8fa 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d64:	2305      	movs	r3, #5
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d74:	230a      	movs	r3, #10
 8000d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	485b      	ldr	r0, [pc, #364]	@ (8000eec <MX_GPIO_Init+0x8d0>)
 8000d80:	f001 f8ea 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d84:	2332      	movs	r3, #50	@ 0x32
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4853      	ldr	r0, [pc, #332]	@ (8000eec <MX_GPIO_Init+0x8d0>)
 8000da0:	f001 f8da 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da4:	2304      	movs	r3, #4
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000db4:	2309      	movs	r3, #9
 8000db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	484f      	ldr	r0, [pc, #316]	@ (8000efc <MX_GPIO_Init+0x8e0>)
 8000dc0:	f001 f8ca 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000dc4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dd6:	2309      	movs	r3, #9
 8000dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4847      	ldr	r0, [pc, #284]	@ (8000f00 <MX_GPIO_Init+0x8e4>)
 8000de2:	f001 f8b9 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000de6:	2304      	movs	r3, #4
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	483e      	ldr	r0, [pc, #248]	@ (8000ef4 <MX_GPIO_Init+0x8d8>)
 8000dfa:	f001 f8ad 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dfe:	2386      	movs	r3, #134	@ 0x86
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4833      	ldr	r0, [pc, #204]	@ (8000ee8 <MX_GPIO_Init+0x8cc>)
 8000e1a:	f001 f89d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	482d      	ldr	r0, [pc, #180]	@ (8000ee8 <MX_GPIO_Init+0x8cc>)
 8000e32:	f001 f891 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e36:	2350      	movs	r3, #80	@ 0x50
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e46:	230d      	movs	r3, #13
 8000e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4825      	ldr	r0, [pc, #148]	@ (8000ee8 <MX_GPIO_Init+0x8cc>)
 8000e52:	f001 f881 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e56:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	@ (8000ef0 <MX_GPIO_Init+0x8d4>)
 8000e74:	f001 f870 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e78:	2328      	movs	r3, #40	@ 0x28
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <MX_GPIO_Init+0x8cc>)
 8000e94:	f001 f860 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e98:	2340      	movs	r3, #64	@ 0x40
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ea8:	2309      	movs	r3, #9
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480f      	ldr	r0, [pc, #60]	@ (8000ef0 <MX_GPIO_Init+0x8d4>)
 8000eb4:	f001 f850 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000eb8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <MX_GPIO_Init+0x8e0>)
 8000ed6:	f001 f83f 	bl	8001f58 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	@ 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020c00 	.word	0x40020c00

08000f04 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f0c:	1d39      	adds	r1, r7, #4
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2201      	movs	r2, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <__io_putchar+0x20>)
 8000f16:	f002 fafd 	bl	8003514 <HAL_UART_Transmit>
	return ch;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000654 	.word	0x20000654

08000f28 <fonction>:
		vTaskDelay(pdMS_TO_TICKS(delay));
	}
}

int fonction(int argc, char ** argv)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <fonction+0x1c>)
 8000f34:	f006 fa1c 	bl	8007370 <puts>

	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08008524 	.word	0x08008524

08000f48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_UART_RxCpltCallback+0x20>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
 8000f5a:	f000 fa0b 	bl	8001374 <shell_uart_receive_irq_cb>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40011000 	.word	0x40011000

08000f6c <led_task>:

void led_task(void *pvParameters){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	int period = (int)pvParameters;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <led_task+0x34>)
 8000f7e:	f001 f997 	bl	80022b0 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 fd83 	bl	8005a90 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <led_task+0x34>)
 8000f90:	f001 f98e 	bl	80022b0 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fd7a 	bl	8005a90 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000f9c:	bf00      	nop
 8000f9e:	e7eb      	b.n	8000f78 <led_task+0xc>
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <sh_led>:
	}
}

int sh_led(int argc, char ** argv)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	if(argc>1){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	dd41      	ble.n	8001038 <sh_led+0x94>
		int period = atoi(argv[1]);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 f826 	bl	800700c <atoi>
 8000fc0:	60f8      	str	r0, [r7, #12]
		if(period ==0){
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d112      	bne.n	8000fee <sh_led+0x4a>
			if (xLedTaskHandle != NULL) {
 8000fc8:	4b20      	ldr	r3, [pc, #128]	@ (800104c <sh_led+0xa8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d01a      	beq.n	8001006 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <sh_led+0xa8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fcc9 	bl	800596c <vTaskDelete>
				xLedTaskHandle = NULL;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <sh_led+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	481a      	ldr	r0, [pc, #104]	@ (8001050 <sh_led+0xac>)
 8000fe6:	f001 f963 	bl	80022b0 <HAL_GPIO_WritePin>
				return 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e029      	b.n	8001042 <sh_led+0x9e>
			}
		}
		else{
			if (xLedTaskHandle != NULL) {
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <sh_led+0xa8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <sh_led+0xa8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fcb6 	bl	800596c <vTaskDelete>
				xLedTaskHandle = NULL;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <sh_led+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
			}
		}
		BaseType_t ret = xTaskCreate(led_task, "LED_Task", STACK_SIZE_LONG, (void*)period, TASK_LED_PRIORITY, &xLedTaskHandle);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a10      	ldr	r2, [pc, #64]	@ (800104c <sh_led+0xa8>)
 800100a:	9201      	str	r2, [sp, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	490f      	ldr	r1, [pc, #60]	@ (8001054 <sh_led+0xb0>)
 8001016:	4810      	ldr	r0, [pc, #64]	@ (8001058 <sh_led+0xb4>)
 8001018:	f004 fb6e 	bl	80056f8 <xTaskCreate>
 800101c:	60b8      	str	r0, [r7, #8]
		if (ret == pdPASS) {
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d104      	bne.n	800102e <sh_led+0x8a>
			printf("Tâche LED lancée avec une période de %d ms\r\n",period);
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <sh_led+0xb8>)
 8001028:	f006 f93a 	bl	80072a0 <iprintf>
 800102c:	e002      	b.n	8001034 <sh_led+0x90>
		} else {
			printf("Erreur création tâche LED\r\n");
 800102e:	480c      	ldr	r0, [pc, #48]	@ (8001060 <sh_led+0xbc>)
 8001030:	f006 f99e 	bl	8007370 <puts>
		}
		return 1;
 8001034:	2301      	movs	r3, #1
 8001036:	e004      	b.n	8001042 <sh_led+0x9e>
	}
	else{
		printf("Erreur : ajouter la période\r\n");
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <sh_led+0xc0>)
 800103a:	f006 f999 	bl	8007370 <puts>
		return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200002e8 	.word	0x200002e8
 8001050:	40022000 	.word	0x40022000
 8001054:	08008540 	.word	0x08008540
 8001058:	08000f6d 	.word	0x08000f6d
 800105c:	0800854c 	.word	0x0800854c
 8001060:	0800857c 	.word	0x0800857c
 8001064:	0800859c 	.word	0x0800859c

08001068 <spam_task>:

void spam_task(void *pvParameters) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    char* msg = ((char**)pvParameters)[0];
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
    int count = atoi(((char**)pvParameters)[1]);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f005 ffc5 	bl	800700c <atoi>
 8001082:	60f8      	str	r0, [r7, #12]
    int i;
    if (xSemaphoreTake(xMutexSpam, portMAX_DELAY) == pdPASS) {
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <spam_task+0x80>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	4618      	mov	r0, r3
 800108e:	f004 f8b3 	bl	80051f8 <xQueueSemaphoreTake>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d117      	bne.n	80010c8 <spam_task+0x60>
        for (i = 0; i < count; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <spam_task+0x4a>
            printf("%s\r\n", msg);
 800109e:	6939      	ldr	r1, [r7, #16]
 80010a0:	4812      	ldr	r0, [pc, #72]	@ (80010ec <spam_task+0x84>)
 80010a2:	f006 f8fd 	bl	80072a0 <iprintf>
            vTaskDelay(pdMS_TO_TICKS(100));
 80010a6:	2064      	movs	r0, #100	@ 0x64
 80010a8:	f004 fcf2 	bl	8005a90 <vTaskDelay>
        for (i = 0; i < count; i++) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <spam_task+0x36>
        }
        xSemaphoreGive(xMutexSpam);
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <spam_task+0x80>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	f003 fef6 	bl	8004eb4 <xQueueGenericSend>
    }
    if (xSpamHandle != NULL) {
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <spam_task+0x88>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <spam_task+0x78>
        vTaskDelete(xSpamHandle);
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <spam_task+0x88>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fc49 	bl	800596c <vTaskDelete>
        xSpamHandle = NULL;
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <spam_task+0x88>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    }
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002f4 	.word	0x200002f4
 80010ec:	080085bc 	.word	0x080085bc
 80010f0:	200002f0 	.word	0x200002f0

080010f4 <sh_spam>:

int sh_spam(int argc, char ** argv)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	if(argc > 2){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	dd43      	ble.n	800118c <sh_spam+0x98>
		char* msg = argv[1];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	61fb      	str	r3, [r7, #28]
		int count = atoi(argv[2]);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3308      	adds	r3, #8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f005 ff7b 	bl	800700c <atoi>
 8001116:	61b8      	str	r0, [r7, #24]
		char* params[2]={msg,count};
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	613b      	str	r3, [r7, #16]
		printf(count);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4618      	mov	r0, r3
 8001124:	f006 f8bc 	bl	80072a0 <iprintf>
		printf("%d",count);
 8001128:	69b9      	ldr	r1, [r7, #24]
 800112a:	481d      	ldr	r0, [pc, #116]	@ (80011a0 <sh_spam+0xac>)
 800112c:	f006 f8b8 	bl	80072a0 <iprintf>
		if(xMutexSpam==NULL){
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <sh_spam+0xb0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <sh_spam+0x50>
			xMutexSpam=xSemaphoreCreateMutex();
 8001138:	2001      	movs	r0, #1
 800113a:	f003 fea3 	bl	8004e84 <xQueueCreateMutex>
 800113e:	4603      	mov	r3, r0
 8001140:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <sh_spam+0xb0>)
 8001142:	6013      	str	r3, [r2, #0]
		}
		if(xMutexSpam!=NULL){
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <sh_spam+0xb0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d017      	beq.n	800117c <sh_spam+0x88>
			BaseType_t ret = xTaskCreate(spam_task, "SPAM_task", STACK_SIZE_LONG, (void*) params, TASK_SPAM_PRIORITY, &xSpamHandle);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <sh_spam+0xb4>)
 8001152:	9201      	str	r2, [sp, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	9200      	str	r2, [sp, #0]
 8001158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800115c:	4913      	ldr	r1, [pc, #76]	@ (80011ac <sh_spam+0xb8>)
 800115e:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <sh_spam+0xbc>)
 8001160:	f004 faca 	bl	80056f8 <xTaskCreate>
 8001164:	6178      	str	r0, [r7, #20]
			if (ret == pdPASS) {
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d103      	bne.n	8001174 <sh_spam+0x80>
				printf("Debut SPAM\r\n");
 800116c:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <sh_spam+0xc0>)
 800116e:	f006 f8ff 	bl	8007370 <puts>
 8001172:	e009      	b.n	8001188 <sh_spam+0x94>
			} else {
				printf("Erreur création tâche SPAM\r\n");
 8001174:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <sh_spam+0xc4>)
 8001176:	f006 f8fb 	bl	8007370 <puts>
 800117a:	e005      	b.n	8001188 <sh_spam+0x94>
			}
		} else {
			printf("Erreur création du mutex\r\n");
 800117c:	480f      	ldr	r0, [pc, #60]	@ (80011bc <sh_spam+0xc8>)
 800117e:	f006 f8f7 	bl	8007370 <puts>
			return -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e006      	b.n	8001196 <sh_spam+0xa2>
		}
		return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e004      	b.n	8001196 <sh_spam+0xa2>
	} else {
		printf("Erreur : ajouter le message et le nombre de répétitions\r\n");
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <sh_spam+0xcc>)
 800118e:	f006 f8ef 	bl	8007370 <puts>
		return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001196:	4618      	mov	r0, r3
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	080085c4 	.word	0x080085c4
 80011a4:	200002f4 	.word	0x200002f4
 80011a8:	200002f0 	.word	0x200002f0
 80011ac:	080085c8 	.word	0x080085c8
 80011b0:	08001069 	.word	0x08001069
 80011b4:	080085d4 	.word	0x080085d4
 80011b8:	080085e0 	.word	0x080085e0
 80011bc:	08008600 	.word	0x08008600
 80011c0:	0800861c 	.word	0x0800861c

080011c4 <task_shell>:


void task_shell(void * unused){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	shell_init();
 80011cc:	f000 f95e 	bl	800148c <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <task_shell+0x38>)
 80011d2:	490b      	ldr	r1, [pc, #44]	@ (8001200 <task_shell+0x3c>)
 80011d4:	2066      	movs	r0, #102	@ 0x66
 80011d6:	f000 f991 	bl	80014fc <shell_add>
	shell_add('l', sh_led, "Fonction LED");
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <task_shell+0x40>)
 80011dc:	490a      	ldr	r1, [pc, #40]	@ (8001208 <task_shell+0x44>)
 80011de:	206c      	movs	r0, #108	@ 0x6c
 80011e0:	f000 f98c 	bl	80014fc <shell_add>
	shell_add('s', sh_spam, "Fonction SPAM");
 80011e4:	4a09      	ldr	r2, [pc, #36]	@ (800120c <task_shell+0x48>)
 80011e6:	490a      	ldr	r1, [pc, #40]	@ (8001210 <task_shell+0x4c>)
 80011e8:	2073      	movs	r0, #115	@ 0x73
 80011ea:	f000 f987 	bl	80014fc <shell_add>
	shell_run();	// boucle infinie
 80011ee:	f000 fa31 	bl	8001654 <shell_run>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08008658 	.word	0x08008658
 8001200:	08000f29 	.word	0x08000f29
 8001204:	08008670 	.word	0x08008670
 8001208:	08000fa5 	.word	0x08000fa5
 800120c:	08008680 	.word	0x08008680
 8001210:	080010f5 	.word	0x080010f5

08001214 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800121a:	f000 fc78 	bl	8001b0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800121e:	f000 f837 	bl	8001290 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001222:	f7ff f9fb 	bl	800061c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001226:	f000 fb8f 	bl	8001948 <MX_USART1_UART_Init>
	//	configASSERT(pdPASS == ret);


	//vTaskStartScheduler();

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2102      	movs	r1, #2
 800122e:	4813      	ldr	r0, [pc, #76]	@ (800127c <main+0x68>)
 8001230:	f001 f83e 	bl	80022b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001238:	f000 fcc6 	bl	8001bc8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	480e      	ldr	r0, [pc, #56]	@ (800127c <main+0x68>)
 8001242:	f001 f835 	bl	80022b0 <HAL_GPIO_WritePin>


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0x6c>)
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2301      	movs	r3, #1
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001254:	490b      	ldr	r1, [pc, #44]	@ (8001284 <main+0x70>)
 8001256:	480c      	ldr	r0, [pc, #48]	@ (8001288 <main+0x74>)
 8001258:	f004 fa4e 	bl	80056f8 <xTaskCreate>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d004      	beq.n	800126c <main+0x58>
	{
		printf("Error creating task shell\r\n");
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <main+0x78>)
 8001264:	f006 f884 	bl	8007370 <puts>
		Error_Handler();
 8001268:	f000 f87e 	bl	8001368 <Error_Handler>
	}

	vTaskStartScheduler();
 800126c:	f004 fc48 	bl	8005b00 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001270:	f7ff f9b0 	bl	80005d4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001274:	f003 fc02 	bl	8004a7c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <main+0x64>
 800127c:	40022000 	.word	0x40022000
 8001280:	200002ec 	.word	0x200002ec
 8001284:	08008690 	.word	0x08008690
 8001288:	080011c5 	.word	0x080011c5
 800128c:	08008698 	.word	0x08008698

08001290 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	@ 0x50
 8001294:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2230      	movs	r2, #48	@ 0x30
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f006 f97a 	bl	8007598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <SystemClock_Config+0xd0>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <SystemClock_Config+0xd0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <SystemClock_Config+0xd4>)
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <SystemClock_Config+0xd4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 80012fc:	23d8      	movs	r3, #216	@ 0xd8
 80012fe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f001 f839 	bl	8002384 <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001318:	f000 f826 	bl	8001368 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800131c:	f000 ffe2 	bl	80022e4 <HAL_PWREx_EnableOverDrive>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001326:	f000 f81f 	bl	8001368 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001336:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800133a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001340:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2107      	movs	r1, #7
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fabf 	bl	80028cc <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001354:	f000 f808 	bl	8001368 <Error_Handler>
	}
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	@ 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <shell_uart_receive_irq_cb+0x38>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1d3a      	adds	r2, r7, #4
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fe9e 	bl	80050c8 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <shell_uart_receive_irq_cb+0x2e>
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <shell_uart_receive_irq_cb+0x3c>)
 8001394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	f3bf 8f6f 	isb	sy
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000624 	.word	0x20000624
 80013b0:	e000ed04 	.word	0xe000ed04

080013b4 <uart_read>:

static char uart_read() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	2201      	movs	r2, #1
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <uart_read+0x2c>)
 80013c2:	f002 f930 	bl	8003626 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80013c6:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <uart_read+0x30>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f04f 31ff 	mov.w	r1, #4294967295
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 ff12 	bl	80051f8 <xQueueSemaphoreTake>

	return c;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000654 	.word	0x20000654
 80013e4:	20000624 	.word	0x20000624

080013e8 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <uart_write+0x24>)
 80013fe:	f002 f889 	bl	8003514 <HAL_UART_Transmit>
	return size;
 8001402:	887b      	ldrh	r3, [r7, #2]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000654 	.word	0x20000654

08001410 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e022      	b.n	8001466 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001420:	4916      	ldr	r1, [pc, #88]	@ (800147c <sh_help+0x6c>)
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	4912      	ldr	r1, [pc, #72]	@ (800147c <sh_help+0x6c>)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3308      	adds	r3, #8
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4603      	mov	r3, r0
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <sh_help+0x70>)
 800144a:	2128      	movs	r1, #40	@ 0x28
 800144c:	480d      	ldr	r0, [pc, #52]	@ (8001484 <sh_help+0x74>)
 800144e:	f005 ff97 	bl	8007380 <sniprintf>
 8001452:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	480a      	ldr	r0, [pc, #40]	@ (8001484 <sh_help+0x74>)
 800145c:	f7ff ffc4 	bl	80013e8 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <sh_help+0x78>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbd7      	blt.n	8001420 <sh_help+0x10>
	}

	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002fc 	.word	0x200002fc
 8001480:	080086b4 	.word	0x080086b4
 8001484:	200005fc 	.word	0x200005fc
 8001488:	200002f8 	.word	0x200002f8

0800148c <shell_init>:

void shell_init() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	int size = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <shell_init+0x58>)
 8001498:	2128      	movs	r1, #40	@ 0x28
 800149a:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <shell_init+0x5c>)
 800149c:	f005 ff70 	bl	8007380 <sniprintf>
 80014a0:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	480f      	ldr	r0, [pc, #60]	@ (80014e8 <shell_init+0x5c>)
 80014aa:	f7ff ff9d 	bl	80013e8 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 80014ae:	2203      	movs	r2, #3
 80014b0:	2100      	movs	r1, #0
 80014b2:	2001      	movs	r0, #1
 80014b4:	f003 fc6a 	bl	8004d8c <xQueueGenericCreate>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <shell_init+0x60>)
 80014bc:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <shell_init+0x60>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 80014c6:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <shell_init+0x64>)
 80014c8:	f005 ff52 	bl	8007370 <puts>
		while(1);
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 80014d0:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <shell_init+0x68>)
 80014d2:	4909      	ldr	r1, [pc, #36]	@ (80014f8 <shell_init+0x6c>)
 80014d4:	2068      	movs	r0, #104	@ 0x68
 80014d6:	f000 f811 	bl	80014fc <shell_add>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	080086c0 	.word	0x080086c0
 80014e8:	200005fc 	.word	0x200005fc
 80014ec:	20000624 	.word	0x20000624
 80014f0:	080086e8 	.word	0x080086e8
 80014f4:	08008700 	.word	0x08008700
 80014f8:	08001411 	.word	0x08001411

080014fc <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <shell_add+0x74>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001510:	dc26      	bgt.n	8001560 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <shell_add+0x74>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4917      	ldr	r1, [pc, #92]	@ (8001574 <shell_add+0x78>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <shell_add+0x74>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4912      	ldr	r1, [pc, #72]	@ (8001574 <shell_add+0x78>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3304      	adds	r3, #4
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <shell_add+0x74>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <shell_add+0x78>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3308      	adds	r3, #8
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <shell_add+0x74>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <shell_add+0x74>)
 800155a:	6013      	str	r3, [r2, #0]
		return 0;
 800155c:	2300      	movs	r3, #0
 800155e:	e001      	b.n	8001564 <shell_add+0x68>
	}

	return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	200002f8 	.word	0x200002f8
 8001574:	200002fc 	.word	0x200002fc

08001578 <shell_exec>:

static int shell_exec(char * buf) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b090      	sub	sp, #64	@ 0x40
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800158c:	e040      	b.n	8001610 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 800158e:	492d      	ldr	r1, [pc, #180]	@ (8001644 <shell_exec+0xcc>)
 8001590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d131      	bne.n	800160a <shell_exec+0x92>
			argc = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015b2:	e013      	b.n	80015dc <shell_exec+0x64>
				if(*p == ' ') {
 80015b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d10c      	bne.n	80015d6 <shell_exec+0x5e>
					*p = '\0';
 80015bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80015c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80015c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015ca:	3201      	adds	r2, #1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3340      	adds	r3, #64	@ 0x40
 80015d0:	443b      	add	r3, r7
 80015d2:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	3301      	adds	r3, #1
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
 80015dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <shell_exec+0x72>
 80015e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	dde4      	ble.n	80015b4 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80015ea:	4916      	ldr	r1, [pc, #88]	@ (8001644 <shell_exec+0xcc>)
 80015ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3304      	adds	r3, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	4611      	mov	r1, r2
 8001602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001604:	4798      	blx	r3
 8001606:	4603      	mov	r3, r0
 8001608:	e017      	b.n	800163a <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800160a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160c:	3301      	adds	r3, #1
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <shell_exec+0xd0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001616:	429a      	cmp	r2, r3
 8001618:	dbb9      	blt.n	800158e <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800161a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <shell_exec+0xd4>)
 8001620:	2128      	movs	r1, #40	@ 0x28
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <shell_exec+0xd8>)
 8001624:	f005 feac 	bl	8007380 <sniprintf>
 8001628:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	b29b      	uxth	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	@ (8001650 <shell_exec+0xd8>)
 8001632:	f7ff fed9 	bl	80013e8 <uart_write>
	return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	3740      	adds	r7, #64	@ 0x40
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002fc 	.word	0x200002fc
 8001648:	200002f8 	.word	0x200002f8
 800164c:	08008708 	.word	0x08008708
 8001650:	200005fc 	.word	0x200005fc

08001654 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
	int reading = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8001662:	2102      	movs	r1, #2
 8001664:	482a      	ldr	r0, [pc, #168]	@ (8001710 <shell_run+0xbc>)
 8001666:	f7ff febf 	bl	80013e8 <uart_write>
		reading = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]

		while(reading) {
 800166e:	e047      	b.n	8001700 <shell_run+0xac>
			char c = uart_read();
 8001670:	f7ff fea0 	bl	80013b4 <uart_read>
 8001674:	4603      	mov	r3, r0
 8001676:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d025      	beq.n	80016ca <shell_run+0x76>
 800167e:	2b0d      	cmp	r3, #13
 8001680:	d12e      	bne.n	80016e0 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8001682:	4a24      	ldr	r2, [pc, #144]	@ (8001714 <shell_run+0xc0>)
 8001684:	2128      	movs	r1, #40	@ 0x28
 8001686:	4824      	ldr	r0, [pc, #144]	@ (8001718 <shell_run+0xc4>)
 8001688:	f005 fe7a 	bl	8007380 <sniprintf>
 800168c:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	4820      	ldr	r0, [pc, #128]	@ (8001718 <shell_run+0xc4>)
 8001696:	f7ff fea7 	bl	80013e8 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	60ba      	str	r2, [r7, #8]
 80016a0:	4a1e      	ldr	r2, [pc, #120]	@ (800171c <shell_run+0xc8>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <shell_run+0xc8>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <shell_run+0xcc>)
 80016aa:	2128      	movs	r1, #40	@ 0x28
 80016ac:	481a      	ldr	r0, [pc, #104]	@ (8001718 <shell_run+0xc4>)
 80016ae:	f005 fe67 	bl	8007380 <sniprintf>
 80016b2:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	4817      	ldr	r0, [pc, #92]	@ (8001718 <shell_run+0xc4>)
 80016bc:	f7ff fe94 	bl	80013e8 <uart_write>
				reading = 0;        //exit read loop
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
				break;
 80016c8:	e01a      	b.n	8001700 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dd16      	ble.n	80016fe <shell_run+0xaa>
					pos--;          //remove it in buffer
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80016d6:	2103      	movs	r1, #3
 80016d8:	4812      	ldr	r0, [pc, #72]	@ (8001724 <shell_run+0xd0>)
 80016da:	f7ff fe85 	bl	80013e8 <uart_write>
				}
				break;
 80016de:	e00e      	b.n	80016fe <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b27      	cmp	r3, #39	@ 0x27
 80016e4:	dc0c      	bgt.n	8001700 <shell_run+0xac>
					uart_write(&c, 1);
 80016e6:	1cfb      	adds	r3, r7, #3
 80016e8:	2101      	movs	r1, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe7c 	bl	80013e8 <uart_write>
					cmd_buffer[pos++] = c; //store
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <shell_run+0xc8>)
 80016fa:	54d1      	strb	r1, [r2, r3]
 80016fc:	e000      	b.n	8001700 <shell_run+0xac>
				break;
 80016fe:	bf00      	nop
		while(reading) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1b4      	bne.n	8001670 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <shell_run+0xc8>)
 8001708:	f7ff ff36 	bl	8001578 <shell_exec>
		uart_write(prompt, 2);
 800170c:	e7a9      	b.n	8001662 <shell_run+0xe>
 800170e:	bf00      	nop
 8001710:	20000004 	.word	0x20000004
 8001714:	08008720 	.word	0x08008720
 8001718:	200005fc 	.word	0x200005fc
 800171c:	20000628 	.word	0x20000628
 8001720:	08008724 	.word	0x08008724
 8001724:	20000000 	.word	0x20000000

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <HAL_MspInit+0x4c>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_MspInit+0x4c>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	210f      	movs	r1, #15
 8001762:	f06f 0001 	mvn.w	r0, #1
 8001766:	f000 fb2e 	bl	8001dc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f9e9 	bl	8001b88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017b6:	f004 fdc1 	bl	800633c <xTaskGetSchedulerState>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d001      	beq.n	80017c4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017c0:	f005 f9a2 	bl	8006b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <USART1_IRQHandler+0x10>)
 80017ce:	f001 ff6f 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000654 	.word	0x20000654

080017dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
  }

  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e009      	b.n	800183c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb67 	bl	8000f04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf1      	blt.n	8001828 <_write+0x12>
  }
  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001876:	605a      	str	r2, [r3, #4]
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f005 fea4 	bl	8007634 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20050000 	.word	0x20050000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000650 	.word	0x20000650
 8001920:	20004578 	.word	0x20004578

08001924 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800194e:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <MX_USART1_UART_Init+0x5c>)
 8001950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800198c:	f001 fd74 	bl	8003478 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001996:	f7ff fce7 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000654 	.word	0x20000654
 80019a4:	40011000 	.word	0x40011000

080019a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0ac      	sub	sp, #176	@ 0xb0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	2284      	movs	r2, #132	@ 0x84
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f005 fde5 	bl	8007598 <memset>
  if(uartHandle->Instance==USART1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a36      	ldr	r2, [pc, #216]	@ (8001aac <HAL_UART_MspInit+0x104>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d164      	bne.n	8001aa2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019d8:	2340      	movs	r3, #64	@ 0x40
 80019da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019dc:	2300      	movs	r3, #0
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 f957 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019f0:	f7ff fcba 	bl	8001368 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	4a27      	ldr	r2, [pc, #156]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a30:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <HAL_UART_MspInit+0x108>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a54:	2307      	movs	r3, #7
 8001a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <HAL_UART_MspInit+0x10c>)
 8001a62:	f000 fa79 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a80:	2307      	movs	r3, #7
 8001a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480a      	ldr	r0, [pc, #40]	@ (8001ab8 <HAL_UART_MspInit+0x110>)
 8001a8e:	f000 fa63 	bl	8001f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	2025      	movs	r0, #37	@ 0x25
 8001a98:	f000 f995 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a9c:	2025      	movs	r0, #37	@ 0x25
 8001a9e:	f000 f9ae 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	37b0      	adds	r7, #176	@ 0xb0
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020000 	.word	0x40020000

08001abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac0:	f7ff ff30 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	@ (8001afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f005 fda9 	bl	8007640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aee:	f7ff fb91 	bl	8001214 <main>
  bx  lr    
 8001af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b00:	08008890 	.word	0x08008890
  ldr r2, =_sbss
 8001b04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b08:	20004578 	.word	0x20004578

08001b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC_IRQHandler>

08001b0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b12:	2003      	movs	r0, #3
 8001b14:	f000 f94c 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b18:	200f      	movs	r0, #15
 8001b1a:	f000 f805 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1e:	f7ff fe03 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f967 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f92f 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000010 	.word	0x20000010
 8001b84:	2000000c 	.word	0x2000000c

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	200006dc 	.word	0x200006dc

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200006dc 	.word	0x200006dc

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000010 	.word	0x20000010

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x40>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	05fa0000 	.word	0x05fa0000

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	@ (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff feb6 	bl	8001bb0 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d008      	beq.n	8001e64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e052      	b.n	8001f0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0216 	bic.w	r2, r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HAL_DMA_Abort+0x62>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0208 	bic.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb4:	e013      	b.n	8001ede <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb6:	f7ff fe7b 	bl	8001bb0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d90c      	bls.n	8001ede <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e015      	b.n	8001f0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e4      	bne.n	8001eb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	223f      	movs	r2, #63	@ 0x3f
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e00c      	b.n	8001f4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e175      	b.n	8002264 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8164 	bne.w	800225e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d005      	beq.n	8001fae <HAL_GPIO_Init+0x56>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d130      	bne.n	8002010 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 0201 	and.w	r2, r3, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b03      	cmp	r3, #3
 800201a:	d017      	beq.n	800204c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d123      	bne.n	80020a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80be 	beq.w	800225e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_GPIO_Init+0x324>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_GPIO_Init+0x324>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b63      	ldr	r3, [pc, #396]	@ (800227c <HAL_GPIO_Init+0x324>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020fa:	4a61      	ldr	r2, [pc, #388]	@ (8002280 <HAL_GPIO_Init+0x328>)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_GPIO_Init+0x32c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d037      	beq.n	8002196 <HAL_GPIO_Init+0x23e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a57      	ldr	r2, [pc, #348]	@ (8002288 <HAL_GPIO_Init+0x330>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d031      	beq.n	8002192 <HAL_GPIO_Init+0x23a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a56      	ldr	r2, [pc, #344]	@ (800228c <HAL_GPIO_Init+0x334>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <HAL_GPIO_Init+0x236>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a55      	ldr	r2, [pc, #340]	@ (8002290 <HAL_GPIO_Init+0x338>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d025      	beq.n	800218a <HAL_GPIO_Init+0x232>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a54      	ldr	r2, [pc, #336]	@ (8002294 <HAL_GPIO_Init+0x33c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01f      	beq.n	8002186 <HAL_GPIO_Init+0x22e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a53      	ldr	r2, [pc, #332]	@ (8002298 <HAL_GPIO_Init+0x340>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d019      	beq.n	8002182 <HAL_GPIO_Init+0x22a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_GPIO_Init+0x344>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_GPIO_Init+0x226>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a51      	ldr	r2, [pc, #324]	@ (80022a0 <HAL_GPIO_Init+0x348>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00d      	beq.n	800217a <HAL_GPIO_Init+0x222>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a50      	ldr	r2, [pc, #320]	@ (80022a4 <HAL_GPIO_Init+0x34c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <HAL_GPIO_Init+0x21e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4f      	ldr	r2, [pc, #316]	@ (80022a8 <HAL_GPIO_Init+0x350>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_GPIO_Init+0x21a>
 800216e:	2309      	movs	r3, #9
 8002170:	e012      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002172:	230a      	movs	r3, #10
 8002174:	e010      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002176:	2308      	movs	r3, #8
 8002178:	e00e      	b.n	8002198 <HAL_GPIO_Init+0x240>
 800217a:	2307      	movs	r3, #7
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x240>
 800217e:	2306      	movs	r3, #6
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x240>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x240>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x240>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	@ (8002280 <HAL_GPIO_Init+0x328>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_GPIO_Init+0x354>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a34      	ldr	r2, [pc, #208]	@ (80022ac <HAL_GPIO_Init+0x354>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_GPIO_Init+0x354>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <HAL_GPIO_Init+0x354>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220a:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <HAL_GPIO_Init+0x354>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_GPIO_Init+0x354>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_GPIO_Init+0x354>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <HAL_GPIO_Init+0x354>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae86 	bls.w	8001f78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	@ 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40021c00 	.word	0x40021c00
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40022400 	.word	0x40022400
 80022ac:	40013c00 	.word	0x40013c00

080022b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022cc:	e003      	b.n	80022d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	619a      	str	r2, [r3, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a22      	ldr	r2, [pc, #136]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_PWREx_EnableOverDrive+0x98>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002306:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002312:	f7ff fc4d 	bl	8001bb0 <HAL_GetTick>
 8002316:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002318:	e009      	b.n	800232e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800231a:	f7ff fc49 	bl	8001bb0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002328:	d901      	bls.n	800232e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e022      	b.n	8002374 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800232e:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233a:	d1ee      	bne.n	800231a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002346:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002348:	f7ff fc32 	bl	8001bb0 <HAL_GetTick>
 800234c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800234e:	e009      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002350:	f7ff fc2e 	bl	8001bb0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235e:	d901      	bls.n	8002364 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e007      	b.n	8002374 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002370:	d1ee      	bne.n	8002350 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e291      	b.n	80028be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8087 	beq.w	80024b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a8:	4b96      	ldr	r3, [pc, #600]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d00c      	beq.n	80023ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b4:	4b93      	ldr	r3, [pc, #588]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d112      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
 80023c0:	4b90      	ldr	r3, [pc, #576]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023cc:	d10b      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d06c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x130>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d168      	bne.n	80024b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e26b      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x7a>
 80023f0:	4b84      	ldr	r3, [pc, #528]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a83      	ldr	r2, [pc, #524]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e02e      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x9c>
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800240c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b7c      	ldr	r3, [pc, #496]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7b      	ldr	r2, [pc, #492]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e01d      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0xc0>
 800242a:	4b76      	ldr	r3, [pc, #472]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a75      	ldr	r2, [pc, #468]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b73      	ldr	r3, [pc, #460]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a72      	ldr	r2, [pc, #456]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xd8>
 8002444:	4b6f      	ldr	r3, [pc, #444]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6e      	ldr	r2, [pc, #440]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b6c      	ldr	r3, [pc, #432]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6b      	ldr	r2, [pc, #428]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff fba4 	bl	8001bb0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fba0 	bl	8001bb0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e21f      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b61      	ldr	r3, [pc, #388]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xe8>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff fb90 	bl	8001bb0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff fb8c 	bl	8001bb0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e20b      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	4b57      	ldr	r3, [pc, #348]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x110>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d069      	beq.n	8002596 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c2:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x190>
 80024da:	4b4a      	ldr	r3, [pc, #296]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x17a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1df      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	493d      	ldr	r1, [pc, #244]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e040      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b39      	ldr	r3, [pc, #228]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a38      	ldr	r2, [pc, #224]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff fb42 	bl	8001bb0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fb3e 	bl	8001bb0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1bd      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4929      	ldr	r1, [pc, #164]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002564:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a26      	ldr	r2, [pc, #152]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fb1e 	bl	8001bb0 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff fb1a 	bl	8001bb0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e199      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d038      	beq.n	8002614 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ae:	4a15      	ldr	r2, [pc, #84]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7ff fafb 	bl	8001bb0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7ff faf7 	bl	8001bb0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e176      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x23a>
 80025dc:	e01a      	b.n	8002614 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <HAL_RCC_OscConfig+0x280>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff fae1 	bl	8001bb0 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff fadd 	bl	8001bb0 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d903      	bls.n	8002608 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e15c      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
 8002604:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b91      	ldr	r3, [pc, #580]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a4 	beq.w	800276a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b8b      	ldr	r3, [pc, #556]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a87      	ldr	r2, [pc, #540]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b85      	ldr	r3, [pc, #532]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b82      	ldr	r3, [pc, #520]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002656:	4b7f      	ldr	r3, [pc, #508]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7e      	ldr	r2, [pc, #504]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff faa5 	bl	8001bb0 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff faa1 	bl	8001bb0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	@ 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e120      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x31a>
 8002690:	4b6f      	ldr	r3, [pc, #444]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x33c>
 80026a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a69      	ldr	r2, [pc, #420]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b2:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a66      	ldr	r2, [pc, #408]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x35e>
 80026c8:	4b61      	ldr	r3, [pc, #388]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a60      	ldr	r2, [pc, #384]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
 80026e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	4b58      	ldr	r3, [pc, #352]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a57      	ldr	r2, [pc, #348]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7ff fa55 	bl	8001bb0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fa51 	bl	8001bb0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0ce      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b4b      	ldr	r3, [pc, #300]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x386>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff fa3f 	bl	8001bb0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fa3b 	bl	8001bb0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0b8      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b3c      	ldr	r3, [pc, #240]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80a4 	beq.w	80028bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b36      	ldr	r3, [pc, #216]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d06b      	beq.n	8002858 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d149      	bne.n	800281c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fa0c 	bl	8001bb0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff fa08 	bl	8001bb0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e087      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	4313      	orrs	r3, r2
 80027e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80027e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a18      	ldr	r2, [pc, #96]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff f9dc 	bl	8001bb0 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7ff f9d8 	bl	8001bb0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e057      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x478>
 800281a:	e04f      	b.n	80028bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0b      	ldr	r2, [pc, #44]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7ff f9c2 	bl	8001bb0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7ff f9be 	bl	8001bb0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e03d      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x4ac>
 800284e:	e035      	b.n	80028bc <HAL_RCC_OscConfig+0x538>
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x544>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d028      	beq.n	80028b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d121      	bne.n	80028b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d11a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002888:	4013      	ands	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800288e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d0      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b67      	ldr	r3, [pc, #412]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	4965      	ldr	r1, [pc, #404]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d040      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e073      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4936      	ldr	r1, [pc, #216]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7ff f8f6 	bl	8001bb0 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff f8f2 	bl	8001bb0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e053      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2d      	ldr	r3, [pc, #180]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d210      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	4922      	ldr	r1, [pc, #136]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	@ (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f852 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08008734 	.word	0x08008734
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b090      	sub	sp, #64	@ 0x40
 8002aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	f200 80a1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad6:	e09b      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002adc:	e09b      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ae2:	e098      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aee:	4b4d      	ldr	r3, [pc, #308]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b10:	fb03 f201 	mul.w	r2, r3, r1
 8002b14:	2300      	movs	r3, #0
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a43      	ldr	r2, [pc, #268]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b24:	460a      	mov	r2, r1
 8002b26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	2200      	movs	r2, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b3e:	f7fd fbb7 	bl	80002b0 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4613      	mov	r3, r2
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b4a:	e053      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	617a      	str	r2, [r7, #20]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	4652      	mov	r2, sl
 8002b64:	465b      	mov	r3, fp
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0159      	lsls	r1, r3, #5
 8002b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b74:	0150      	lsls	r0, r2, #5
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b96:	ebb2 0408 	subs.w	r4, r2, r8
 8002b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	00eb      	lsls	r3, r5, #3
 8002ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bac:	00e2      	lsls	r2, r4, #3
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	eb14 030a 	adds.w	r3, r4, sl
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	eb45 030b 	adc.w	r3, r5, fp
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	2200      	movs	r2, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be8:	f7fd fb62 	bl	80002b0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	@ 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	017d7840 	.word	0x017d7840

08002c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08008744 	.word	0x08008744

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c74:	f7ff ffdc 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0b5b      	lsrs	r3, r3, #13
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08008744 	.word	0x08008744

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cc0:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a68      	ldr	r2, [pc, #416]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	4b66      	ldr	r3, [pc, #408]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	4964      	ldr	r1, [pc, #400]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	4959      	ldr	r1, [pc, #356]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d10:	d101      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	494a      	ldr	r1, [pc, #296]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 808b 	beq.w	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	4a39      	ldr	r2, [pc, #228]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d88:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a34      	ldr	r2, [pc, #208]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe ff06 	bl	8001bb0 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe ff02 	bl	8001bb0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e357      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d035      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d02e      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002de4:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e06:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d114      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe feca 	bl	8001bb0 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fec6 	bl	8001bb0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e319      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0ee      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e4e:	d111      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	4901      	ldr	r1, [pc, #4]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	0ffffcff 	.word	0x0ffffcff
 8002e74:	4baa      	ldr	r3, [pc, #680]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4aa9      	ldr	r2, [pc, #676]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	4ba7      	ldr	r3, [pc, #668]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	49a4      	ldr	r1, [pc, #656]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea4:	4a9e      	ldr	r2, [pc, #632]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002eae:	4b9c      	ldr	r3, [pc, #624]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb8:	4999      	ldr	r1, [pc, #612]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ecc:	4b94      	ldr	r3, [pc, #592]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eda:	4991      	ldr	r1, [pc, #580]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eee:	4b8c      	ldr	r3, [pc, #560]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002efc:	4988      	ldr	r1, [pc, #544]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f10:	4b83      	ldr	r3, [pc, #524]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	4980      	ldr	r1, [pc, #512]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f32:	4b7b      	ldr	r3, [pc, #492]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4977      	ldr	r1, [pc, #476]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	496f      	ldr	r1, [pc, #444]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f76:	4b6a      	ldr	r3, [pc, #424]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7c:	f023 020c 	bic.w	r2, r3, #12
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f84:	4966      	ldr	r1, [pc, #408]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f98:	4b61      	ldr	r3, [pc, #388]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	495e      	ldr	r1, [pc, #376]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fba:	4b59      	ldr	r3, [pc, #356]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	4955      	ldr	r1, [pc, #340]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	494d      	ldr	r1, [pc, #308]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ffe:	4b48      	ldr	r3, [pc, #288]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4944      	ldr	r1, [pc, #272]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003020:	4b3f      	ldr	r3, [pc, #252]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	493c      	ldr	r1, [pc, #240]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003042:	4b37      	ldr	r3, [pc, #220]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	4933      	ldr	r1, [pc, #204]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003072:	492b      	ldr	r1, [pc, #172]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003086:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003094:	4922      	ldr	r1, [pc, #136]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d4:	4912      	ldr	r1, [pc, #72]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f8:	4909      	ldr	r1, [pc, #36]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d006      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80d9 	beq.w	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003114:	4b02      	ldr	r3, [pc, #8]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a01      	ldr	r2, [pc, #4]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800311e:	e001      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003120:	40023800 	.word	0x40023800
 8003124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003126:	f7fe fd43 	bl	8001bb0 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800312e:	f7fe fd3f 	bl	8001bb0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	@ 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e194      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003140:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d021      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11d      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003160:	4b64      	ldr	r3, [pc, #400]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800316e:	4b61      	ldr	r3, [pc, #388]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003174:	0e1b      	lsrs	r3, r3, #24
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	019a      	lsls	r2, r3, #6
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	071b      	lsls	r3, r3, #28
 8003194:	4957      	ldr	r1, [pc, #348]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02e      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c6:	d129      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031c8:	4b4a      	ldr	r3, [pc, #296]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031dc:	0f1b      	lsrs	r3, r3, #28
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	019a      	lsls	r2, r3, #6
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	071b      	lsls	r3, r3, #28
 80031fc:	493d      	ldr	r1, [pc, #244]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003204:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800320a:	f023 021f 	bic.w	r2, r3, #31
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	3b01      	subs	r3, #1
 8003214:	4937      	ldr	r1, [pc, #220]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01d      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003228:	4b32      	ldr	r3, [pc, #200]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800322e:	0e1b      	lsrs	r3, r3, #24
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800323c:	0f1b      	lsrs	r3, r3, #28
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	019a      	lsls	r2, r3, #6
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	071b      	lsls	r3, r3, #28
 800325c:	4925      	ldr	r1, [pc, #148]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d011      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	019a      	lsls	r2, r3, #6
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	071b      	lsls	r3, r3, #28
 800328c:	4919      	ldr	r1, [pc, #100]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003294:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800329e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe fc86 	bl	8001bb0 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032a8:	f7fe fc82 	bl	8001bb0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0d7      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ba:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 80cd 	bne.w	8003468 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032da:	f7fe fc69 	bl	8001bb0 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e2:	f7fe fc65 	bl	8001bb0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	@ 0x64
 80032ee:	d903      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0ba      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003304:	d0ed      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12a      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800332e:	4b51      	ldr	r3, [pc, #324]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800333c:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	0f1b      	lsrs	r3, r3, #28
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4944      	ldr	r1, [pc, #272]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336a:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003370:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	493d      	ldr	r1, [pc, #244]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003398:	d11d      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339a:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	0e1b      	lsrs	r3, r3, #24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033a8:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	0f1b      	lsrs	r3, r3, #28
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	4929      	ldr	r1, [pc, #164]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033e2:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033f0:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	431a      	orrs	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	4917      	ldr	r1, [pc, #92]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003424:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	4911      	ldr	r1, [pc, #68]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0e      	ldr	r2, [pc, #56]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003440:	f7fe fbb6 	bl	8001bb0 <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003448:	f7fe fbb2 	bl	8001bb0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e007      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003466:	d1ef      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e040      	b.n	800350c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fa84 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fe4c 	bl	800415c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fbe5 	bl	8003c94 <UART_SetConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01b      	b.n	800350c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fecb 	bl	80042a0 <UART_CheckIdleState>
 800350a:	4603      	mov	r3, r0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003528:	2b20      	cmp	r3, #32
 800352a:	d177      	bne.n	800361c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_UART_Transmit+0x24>
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e070      	b.n	800361e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2221      	movs	r2, #33	@ 0x21
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354a:	f7fe fb31 	bl	8001bb0 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003568:	d108      	bne.n	800357c <HAL_UART_Transmit+0x68>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e003      	b.n	8003584 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003584:	e02f      	b.n	80035e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fedc 	bl	800434e <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e03b      	b.n	800361e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	3302      	adds	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e007      	b.n	80035d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1c9      	bne.n	8003586 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2140      	movs	r1, #64	@ 0x40
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fea6 	bl	800434e <UART_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e005      	b.n	800361e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b08a      	sub	sp, #40	@ 0x28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800363a:	2b20      	cmp	r3, #32
 800363c:	d132      	bne.n	80036a4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_UART_Receive_IT+0x24>
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02b      	b.n	80036a6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	613b      	str	r3, [r7, #16]
   return(result);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	69f9      	ldr	r1, [r7, #28]
 8003686:	6a3a      	ldr	r2, [r7, #32]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	61bb      	str	r3, [r7, #24]
   return(result);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e6      	bne.n	8003662 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	461a      	mov	r2, r3
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fec4 	bl	8004428 <UART_Start_Receive_IT>
 80036a0:	4603      	mov	r3, r0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3728      	adds	r7, #40	@ 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ba      	sub	sp, #232	@ 0xe8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036de:	4013      	ands	r3, r2
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d115      	bne.n	8003718 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00f      	beq.n	8003718 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8297 	beq.w	8003c3c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
      }
      return;
 8003716:	e291      	b.n	8003c3c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8117 	beq.w	8003950 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800372e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <HAL_UART_IRQHandler+0x298>)
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 810a 	beq.w	8003950 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <HAL_UART_IRQHandler+0xbc>
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2201      	movs	r2, #1
 800375a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_UART_IRQHandler+0xec>
 8003778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003792:	f043 0204 	orr.w	r2, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d011      	beq.n	80037cc <HAL_UART_IRQHandler+0x11c>
 80037a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2204      	movs	r2, #4
 80037ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c2:	f043 0202 	orr.w	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2208      	movs	r2, #8
 80037f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fe:	f043 0208 	orr.w	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <HAL_UART_IRQHandler+0x18a>
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 81fd 	beq.w	8003c40 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04f      	beq.n	8003932 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fe8e 	bl	80045b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	d141      	bne.n	800392a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1d9      	bne.n	80038a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d013      	beq.n	8003922 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	4a13      	ldr	r2, [pc, #76]	@ (800394c <HAL_UART_IRQHandler+0x29c>)
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fb03 	bl	8001f12 <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00f      	b.n	8003942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9a0 	bl	8003c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00b      	b.n	8003942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f99c 	bl	8003c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e007      	b.n	8003942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f998 	bl	8003c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003940:	e17e      	b.n	8003c40 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003942:	bf00      	nop
    return;
 8003944:	e17c      	b.n	8003c40 <HAL_UART_IRQHandler+0x590>
 8003946:	bf00      	nop
 8003948:	04000120 	.word	0x04000120
 800394c:	0800467d 	.word	0x0800467d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 814c 	bne.w	8003bf2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8145 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 813e 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	f040 80b6 	bne.w	8003afa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8150 	beq.w	8003c44 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ae:	429a      	cmp	r2, r3
 80039b0:	f080 8148 	bcs.w	8003c44 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c8:	f000 8086 	beq.w	8003ad8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1da      	bne.n	80039cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e1      	bne.n	8003a16 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003abc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e4      	bne.n	8003a98 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f9ad 	bl	8001e32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8c2 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af8:	e0a4      	b.n	8003c44 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8096 	beq.w	8003c48 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8091 	beq.w	8003c48 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e4      	bne.n	8003b26 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b80:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e3      	bne.n	8003b5c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f023 0310 	bic.w	r3, r3, #16
 8003bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	69b9      	ldr	r1, [r7, #24]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e4      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f846 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf0:	e02a      	b.n	8003c48 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01c      	beq.n	8003c4c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
    }
    return;
 8003c1a:	e017      	b.n	8003c4c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <HAL_UART_IRQHandler+0x59e>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fd37 	bl	80046a8 <UART_EndTransmit_IT>
    return;
 8003c3a:	e008      	b.n	8003c4e <HAL_UART_IRQHandler+0x59e>
      return;
 8003c3c:	bf00      	nop
 8003c3e:	e006      	b.n	8003c4e <HAL_UART_IRQHandler+0x59e>
    return;
 8003c40:	bf00      	nop
 8003c42:	e004      	b.n	8003c4e <HAL_UART_IRQHandler+0x59e>
      return;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <HAL_UART_IRQHandler+0x59e>
      return;
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <HAL_UART_IRQHandler+0x59e>
    return;
 8003c4c:	bf00      	nop
  }

}
 8003c4e:	37e8      	adds	r7, #232	@ 0xe8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8003f58 <UART_SetConfig+0x2c4>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	6979      	ldr	r1, [r7, #20]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a94      	ldr	r2, [pc, #592]	@ (8003f5c <UART_SetConfig+0x2c8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d120      	bne.n	8003d52 <UART_SetConfig+0xbe>
 8003d10:	4b93      	ldr	r3, [pc, #588]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d816      	bhi.n	8003d4c <UART_SetConfig+0xb8>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <UART_SetConfig+0x90>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d41 	.word	0x08003d41
 8003d2c:	08003d3b 	.word	0x08003d3b
 8003d30:	08003d47 	.word	0x08003d47
 8003d34:	2301      	movs	r3, #1
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e150      	b.n	8003fdc <UART_SetConfig+0x348>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e14d      	b.n	8003fdc <UART_SetConfig+0x348>
 8003d40:	2304      	movs	r3, #4
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e14a      	b.n	8003fdc <UART_SetConfig+0x348>
 8003d46:	2308      	movs	r3, #8
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e147      	b.n	8003fdc <UART_SetConfig+0x348>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e144      	b.n	8003fdc <UART_SetConfig+0x348>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a83      	ldr	r2, [pc, #524]	@ (8003f64 <UART_SetConfig+0x2d0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d132      	bne.n	8003dc2 <UART_SetConfig+0x12e>
 8003d5c:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d828      	bhi.n	8003dbc <UART_SetConfig+0x128>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <UART_SetConfig+0xdc>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dbd 	.word	0x08003dbd
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003db1 	.word	0x08003db1
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003dbd 	.word	0x08003dbd
 8003d90:	08003dab 	.word	0x08003dab
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dbd 	.word	0x08003dbd
 8003da0:	08003db7 	.word	0x08003db7
 8003da4:	2300      	movs	r3, #0
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e118      	b.n	8003fdc <UART_SetConfig+0x348>
 8003daa:	2302      	movs	r3, #2
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e115      	b.n	8003fdc <UART_SetConfig+0x348>
 8003db0:	2304      	movs	r3, #4
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e112      	b.n	8003fdc <UART_SetConfig+0x348>
 8003db6:	2308      	movs	r3, #8
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e10f      	b.n	8003fdc <UART_SetConfig+0x348>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e10c      	b.n	8003fdc <UART_SetConfig+0x348>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a68      	ldr	r2, [pc, #416]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d120      	bne.n	8003e0e <UART_SetConfig+0x17a>
 8003dcc:	4b64      	ldr	r3, [pc, #400]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dd6:	2b30      	cmp	r3, #48	@ 0x30
 8003dd8:	d013      	beq.n	8003e02 <UART_SetConfig+0x16e>
 8003dda:	2b30      	cmp	r3, #48	@ 0x30
 8003ddc:	d814      	bhi.n	8003e08 <UART_SetConfig+0x174>
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d009      	beq.n	8003df6 <UART_SetConfig+0x162>
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d810      	bhi.n	8003e08 <UART_SetConfig+0x174>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <UART_SetConfig+0x15c>
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d006      	beq.n	8003dfc <UART_SetConfig+0x168>
 8003dee:	e00b      	b.n	8003e08 <UART_SetConfig+0x174>
 8003df0:	2300      	movs	r3, #0
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e0f2      	b.n	8003fdc <UART_SetConfig+0x348>
 8003df6:	2302      	movs	r3, #2
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e0ef      	b.n	8003fdc <UART_SetConfig+0x348>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e0ec      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e02:	2308      	movs	r3, #8
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e0e9      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e0e6      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a56      	ldr	r2, [pc, #344]	@ (8003f6c <UART_SetConfig+0x2d8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d120      	bne.n	8003e5a <UART_SetConfig+0x1c6>
 8003e18:	4b51      	ldr	r3, [pc, #324]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e24:	d013      	beq.n	8003e4e <UART_SetConfig+0x1ba>
 8003e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e28:	d814      	bhi.n	8003e54 <UART_SetConfig+0x1c0>
 8003e2a:	2b80      	cmp	r3, #128	@ 0x80
 8003e2c:	d009      	beq.n	8003e42 <UART_SetConfig+0x1ae>
 8003e2e:	2b80      	cmp	r3, #128	@ 0x80
 8003e30:	d810      	bhi.n	8003e54 <UART_SetConfig+0x1c0>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <UART_SetConfig+0x1a8>
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d006      	beq.n	8003e48 <UART_SetConfig+0x1b4>
 8003e3a:	e00b      	b.n	8003e54 <UART_SetConfig+0x1c0>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e0cc      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e42:	2302      	movs	r3, #2
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e0c9      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e0c6      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e4e:	2308      	movs	r3, #8
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e0c3      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e54:	2310      	movs	r3, #16
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e0c0      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a44      	ldr	r2, [pc, #272]	@ (8003f70 <UART_SetConfig+0x2dc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d125      	bne.n	8003eb0 <UART_SetConfig+0x21c>
 8003e64:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e72:	d017      	beq.n	8003ea4 <UART_SetConfig+0x210>
 8003e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e78:	d817      	bhi.n	8003eaa <UART_SetConfig+0x216>
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e7e:	d00b      	beq.n	8003e98 <UART_SetConfig+0x204>
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e84:	d811      	bhi.n	8003eaa <UART_SetConfig+0x216>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <UART_SetConfig+0x1fe>
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8e:	d006      	beq.n	8003e9e <UART_SetConfig+0x20a>
 8003e90:	e00b      	b.n	8003eaa <UART_SetConfig+0x216>
 8003e92:	2300      	movs	r3, #0
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e0a1      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e09e      	b.n	8003fdc <UART_SetConfig+0x348>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e09b      	b.n	8003fdc <UART_SetConfig+0x348>
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e098      	b.n	8003fdc <UART_SetConfig+0x348>
 8003eaa:	2310      	movs	r3, #16
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e095      	b.n	8003fdc <UART_SetConfig+0x348>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f74 <UART_SetConfig+0x2e0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d125      	bne.n	8003f06 <UART_SetConfig+0x272>
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec8:	d017      	beq.n	8003efa <UART_SetConfig+0x266>
 8003eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ece:	d817      	bhi.n	8003f00 <UART_SetConfig+0x26c>
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed4:	d00b      	beq.n	8003eee <UART_SetConfig+0x25a>
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eda:	d811      	bhi.n	8003f00 <UART_SetConfig+0x26c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <UART_SetConfig+0x254>
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee4:	d006      	beq.n	8003ef4 <UART_SetConfig+0x260>
 8003ee6:	e00b      	b.n	8003f00 <UART_SetConfig+0x26c>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e076      	b.n	8003fdc <UART_SetConfig+0x348>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e073      	b.n	8003fdc <UART_SetConfig+0x348>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e070      	b.n	8003fdc <UART_SetConfig+0x348>
 8003efa:	2308      	movs	r3, #8
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e06d      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f00:	2310      	movs	r3, #16
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e06a      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f78 <UART_SetConfig+0x2e4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d138      	bne.n	8003f82 <UART_SetConfig+0x2ee>
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f1e:	d017      	beq.n	8003f50 <UART_SetConfig+0x2bc>
 8003f20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f24:	d82a      	bhi.n	8003f7c <UART_SetConfig+0x2e8>
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2a:	d00b      	beq.n	8003f44 <UART_SetConfig+0x2b0>
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f30:	d824      	bhi.n	8003f7c <UART_SetConfig+0x2e8>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <UART_SetConfig+0x2aa>
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3a:	d006      	beq.n	8003f4a <UART_SetConfig+0x2b6>
 8003f3c:	e01e      	b.n	8003f7c <UART_SetConfig+0x2e8>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e04b      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f44:	2302      	movs	r3, #2
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e048      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e045      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f50:	2308      	movs	r3, #8
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e042      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f56:	bf00      	nop
 8003f58:	efff69f3 	.word	0xefff69f3
 8003f5c:	40011000 	.word	0x40011000
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40004400 	.word	0x40004400
 8003f68:	40004800 	.word	0x40004800
 8003f6c:	40004c00 	.word	0x40004c00
 8003f70:	40005000 	.word	0x40005000
 8003f74:	40011400 	.word	0x40011400
 8003f78:	40007800 	.word	0x40007800
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e02c      	b.n	8003fdc <UART_SetConfig+0x348>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a72      	ldr	r2, [pc, #456]	@ (8004150 <UART_SetConfig+0x4bc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d125      	bne.n	8003fd8 <UART_SetConfig+0x344>
 8003f8c:	4b71      	ldr	r3, [pc, #452]	@ (8004154 <UART_SetConfig+0x4c0>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f9a:	d017      	beq.n	8003fcc <UART_SetConfig+0x338>
 8003f9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fa0:	d817      	bhi.n	8003fd2 <UART_SetConfig+0x33e>
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa6:	d00b      	beq.n	8003fc0 <UART_SetConfig+0x32c>
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fac:	d811      	bhi.n	8003fd2 <UART_SetConfig+0x33e>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <UART_SetConfig+0x326>
 8003fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb6:	d006      	beq.n	8003fc6 <UART_SetConfig+0x332>
 8003fb8:	e00b      	b.n	8003fd2 <UART_SetConfig+0x33e>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e00d      	b.n	8003fdc <UART_SetConfig+0x348>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e00a      	b.n	8003fdc <UART_SetConfig+0x348>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e007      	b.n	8003fdc <UART_SetConfig+0x348>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e004      	b.n	8003fdc <UART_SetConfig+0x348>
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e001      	b.n	8003fdc <UART_SetConfig+0x348>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe4:	d15b      	bne.n	800409e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d828      	bhi.n	800403e <UART_SetConfig+0x3aa>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0x360>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fe16 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800401c:	61b8      	str	r0, [r7, #24]
        break;
 800401e:	e013      	b.n	8004048 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fe26 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004024:	61b8      	str	r0, [r7, #24]
        break;
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b4b      	ldr	r3, [pc, #300]	@ (8004158 <UART_SetConfig+0x4c4>)
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e00c      	b.n	8004048 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7fe fd39 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8004032:	61b8      	str	r0, [r7, #24]
        break;
 8004034:	e008      	b.n	8004048 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	61bb      	str	r3, [r7, #24]
        break;
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	77bb      	strb	r3, [r7, #30]
        break;
 8004046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d074      	beq.n	8004138 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	005a      	lsls	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d916      	bls.n	8004098 <UART_SetConfig+0x404>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004070:	d212      	bcs.n	8004098 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f023 030f 	bic.w	r3, r3, #15
 800407a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	b29a      	uxth	r2, r3
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	4313      	orrs	r3, r2
 800408c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	89fa      	ldrh	r2, [r7, #14]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	e04f      	b.n	8004138 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77bb      	strb	r3, [r7, #30]
 800409c:	e04c      	b.n	8004138 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800409e:	7ffb      	ldrb	r3, [r7, #31]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d828      	bhi.n	80040f6 <UART_SetConfig+0x462>
 80040a4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ac <UART_SetConfig+0x418>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040f7 	.word	0x080040f7
 80040bc:	080040e7 	.word	0x080040e7
 80040c0:	080040f7 	.word	0x080040f7
 80040c4:	080040f7 	.word	0x080040f7
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	080040ef 	.word	0x080040ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7fe fdba 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 80040d4:	61b8      	str	r0, [r7, #24]
        break;
 80040d6:	e013      	b.n	8004100 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe fdca 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 80040dc:	61b8      	str	r0, [r7, #24]
        break;
 80040de:	e00f      	b.n	8004100 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <UART_SetConfig+0x4c4>)
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e00c      	b.n	8004100 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e6:	f7fe fcdd 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 80040ea:	61b8      	str	r0, [r7, #24]
        break;
 80040ec:	e008      	b.n	8004100 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f2:	61bb      	str	r3, [r7, #24]
        break;
 80040f4:	e004      	b.n	8004100 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	77bb      	strb	r3, [r7, #30]
        break;
 80040fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	085a      	lsrs	r2, r3, #1
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b0f      	cmp	r3, #15
 800411e:	d909      	bls.n	8004134 <UART_SetConfig+0x4a0>
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004126:	d205      	bcs.n	8004134 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	e001      	b.n	8004138 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004144:	7fbb      	ldrb	r3, [r7, #30]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40007c00 	.word	0x40007c00
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400

0800415c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800425a:	d10a      	bne.n	8004272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	@ 0x30
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b0:	f7fd fc7e 	bl	8001bb0 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d12e      	bne.n	8004322 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f83b 	bl	800434e <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d021      	beq.n	8004322 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e6      	bne.n	80042de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e011      	b.n	8004346 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3728      	adds	r7, #40	@ 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435e:	e04f      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d04b      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004368:	f7fd fc22 	bl	8001bb0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d302      	bcc.n	800437e <UART_WaitOnFlagUntilTimeout+0x30>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04e      	b.n	8004420 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d037      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b80      	cmp	r3, #128	@ 0x80
 8004394:	d034      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d031      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d110      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2208      	movs	r2, #8
 80043b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8fe 	bl	80045b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2208      	movs	r2, #8
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e029      	b.n	8004420 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043da:	d111      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8e4 	bl	80045b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e00f      	b.n	8004420 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	429a      	cmp	r2, r3
 800441c:	d0a0      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004428:	b480      	push	{r7}
 800442a:	b097      	sub	sp, #92	@ 0x5c
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d10e      	bne.n	800447a <UART_Start_Receive_IT+0x52>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <UART_Start_Receive_IT+0x48>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800446a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800446e:	e02d      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	22ff      	movs	r2, #255	@ 0xff
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004478:	e028      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <UART_Start_Receive_IT+0x76>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <UART_Start_Receive_IT+0x6c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22ff      	movs	r2, #255	@ 0xff
 800448e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004492:	e01b      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	227f      	movs	r2, #127	@ 0x7f
 8004498:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800449c:	e016      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044a6:	d10d      	bne.n	80044c4 <UART_Start_Receive_IT+0x9c>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <UART_Start_Receive_IT+0x92>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	227f      	movs	r2, #127	@ 0x7f
 80044b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044b8:	e008      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	223f      	movs	r2, #63	@ 0x3f
 80044be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044c2:	e003      	b.n	80044cc <UART_Start_Receive_IT+0xa4>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2222      	movs	r2, #34	@ 0x22
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004518:	d107      	bne.n	800452a <UART_Start_Receive_IT+0x102>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a21      	ldr	r2, [pc, #132]	@ (80045ac <UART_Start_Receive_IT+0x184>)
 8004526:	669a      	str	r2, [r3, #104]	@ 0x68
 8004528:	e002      	b.n	8004530 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <UART_Start_Receive_IT+0x188>)
 800452e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800454c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004556:	637b      	str	r3, [r7, #52]	@ 0x34
 8004558:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800455c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e6      	bne.n	8004538 <UART_Start_Receive_IT+0x110>
 800456a:	e018      	b.n	800459e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	653b      	str	r3, [r7, #80]	@ 0x50
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	61bb      	str	r3, [r7, #24]
   return(result);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e6      	bne.n	800456c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	375c      	adds	r7, #92	@ 0x5c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	080048a5 	.word	0x080048a5
 80045b0:	080046fd 	.word	0x080046fd

080045b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b095      	sub	sp, #84	@ 0x54
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045da:	643b      	str	r3, [r7, #64]	@ 0x40
 80045dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e6      	bne.n	80045bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800460e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e5      	bne.n	80045ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	2b01      	cmp	r3, #1
 8004628:	d118      	bne.n	800465c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60bb      	str	r3, [r7, #8]
   return(result);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0310 	bic.w	r3, r3, #16
 800463e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004670:	bf00      	nop
 8004672:	3754      	adds	r7, #84	@ 0x54
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fae4 	bl	8003c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	613b      	str	r3, [r7, #16]
   return(result);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e6      	bne.n	80046b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fab0 	bl	8003c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b09c      	sub	sp, #112	@ 0x70
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800470a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004714:	2b22      	cmp	r3, #34	@ 0x22
 8004716:	f040 80b9 	bne.w	800488c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004724:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004728:	b2d9      	uxtb	r1, r3
 800472a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800472e:	b2da      	uxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	400a      	ands	r2, r1
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 809c 	bne.w	800489c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004782:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004784:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e5      	bne.n	8004796 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d018      	beq.n	800481e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	623b      	str	r3, [r7, #32]
   return(result);
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
 800480c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e6      	bne.n	80047ec <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	2b01      	cmp	r3, #1
 8004824:	d12e      	bne.n	8004884 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	60fb      	str	r3, [r7, #12]
   return(result);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	617b      	str	r3, [r7, #20]
   return(result);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e6      	bne.n	800482c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b10      	cmp	r3, #16
 800486a:	d103      	bne.n	8004874 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff f9fd 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004882:	e00b      	b.n	800489c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fb5f 	bl	8000f48 <HAL_UART_RxCpltCallback>
}
 800488a:	e007      	b.n	800489c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	619a      	str	r2, [r3, #24]
}
 800489c:	bf00      	nop
 800489e:	3770      	adds	r7, #112	@ 0x70
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b09c      	sub	sp, #112	@ 0x70
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80048b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048bc:	2b22      	cmp	r3, #34	@ 0x22
 80048be:	f040 80b9 	bne.w	8004a34 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80048d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80048da:	4013      	ands	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 809c 	bne.w	8004a44 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800491a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800491c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004920:	667b      	str	r3, [r7, #100]	@ 0x64
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800492a:	657b      	str	r3, [r7, #84]	@ 0x54
 800492c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e6      	bne.n	800490c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	663b      	str	r3, [r7, #96]	@ 0x60
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800495e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d018      	beq.n	80049c6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e6      	bne.n	8004994 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d12e      	bne.n	8004a2c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0310 	bic.w	r3, r3, #16
 80049e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e6      	bne.n	80049d4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d103      	bne.n	8004a1c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2210      	movs	r2, #16
 8004a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff f929 	bl	8003c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a2a:	e00b      	b.n	8004a44 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc fa8b 	bl	8000f48 <HAL_UART_RxCpltCallback>
}
 8004a32:	e007      	b.n	8004a44 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	3770      	adds	r7, #112	@ 0x70
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5e:	2b84      	cmp	r3, #132	@ 0x84
 8004a60:	d005      	beq.n	8004a6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3303      	adds	r3, #3
 8004a6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a80:	f001 f83e 	bl	8005b00 <vTaskStartScheduler>
  
  return osOK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8c:	b089      	sub	sp, #36	@ 0x24
 8004a8e:	af04      	add	r7, sp, #16
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <osThreadCreate+0x54>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01c      	beq.n	8004ade <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685c      	ldr	r4, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691e      	ldr	r6, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ffc8 	bl	8004a4c <makeFreeRtosPriority>
 8004abc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ac6:	9202      	str	r2, [sp, #8]
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	9100      	str	r1, [sp, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4632      	mov	r2, r6
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 fdaa 	bl	800562c <xTaskCreateStatic>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e01c      	b.n	8004b18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685c      	ldr	r4, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004aea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ffaa 	bl	8004a4c <makeFreeRtosPriority>
 8004af8:	4602      	mov	r2, r0
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	9200      	str	r2, [sp, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	4632      	mov	r2, r6
 8004b06:	4629      	mov	r1, r5
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 fdf5 	bl	80056f8 <xTaskCreate>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <osDelay+0x16>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	e000      	b.n	8004b3a <osDelay+0x18>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 ffa8 	bl	8005a90 <vTaskDelay>
  
  return osOK;
 8004b40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f103 0208 	add.w	r2, r3, #8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f103 0208 	add.w	r2, r3, #8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d103      	bne.n	8004c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e00c      	b.n	8004c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e002      	b.n	8004c1a <vListInsert+0x2e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d2f6      	bcs.n	8004c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6892      	ldr	r2, [r2, #8]
 8004c74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6852      	ldr	r2, [r2, #4]
 8004c7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d103      	bne.n	8004c92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	b672      	cpsid	i
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	b662      	cpsie	i
 8004cdc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004ce4:	f001 fe7a 	bl	80069dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d14:	3b01      	subs	r3, #1
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	441a      	add	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	22ff      	movs	r2, #255	@ 0xff
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	22ff      	movs	r2, #255	@ 0xff
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d114      	bne.n	8004d64 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01a      	beq.n	8004d78 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3310      	adds	r3, #16
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f930 	bl	8005fac <xTaskRemoveFromEventList>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <xQueueGenericReset+0xd4>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	e009      	b.n	8004d78 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3310      	adds	r3, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff feee 	bl	8004b4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3324      	adds	r3, #36	@ 0x24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fee9 	bl	8004b4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d78:	f001 fe66 	bl	8006a48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d7c:	2301      	movs	r3, #1
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10d      	bne.n	8004dbc <xQueueGenericCreate+0x30>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	b672      	cpsid	i
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	b662      	cpsie	i
 8004db4:	613b      	str	r3, [r7, #16]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e004      	b.n	8004dd2 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3348      	adds	r3, #72	@ 0x48
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 ff2e 	bl	8006c38 <pvPortMalloc>
 8004ddc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d011      	beq.n	8004e08 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3348      	adds	r3, #72	@ 0x48
 8004dec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df6:	79fa      	ldrb	r2, [r7, #7]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f805 	bl	8004e12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e08:	69bb      	ldr	r3, [r7, #24]
	}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e002      	b.n	8004e34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e40:	2101      	movs	r1, #1
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f7ff ff36 	bl	8004cb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e70:	2300      	movs	r3, #0
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f81c 	bl	8004eb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	6978      	ldr	r0, [r7, #20]
 8004e9e:	f7ff ff75 	bl	8004d8c <xQueueGenericCreate>
 8004ea2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff ffd3 	bl	8004e50 <prvInitialiseMutex>

		return xNewQueue;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
	}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	@ 0x38
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10d      	bne.n	8004eec <xQueueGenericSend+0x38>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	b672      	cpsid	i
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	b662      	cpsie	i
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x46>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <xQueueGenericSend+0x4a>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericSend+0x4c>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10d      	bne.n	8004f20 <xQueueGenericSend+0x6c>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	b672      	cpsid	i
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	b662      	cpsie	i
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSend+0x7a>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <xQueueGenericSend+0x7e>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <xQueueGenericSend+0x80>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10d      	bne.n	8004f54 <xQueueGenericSend+0xa0>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	b672      	cpsid	i
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	b662      	cpsie	i
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f54:	f001 f9f2 	bl	800633c <xTaskGetSchedulerState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <xQueueGenericSend+0xb0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <xQueueGenericSend+0xb4>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <xQueueGenericSend+0xb6>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <xQueueGenericSend+0xd6>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	b672      	cpsid	i
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	b662      	cpsie	i
 8004f82:	61fb      	str	r3, [r7, #28]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f8a:	f001 fd27 	bl	80069dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <xQueueGenericSend+0xec>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d129      	bne.n	8004ff4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fa6:	f000 fa57 	bl	8005458 <prvCopyDataToQueue>
 8004faa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	3324      	adds	r3, #36	@ 0x24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fff7 	bl	8005fac <xTaskRemoveFromEventList>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80050c4 <xQueueGenericSend+0x210>)
 8004fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	e00a      	b.n	8004fec <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fdc:	4b39      	ldr	r3, [pc, #228]	@ (80050c4 <xQueueGenericSend+0x210>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fec:	f001 fd2c 	bl	8006a48 <vPortExitCritical>
				return pdPASS;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e063      	b.n	80050bc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ffa:	f001 fd25 	bl	8006a48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e05c      	b.n	80050bc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	4618      	mov	r0, r3
 800500e:	f001 f833 	bl	8006078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005016:	f001 fd17 	bl	8006a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800501a:	f000 fdd7 	bl	8005bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800501e:	f001 fcdd 	bl	80069dc <vPortEnterCritical>
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005028:	b25b      	sxtb	r3, r3
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d103      	bne.n	8005038 <xQueueGenericSend+0x184>
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800503e:	b25b      	sxtb	r3, r3
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d103      	bne.n	800504e <xQueueGenericSend+0x19a>
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800504e:	f001 fcfb 	bl	8006a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005052:	1d3a      	adds	r2, r7, #4
 8005054:	f107 0314 	add.w	r3, r7, #20
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f822 	bl	80060a4 <xTaskCheckForTimeOut>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d124      	bne.n	80050b0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005068:	f000 fac8 	bl	80055fc <prvIsQueueFull>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	3310      	adds	r3, #16
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f000 ff6e 	bl	8005f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005082:	f000 fa53 	bl	800552c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005086:	f000 fdaf 	bl	8005be8 <xTaskResumeAll>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af7c 	bne.w	8004f8a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <xQueueGenericSend+0x210>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	e772      	b.n	8004f8a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050a6:	f000 fa41 	bl	800552c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050aa:	f000 fd9d 	bl	8005be8 <xTaskResumeAll>
 80050ae:	e76c      	b.n	8004f8a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b2:	f000 fa3b 	bl	800552c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050b6:	f000 fd97 	bl	8005be8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3738      	adds	r7, #56	@ 0x38
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08e      	sub	sp, #56	@ 0x38
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	b672      	cpsid	i
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	b662      	cpsie	i
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <xQueueGiveFromISR+0x54>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	b672      	cpsid	i
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	b662      	cpsie	i
 8005114:	61fb      	str	r3, [r7, #28]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueGiveFromISR+0x64>
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <xQueueGiveFromISR+0x68>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <xQueueGiveFromISR+0x6a>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	b672      	cpsid	i
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	b662      	cpsie	i
 800514a:	61bb      	str	r3, [r7, #24]
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	e7fd      	b.n	800514e <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005152:	f001 fd2b 	bl	8006bac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005156:	f3ef 8211 	mrs	r2, BASEPRI
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	b672      	cpsid	i
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	b662      	cpsie	i
 800516e:	617a      	str	r2, [r7, #20]
 8005170:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005172:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005182:	429a      	cmp	r2, r3
 8005184:	d22b      	bcs.n	80051de <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005198:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d112      	bne.n	80051c8 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	3324      	adds	r3, #36	@ 0x24
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fefc 	bl	8005fac <xTaskRemoveFromEventList>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	b25a      	sxtb	r2, r3
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051d8:	2301      	movs	r3, #1
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
 80051dc:	e001      	b.n	80051e2 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3738      	adds	r7, #56	@ 0x38
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	@ 0x38
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	b672      	cpsid	i
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	b662      	cpsie	i
 8005228:	623b      	str	r3, [r7, #32]
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00d      	beq.n	8005254 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	b672      	cpsid	i
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	b662      	cpsie	i
 800524c:	61fb      	str	r3, [r7, #28]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005254:	f001 f872 	bl	800633c <xTaskGetSchedulerState>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <xQueueSemaphoreTake+0x6c>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <xQueueSemaphoreTake+0x70>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <xQueueSemaphoreTake+0x72>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	b672      	cpsid	i
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	b662      	cpsie	i
 8005282:	61bb      	str	r3, [r7, #24]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800528a:	f001 fba7 	bl	80069dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005292:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d024      	beq.n	80052e4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052aa:	f001 fa11 	bl	80066d0 <pvTaskIncrementMutexHeldCount>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00f      	beq.n	80052dc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	3310      	adds	r3, #16
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fe73 	bl	8005fac <xTaskRemoveFromEventList>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052cc:	4b55      	ldr	r3, [pc, #340]	@ (8005424 <xQueueSemaphoreTake+0x22c>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052dc:	f001 fbb4 	bl	8006a48 <vPortExitCritical>
				return pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e09a      	b.n	800541a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d114      	bne.n	8005314 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <xQueueSemaphoreTake+0x114>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	b672      	cpsid	i
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	b662      	cpsie	i
 8005304:	617b      	str	r3, [r7, #20]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800530c:	f001 fb9c 	bl	8006a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005310:	2300      	movs	r3, #0
 8005312:	e082      	b.n	800541a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	4618      	mov	r0, r3
 8005320:	f000 feaa 	bl	8006078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005328:	f001 fb8e 	bl	8006a48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532c:	f000 fc4e 	bl	8005bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005330:	f001 fb54 	bl	80069dc <vPortEnterCritical>
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <xQueueSemaphoreTake+0x152>
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d103      	bne.n	8005360 <xQueueSemaphoreTake+0x168>
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005360:	f001 fb72 	bl	8006a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005364:	463a      	mov	r2, r7
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fe99 	bl	80060a4 <xTaskCheckForTimeOut>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d132      	bne.n	80053de <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005378:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800537a:	f000 f929 	bl	80055d0 <prvIsQueueEmpty>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d026      	beq.n	80053d2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800538c:	f001 fb26 	bl	80069dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 ffef 	bl	8006378 <xTaskPriorityInherit>
 800539a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800539c:	f001 fb54 	bl	8006a48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	3324      	adds	r3, #36	@ 0x24
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fdd7 	bl	8005f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053b0:	f000 f8bc 	bl	800552c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053b4:	f000 fc18 	bl	8005be8 <xTaskResumeAll>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f47f af65 	bne.w	800528a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80053c0:	4b18      	ldr	r3, [pc, #96]	@ (8005424 <xQueueSemaphoreTake+0x22c>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	e75b      	b.n	800528a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053d4:	f000 f8aa 	bl	800552c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053d8:	f000 fc06 	bl	8005be8 <xTaskResumeAll>
 80053dc:	e755      	b.n	800528a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053e0:	f000 f8a4 	bl	800552c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053e4:	f000 fc00 	bl	8005be8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053ea:	f000 f8f1 	bl	80055d0 <prvIsQueueEmpty>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f43f af4a 	beq.w	800528a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80053fc:	f001 faee 	bl	80069dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005400:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005402:	f000 f811 	bl	8005428 <prvGetDisinheritPriorityAfterTimeout>
 8005406:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800540e:	4618      	mov	r0, r3
 8005410:	f001 f8be 	bl	8006590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005414:	f001 fb18 	bl	8006a48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800541a:	4618      	mov	r0, r3
 800541c:	3738      	adds	r7, #56	@ 0x38
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f1c3 0307 	rsb	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e001      	b.n	800544a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800544a:	68fb      	ldr	r3, [r7, #12]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d14d      	bne.n	800551a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fff8 	bl	8006478 <xTaskPriorityDisinherit>
 8005488:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	e043      	b.n	800551a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d119      	bne.n	80054cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6858      	ldr	r0, [r3, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	461a      	mov	r2, r3
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	f002 f8f3 	bl	800768e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	441a      	add	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d32b      	bcc.n	800551a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	e026      	b.n	800551a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68d8      	ldr	r0, [r3, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	461a      	mov	r2, r3
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	f002 f8d9 	bl	800768e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	425b      	negs	r3, r3
 80054e6:	441a      	add	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d207      	bcs.n	8005508 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005500:	425b      	negs	r3, r3
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d105      	bne.n	800551a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	3b01      	subs	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005522:	697b      	ldr	r3, [r7, #20]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005534:	f001 fa52 	bl	80069dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800553e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005540:	e011      	b.n	8005566 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d012      	beq.n	8005570 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3324      	adds	r3, #36	@ 0x24
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fd2c 	bl	8005fac <xTaskRemoveFromEventList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800555a:	f000 fe0b 	bl	8006174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	3b01      	subs	r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	dce9      	bgt.n	8005542 <prvUnlockQueue+0x16>
 800556e:	e000      	b.n	8005572 <prvUnlockQueue+0x46>
					break;
 8005570:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	22ff      	movs	r2, #255	@ 0xff
 8005576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800557a:	f001 fa65 	bl	8006a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800557e:	f001 fa2d 	bl	80069dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005588:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800558a:	e011      	b.n	80055b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d012      	beq.n	80055ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3310      	adds	r3, #16
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fd07 	bl	8005fac <xTaskRemoveFromEventList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055a4:	f000 fde6 	bl	8006174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dce9      	bgt.n	800558c <prvUnlockQueue+0x60>
 80055b8:	e000      	b.n	80055bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	22ff      	movs	r2, #255	@ 0xff
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80055c4:	f001 fa40 	bl	8006a48 <vPortExitCritical>
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055d8:	f001 fa00 	bl	80069dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e001      	b.n	80055ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ee:	f001 fa2b 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 80055f2:	68fb      	ldr	r3, [r7, #12]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005604:	f001 f9ea 	bl	80069dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	429a      	cmp	r2, r3
 8005612:	d102      	bne.n	800561a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e001      	b.n	800561e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800561e:	f001 fa13 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08e      	sub	sp, #56	@ 0x38
 8005630:	af04      	add	r7, sp, #16
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <xTaskCreateStatic+0x30>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	b672      	cpsid	i
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	b662      	cpsie	i
 8005654:	623b      	str	r3, [r7, #32]
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <xTaskCreateStatic+0x52>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	b672      	cpsid	i
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	b662      	cpsie	i
 8005676:	61fb      	str	r3, [r7, #28]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567e:	2354      	movs	r3, #84	@ 0x54
 8005680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b54      	cmp	r3, #84	@ 0x54
 8005686:	d00d      	beq.n	80056a4 <xTaskCreateStatic+0x78>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	b672      	cpsid	i
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	b662      	cpsie	i
 800569c:	61bb      	str	r3, [r7, #24]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01e      	beq.n	80056ea <xTaskCreateStatic+0xbe>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01b      	beq.n	80056ea <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056c4:	2300      	movs	r3, #0
 80056c6:	9303      	str	r3, [sp, #12]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f850 	bl	8005782 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056e4:	f000 f8d8 	bl	8005898 <prvAddNewTaskToReadyList>
 80056e8:	e001      	b.n	80056ee <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056ee:	697b      	ldr	r3, [r7, #20]
	}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3728      	adds	r7, #40	@ 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4618      	mov	r0, r3
 800570e:	f001 fa93 	bl	8006c38 <pvPortMalloc>
 8005712:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800571a:	2054      	movs	r0, #84	@ 0x54
 800571c:	f001 fa8c 	bl	8006c38 <pvPortMalloc>
 8005720:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
 800572e:	e005      	b.n	800573c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f001 fb4f 	bl	8006dd4 <vPortFree>
 8005736:	e001      	b.n	800573c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	2300      	movs	r3, #0
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	9302      	str	r3, [sp, #8]
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f80e 	bl	8005782 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005766:	69f8      	ldr	r0, [r7, #28]
 8005768:	f000 f896 	bl	8005898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e002      	b.n	8005778 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295
 8005776:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005778:	69bb      	ldr	r3, [r7, #24]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800579a:	440b      	add	r3, r1
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f023 0307 	bic.w	r3, r3, #7
 80057a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	b672      	cpsid	i
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	b662      	cpsie	i
 80057c8:	617b      	str	r3, [r7, #20]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e012      	b.n	8005802 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	3334      	adds	r3, #52	@ 0x34
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9e9      	bls.n	80057dc <prvInitialiseNewTask+0x5a>
 8005808:	e000      	b.n	800580c <prvInitialiseNewTask+0x8a>
			{
				break;
 800580a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005814:	e003      	b.n	800581e <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	2b06      	cmp	r3, #6
 8005822:	d901      	bls.n	8005828 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005824:	2306      	movs	r3, #6
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f9a3 	bl	8004b8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f99e 	bl	8004b8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	f1c3 0207 	rsb	r2, r3, #7
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	69b8      	ldr	r0, [r7, #24]
 8005878:	f000 ffa4 	bl	80067c4 <pxPortInitialiseStack>
 800587c:	4602      	mov	r2, r0
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800588e:	bf00      	nop
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058a0:	f001 f89c 	bl	80069dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <prvAddNewTaskToReadyList+0xb8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a29      	ldr	r2, [pc, #164]	@ (8005950 <prvAddNewTaskToReadyList+0xb8>)
 80058ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ae:	4b29      	ldr	r3, [pc, #164]	@ (8005954 <prvAddNewTaskToReadyList+0xbc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b6:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <prvAddNewTaskToReadyList+0xbc>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058bc:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <prvAddNewTaskToReadyList+0xb8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d110      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c4:	f000 fc7a 	bl	80061bc <prvInitialiseTaskLists>
 80058c8:	e00d      	b.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ca:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <prvAddNewTaskToReadyList+0xc0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058d2:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <prvAddNewTaskToReadyList+0xbc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005954 <prvAddNewTaskToReadyList+0xbc>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e6:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <prvAddNewTaskToReadyList+0xc4>)
 80058ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	2201      	movs	r2, #1
 80058f6:	409a      	lsls	r2, r3
 80058f8:	4b19      	ldr	r3, [pc, #100]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <prvAddNewTaskToReadyList+0xc8>)
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <prvAddNewTaskToReadyList+0xcc>)
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7ff f943 	bl	8004ba4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800591e:	f001 f893 	bl	8006a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005922:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <prvAddNewTaskToReadyList+0xc0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <prvAddNewTaskToReadyList+0xbc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d207      	bcs.n	8005948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005938:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <prvAddNewTaskToReadyList+0xd0>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200007e0 	.word	0x200007e0
 8005954:	200006e0 	.word	0x200006e0
 8005958:	200007ec 	.word	0x200007ec
 800595c:	200007fc 	.word	0x200007fc
 8005960:	200007e8 	.word	0x200007e8
 8005964:	200006e4 	.word	0x200006e4
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005974:	f001 f832 	bl	80069dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <vTaskDelete+0x18>
 800597e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a68 <vTaskDelete+0xfc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	e000      	b.n	8005986 <vTaskDelete+0x1a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff f966 	bl	8004c5e <uxListRemove>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	4933      	ldr	r1, [pc, #204]	@ (8005a6c <vTaskDelete+0x100>)
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <vTaskDelete+0x58>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	2201      	movs	r2, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43da      	mvns	r2, r3
 80059ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005a70 <vTaskDelete+0x104>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4013      	ands	r3, r2
 80059c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <vTaskDelete+0x104>)
 80059c2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff f944 	bl	8004c5e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80059d6:	4b27      	ldr	r3, [pc, #156]	@ (8005a74 <vTaskDelete+0x108>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	4a25      	ldr	r2, [pc, #148]	@ (8005a74 <vTaskDelete+0x108>)
 80059de:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80059e0:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <vTaskDelete+0xfc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3304      	adds	r3, #4
 80059ee:	4619      	mov	r1, r3
 80059f0:	4821      	ldr	r0, [pc, #132]	@ (8005a78 <vTaskDelete+0x10c>)
 80059f2:	f7ff f8d7 	bl	8004ba4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80059f6:	4b21      	ldr	r3, [pc, #132]	@ (8005a7c <vTaskDelete+0x110>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <vTaskDelete+0x110>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e009      	b.n	8005a16 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005a02:	4b1f      	ldr	r3, [pc, #124]	@ (8005a80 <vTaskDelete+0x114>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <vTaskDelete+0x114>)
 8005a0a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fc43 	bl	8006298 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005a12:	f000 fc73 	bl	80062fc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005a16:	f001 f817 	bl	8006a48 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <vTaskDelete+0x118>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01e      	beq.n	8005a60 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8005a22:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <vTaskDelete+0xfc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d119      	bne.n	8005a60 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a2c:	4b16      	ldr	r3, [pc, #88]	@ (8005a88 <vTaskDelete+0x11c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <vTaskDelete+0xe4>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	b672      	cpsid	i
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	b662      	cpsie	i
 8005a48:	60bb      	str	r3, [r7, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8005a50:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <vTaskDelete+0x120>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200006e0 	.word	0x200006e0
 8005a6c:	200006e4 	.word	0x200006e4
 8005a70:	200007e8 	.word	0x200007e8
 8005a74:	200007fc 	.word	0x200007fc
 8005a78:	200007b4 	.word	0x200007b4
 8005a7c:	200007c8 	.word	0x200007c8
 8005a80:	200007e0 	.word	0x200007e0
 8005a84:	200007ec 	.word	0x200007ec
 8005a88:	20000808 	.word	0x20000808
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01a      	beq.n	8005ad8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <vTaskDelay+0x68>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <vTaskDelay+0x36>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	b672      	cpsid	i
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	b662      	cpsie	i
 8005abe:	60bb      	str	r3, [r7, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ac6:	f000 f881 	bl	8005bcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aca:	2100      	movs	r1, #0
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fe13 	bl	80066f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ad2:	f000 f889 	bl	8005be8 <xTaskResumeAll>
 8005ad6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005ade:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <vTaskDelay+0x6c>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000808 	.word	0x20000808
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b0e:	463a      	mov	r2, r7
 8005b10:	1d39      	adds	r1, r7, #4
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fd42 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	9202      	str	r2, [sp, #8]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	460a      	mov	r2, r1
 8005b2e:	4921      	ldr	r1, [pc, #132]	@ (8005bb4 <vTaskStartScheduler+0xb4>)
 8005b30:	4821      	ldr	r0, [pc, #132]	@ (8005bb8 <vTaskStartScheduler+0xb8>)
 8005b32:	f7ff fd7b 	bl	800562c <xTaskCreateStatic>
 8005b36:	4603      	mov	r3, r0
 8005b38:	4a20      	ldr	r2, [pc, #128]	@ (8005bbc <vTaskStartScheduler+0xbc>)
 8005b3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bbc <vTaskStartScheduler+0xbc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e001      	b.n	8005b4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d118      	bne.n	8005b86 <vTaskStartScheduler+0x86>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b58:	b672      	cpsid	i
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	b662      	cpsie	i
 8005b68:	613b      	str	r3, [r7, #16]
}
 8005b6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6c:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <vTaskStartScheduler+0xc0>)
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b74:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <vTaskStartScheduler+0xc4>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b7a:	4b13      	ldr	r3, [pc, #76]	@ (8005bc8 <vTaskStartScheduler+0xc8>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b80:	f000 feae 	bl	80068e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b84:	e011      	b.n	8005baa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d10d      	bne.n	8005baa <vTaskStartScheduler+0xaa>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	b672      	cpsid	i
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	b662      	cpsie	i
 8005ba2:	60fb      	str	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <vTaskStartScheduler+0xa6>
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0800872c 	.word	0x0800872c
 8005bb8:	0800618d 	.word	0x0800618d
 8005bbc:	20000804 	.word	0x20000804
 8005bc0:	20000800 	.word	0x20000800
 8005bc4:	200007ec 	.word	0x200007ec
 8005bc8:	200007e4 	.word	0x200007e4

08005bcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bd0:	4b04      	ldr	r3, [pc, #16]	@ (8005be4 <vTaskSuspendAll+0x18>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a03      	ldr	r2, [pc, #12]	@ (8005be4 <vTaskSuspendAll+0x18>)
 8005bd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20000808 	.word	0x20000808

08005be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bf6:	4b43      	ldr	r3, [pc, #268]	@ (8005d04 <xTaskResumeAll+0x11c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <xTaskResumeAll+0x32>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	603b      	str	r3, [r7, #0]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c1a:	f000 fedf 	bl	80069dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c1e:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <xTaskResumeAll+0x11c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	4a37      	ldr	r2, [pc, #220]	@ (8005d04 <xTaskResumeAll+0x11c>)
 8005c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c28:	4b36      	ldr	r3, [pc, #216]	@ (8005d04 <xTaskResumeAll+0x11c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d161      	bne.n	8005cf4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c30:	4b35      	ldr	r3, [pc, #212]	@ (8005d08 <xTaskResumeAll+0x120>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d05d      	beq.n	8005cf4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c38:	e02e      	b.n	8005c98 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3a:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <xTaskResumeAll+0x124>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3318      	adds	r3, #24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff f809 	bl	8004c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff f804 	bl	8004c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d10 <xTaskResumeAll+0x128>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <xTaskResumeAll+0x128>)
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4a27      	ldr	r2, [pc, #156]	@ (8005d14 <xTaskResumeAll+0x12c>)
 8005c76:	441a      	add	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7fe ff90 	bl	8004ba4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	4b23      	ldr	r3, [pc, #140]	@ (8005d18 <xTaskResumeAll+0x130>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005c92:	4b22      	ldr	r3, [pc, #136]	@ (8005d1c <xTaskResumeAll+0x134>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c98:	4b1c      	ldr	r3, [pc, #112]	@ (8005d0c <xTaskResumeAll+0x124>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1cc      	bne.n	8005c3a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ca6:	f000 fb29 	bl	80062fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005caa:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <xTaskResumeAll+0x138>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cb6:	f000 f837 	bl	8005d28 <xTaskIncrementTick>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005cc0:	4b16      	ldr	r3, [pc, #88]	@ (8005d1c <xTaskResumeAll+0x134>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f1      	bne.n	8005cb6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005cd2:	4b13      	ldr	r3, [pc, #76]	@ (8005d20 <xTaskResumeAll+0x138>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cd8:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <xTaskResumeAll+0x134>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <xTaskResumeAll+0x13c>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cf4:	f000 fea8 	bl	8006a48 <vPortExitCritical>

	return xAlreadyYielded;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000808 	.word	0x20000808
 8005d08:	200007e0 	.word	0x200007e0
 8005d0c:	200007a0 	.word	0x200007a0
 8005d10:	200007e8 	.word	0x200007e8
 8005d14:	200006e4 	.word	0x200006e4
 8005d18:	200006e0 	.word	0x200006e0
 8005d1c:	200007f4 	.word	0x200007f4
 8005d20:	200007f0 	.word	0x200007f0
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b50      	ldr	r3, [pc, #320]	@ (8005e74 <xTaskIncrementTick+0x14c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 808b 	bne.w	8005e52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e78 <xTaskIncrementTick+0x150>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d44:	4a4c      	ldr	r2, [pc, #304]	@ (8005e78 <xTaskIncrementTick+0x150>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d123      	bne.n	8005d98 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d50:	4b4a      	ldr	r3, [pc, #296]	@ (8005e7c <xTaskIncrementTick+0x154>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	b672      	cpsid	i
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	b662      	cpsie	i
 8005d6e:	603b      	str	r3, [r7, #0]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <xTaskIncrementTick+0x4a>
 8005d76:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <xTaskIncrementTick+0x154>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	4b40      	ldr	r3, [pc, #256]	@ (8005e80 <xTaskIncrementTick+0x158>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3e      	ldr	r2, [pc, #248]	@ (8005e7c <xTaskIncrementTick+0x154>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4a3e      	ldr	r2, [pc, #248]	@ (8005e80 <xTaskIncrementTick+0x158>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e84 <xTaskIncrementTick+0x15c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a3c      	ldr	r2, [pc, #240]	@ (8005e84 <xTaskIncrementTick+0x15c>)
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	f000 fab2 	bl	80062fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d98:	4b3b      	ldr	r3, [pc, #236]	@ (8005e88 <xTaskIncrementTick+0x160>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d348      	bcc.n	8005e34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <xTaskIncrementTick+0x154>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	4b36      	ldr	r3, [pc, #216]	@ (8005e88 <xTaskIncrementTick+0x160>)
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	601a      	str	r2, [r3, #0]
					break;
 8005db4:	e03e      	b.n	8005e34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db6:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <xTaskIncrementTick+0x154>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d203      	bcs.n	8005dd6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dce:	4a2e      	ldr	r2, [pc, #184]	@ (8005e88 <xTaskIncrementTick+0x160>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dd4:	e02e      	b.n	8005e34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe ff3f 	bl	8004c5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3318      	adds	r3, #24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe ff36 	bl	8004c5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	4b24      	ldr	r3, [pc, #144]	@ (8005e8c <xTaskIncrementTick+0x164>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	4a22      	ldr	r2, [pc, #136]	@ (8005e8c <xTaskIncrementTick+0x164>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <xTaskIncrementTick+0x168>)
 8005e12:	441a      	add	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe fec2 	bl	8004ba4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e24:	4b1b      	ldr	r3, [pc, #108]	@ (8005e94 <xTaskIncrementTick+0x16c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d3b9      	bcc.n	8005da2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e32:	e7b6      	b.n	8005da2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e34:	4b17      	ldr	r3, [pc, #92]	@ (8005e94 <xTaskIncrementTick+0x16c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3a:	4915      	ldr	r1, [pc, #84]	@ (8005e90 <xTaskIncrementTick+0x168>)
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d907      	bls.n	8005e5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e004      	b.n	8005e5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e52:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <xTaskIncrementTick+0x170>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	4a0f      	ldr	r2, [pc, #60]	@ (8005e98 <xTaskIncrementTick+0x170>)
 8005e5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e9c <xTaskIncrementTick+0x174>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e68:	697b      	ldr	r3, [r7, #20]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000808 	.word	0x20000808
 8005e78:	200007e4 	.word	0x200007e4
 8005e7c:	20000798 	.word	0x20000798
 8005e80:	2000079c 	.word	0x2000079c
 8005e84:	200007f8 	.word	0x200007f8
 8005e88:	20000800 	.word	0x20000800
 8005e8c:	200007e8 	.word	0x200007e8
 8005e90:	200006e4 	.word	0x200006e4
 8005e94:	200006e0 	.word	0x200006e0
 8005e98:	200007f0 	.word	0x200007f0
 8005e9c:	200007f4 	.word	0x200007f4

08005ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea6:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <vTaskSwitchContext+0xa8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eae:	4b27      	ldr	r3, [pc, #156]	@ (8005f4c <vTaskSwitchContext+0xac>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb4:	e042      	b.n	8005f3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005eb6:	4b25      	ldr	r3, [pc, #148]	@ (8005f4c <vTaskSwitchContext+0xac>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b24      	ldr	r3, [pc, #144]	@ (8005f50 <vTaskSwitchContext+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	fab3 f383 	clz	r3, r3
 8005ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	f1c3 031f 	rsb	r3, r3, #31
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	4920      	ldr	r1, [pc, #128]	@ (8005f54 <vTaskSwitchContext+0xb4>)
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10d      	bne.n	8005f02 <vTaskSwitchContext+0x62>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	b672      	cpsid	i
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	b662      	cpsie	i
 8005efa:	607b      	str	r3, [r7, #4]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <vTaskSwitchContext+0x5e>
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a11      	ldr	r2, [pc, #68]	@ (8005f54 <vTaskSwitchContext+0xb4>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3308      	adds	r3, #8
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d104      	bne.n	8005f32 <vTaskSwitchContext+0x92>
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4a07      	ldr	r2, [pc, #28]	@ (8005f58 <vTaskSwitchContext+0xb8>)
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20000808 	.word	0x20000808
 8005f4c:	200007f4 	.word	0x200007f4
 8005f50:	200007e8 	.word	0x200007e8
 8005f54:	200006e4 	.word	0x200006e4
 8005f58:	200006e0 	.word	0x200006e0

08005f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <vTaskPlaceOnEventList+0x4c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3318      	adds	r3, #24
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fe fe2b 	bl	8004bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f96:	2101      	movs	r1, #1
 8005f98:	6838      	ldr	r0, [r7, #0]
 8005f9a:	f000 fbad 	bl	80066f8 <prvAddCurrentTaskToDelayedList>
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200006e0 	.word	0x200006e0

08005fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10d      	bne.n	8005fde <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc6:	b672      	cpsid	i
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	b662      	cpsie	i
 8005fd6:	60fb      	str	r3, [r7, #12]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fe3b 	bl	8004c5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8006060 <xTaskRemoveFromEventList+0xb4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11c      	bne.n	800602a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fe32 	bl	8004c5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <xTaskRemoveFromEventList+0xb8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4313      	orrs	r3, r2
 8006008:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <xTaskRemoveFromEventList+0xb8>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4a13      	ldr	r2, [pc, #76]	@ (8006068 <xTaskRemoveFromEventList+0xbc>)
 800601a:	441a      	add	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fe fdbe 	bl	8004ba4 <vListInsertEnd>
 8006028:	e005      	b.n	8006036 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	3318      	adds	r3, #24
 800602e:	4619      	mov	r1, r3
 8006030:	480e      	ldr	r0, [pc, #56]	@ (800606c <xTaskRemoveFromEventList+0xc0>)
 8006032:	f7fe fdb7 	bl	8004ba4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <xTaskRemoveFromEventList+0xc4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	429a      	cmp	r2, r3
 8006042:	d905      	bls.n	8006050 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006048:	4b0a      	ldr	r3, [pc, #40]	@ (8006074 <xTaskRemoveFromEventList+0xc8>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e001      	b.n	8006054 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006054:	697b      	ldr	r3, [r7, #20]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000808 	.word	0x20000808
 8006064:	200007e8 	.word	0x200007e8
 8006068:	200006e4 	.word	0x200006e4
 800606c:	200007a0 	.word	0x200007a0
 8006070:	200006e0 	.word	0x200006e0
 8006074:	200007f4 	.word	0x200007f4

08006078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <vTaskInternalSetTimeOutState+0x24>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <vTaskInternalSetTimeOutState+0x28>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	200007f8 	.word	0x200007f8
 80060a0:	200007e4 	.word	0x200007e4

080060a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	613b      	str	r3, [r7, #16]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	b672      	cpsid	i
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	b662      	cpsie	i
 80060ea:	60fb      	str	r3, [r7, #12]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80060f2:	f000 fc73 	bl	80069dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060f6:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <xTaskCheckForTimeOut+0xc8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d102      	bne.n	8006116 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e023      	b.n	800615e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <xTaskCheckForTimeOut+0xcc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d007      	beq.n	8006132 <xTaskCheckForTimeOut+0x8e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	e015      	b.n	800615e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	429a      	cmp	r2, r3
 800613a:	d20b      	bcs.n	8006154 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff ff95 	bl	8006078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e004      	b.n	800615e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800615e:	f000 fc73 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 8006162:	69fb      	ldr	r3, [r7, #28]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	200007e4 	.word	0x200007e4
 8006170:	200007f8 	.word	0x200007f8

08006174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006178:	4b03      	ldr	r3, [pc, #12]	@ (8006188 <vTaskMissedYield+0x14>)
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	200007f4 	.word	0x200007f4

0800618c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006194:	f000 f852 	bl	800623c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <prvIdleTask+0x28>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d9f9      	bls.n	8006194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <prvIdleTask+0x2c>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061b0:	e7f0      	b.n	8006194 <prvIdleTask+0x8>
 80061b2:	bf00      	nop
 80061b4:	200006e4 	.word	0x200006e4
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
 80061c6:	e00c      	b.n	80061e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4a12      	ldr	r2, [pc, #72]	@ (800621c <prvInitialiseTaskLists+0x60>)
 80061d4:	4413      	add	r3, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fcb7 	bl	8004b4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3301      	adds	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	d9ef      	bls.n	80061c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061e8:	480d      	ldr	r0, [pc, #52]	@ (8006220 <prvInitialiseTaskLists+0x64>)
 80061ea:	f7fe fcae 	bl	8004b4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ee:	480d      	ldr	r0, [pc, #52]	@ (8006224 <prvInitialiseTaskLists+0x68>)
 80061f0:	f7fe fcab 	bl	8004b4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061f4:	480c      	ldr	r0, [pc, #48]	@ (8006228 <prvInitialiseTaskLists+0x6c>)
 80061f6:	f7fe fca8 	bl	8004b4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061fa:	480c      	ldr	r0, [pc, #48]	@ (800622c <prvInitialiseTaskLists+0x70>)
 80061fc:	f7fe fca5 	bl	8004b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006200:	480b      	ldr	r0, [pc, #44]	@ (8006230 <prvInitialiseTaskLists+0x74>)
 8006202:	f7fe fca2 	bl	8004b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006206:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <prvInitialiseTaskLists+0x78>)
 8006208:	4a05      	ldr	r2, [pc, #20]	@ (8006220 <prvInitialiseTaskLists+0x64>)
 800620a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800620c:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <prvInitialiseTaskLists+0x7c>)
 800620e:	4a05      	ldr	r2, [pc, #20]	@ (8006224 <prvInitialiseTaskLists+0x68>)
 8006210:	601a      	str	r2, [r3, #0]
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200006e4 	.word	0x200006e4
 8006220:	20000770 	.word	0x20000770
 8006224:	20000784 	.word	0x20000784
 8006228:	200007a0 	.word	0x200007a0
 800622c:	200007b4 	.word	0x200007b4
 8006230:	200007cc 	.word	0x200007cc
 8006234:	20000798 	.word	0x20000798
 8006238:	2000079c 	.word	0x2000079c

0800623c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006242:	e019      	b.n	8006278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006244:	f000 fbca 	bl	80069dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	4b10      	ldr	r3, [pc, #64]	@ (800628c <prvCheckTasksWaitingTermination+0x50>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe fd02 	bl	8004c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800625a:	4b0d      	ldr	r3, [pc, #52]	@ (8006290 <prvCheckTasksWaitingTermination+0x54>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3b01      	subs	r3, #1
 8006260:	4a0b      	ldr	r2, [pc, #44]	@ (8006290 <prvCheckTasksWaitingTermination+0x54>)
 8006262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006264:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <prvCheckTasksWaitingTermination+0x58>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3b01      	subs	r3, #1
 800626a:	4a0a      	ldr	r2, [pc, #40]	@ (8006294 <prvCheckTasksWaitingTermination+0x58>)
 800626c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800626e:	f000 fbeb 	bl	8006a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f810 	bl	8006298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <prvCheckTasksWaitingTermination+0x58>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e1      	bne.n	8006244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	200007b4 	.word	0x200007b4
 8006290:	200007e0 	.word	0x200007e0
 8006294:	200007c8 	.word	0x200007c8

08006298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d108      	bne.n	80062bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fd90 	bl	8006dd4 <vPortFree>
				vPortFree( pxTCB );
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fd8d 	bl	8006dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ba:	e01b      	b.n	80062f4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d103      	bne.n	80062ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fd84 	bl	8006dd4 <vPortFree>
	}
 80062cc:	e012      	b.n	80062f4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d00d      	beq.n	80062f4 <prvDeleteTCB+0x5c>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	b672      	cpsid	i
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	b662      	cpsie	i
 80062ec:	60fb      	str	r3, [r7, #12]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <prvDeleteTCB+0x58>
	}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006302:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <prvResetNextTaskUnblockTime+0x38>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800630c:	4b0a      	ldr	r3, [pc, #40]	@ (8006338 <prvResetNextTaskUnblockTime+0x3c>)
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006314:	e008      	b.n	8006328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <prvResetNextTaskUnblockTime+0x38>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a04      	ldr	r2, [pc, #16]	@ (8006338 <prvResetNextTaskUnblockTime+0x3c>)
 8006326:	6013      	str	r3, [r2, #0]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000798 	.word	0x20000798
 8006338:	20000800 	.word	0x20000800

0800633c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006342:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <xTaskGetSchedulerState+0x34>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800634a:	2301      	movs	r3, #1
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	e008      	b.n	8006362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006350:	4b08      	ldr	r3, [pc, #32]	@ (8006374 <xTaskGetSchedulerState+0x38>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006358:	2302      	movs	r3, #2
 800635a:	607b      	str	r3, [r7, #4]
 800635c:	e001      	b.n	8006362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006362:	687b      	ldr	r3, [r7, #4]
	}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	200007ec 	.word	0x200007ec
 8006374:	20000808 	.word	0x20000808

08006378 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d069      	beq.n	8006462 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006392:	4b36      	ldr	r3, [pc, #216]	@ (800646c <xTaskPriorityInherit+0xf4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d259      	bcs.n	8006450 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db06      	blt.n	80063b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	4b31      	ldr	r3, [pc, #196]	@ (800646c <xTaskPriorityInherit+0xf4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	f1c3 0207 	rsb	r2, r3, #7
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006470 <xTaskPriorityInherit+0xf8>)
 80063c4:	4413      	add	r3, r2
 80063c6:	4299      	cmp	r1, r3
 80063c8:	d13a      	bne.n	8006440 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fc45 	bl	8004c5e <uxListRemove>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d115      	bne.n	8006406 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063de:	4924      	ldr	r1, [pc, #144]	@ (8006470 <xTaskPriorityInherit+0xf8>)
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <xTaskPriorityInherit+0x8e>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	2201      	movs	r2, #1
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43da      	mvns	r2, r3
 80063fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006474 <xTaskPriorityInherit+0xfc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4013      	ands	r3, r2
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <xTaskPriorityInherit+0xfc>)
 8006404:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006406:	4b19      	ldr	r3, [pc, #100]	@ (800646c <xTaskPriorityInherit+0xf4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	2201      	movs	r2, #1
 8006416:	409a      	lsls	r2, r3
 8006418:	4b16      	ldr	r3, [pc, #88]	@ (8006474 <xTaskPriorityInherit+0xfc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <xTaskPriorityInherit+0xfc>)
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a10      	ldr	r2, [pc, #64]	@ (8006470 <xTaskPriorityInherit+0xf8>)
 8006430:	441a      	add	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7fe fbb3 	bl	8004ba4 <vListInsertEnd>
 800643e:	e004      	b.n	800644a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006440:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <xTaskPriorityInherit+0xf4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e008      	b.n	8006462 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006454:	4b05      	ldr	r3, [pc, #20]	@ (800646c <xTaskPriorityInherit+0xf4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d201      	bcs.n	8006462 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006462:	68fb      	ldr	r3, [r7, #12]
	}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200006e0 	.word	0x200006e0
 8006470:	200006e4 	.word	0x200006e4
 8006474:	200007e8 	.word	0x200007e8

08006478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d074      	beq.n	8006578 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800648e:	4b3d      	ldr	r3, [pc, #244]	@ (8006584 <xTaskPriorityDisinherit+0x10c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	d00d      	beq.n	80064b4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	b672      	cpsid	i
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	b662      	cpsie	i
 80064ac:	60fb      	str	r3, [r7, #12]
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	b672      	cpsid	i
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	b662      	cpsie	i
 80064d0:	60bb      	str	r3, [r7, #8]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d044      	beq.n	8006578 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d140      	bne.n	8006578 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fbaf 	bl	8004c5e <uxListRemove>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d115      	bne.n	8006532 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	491f      	ldr	r1, [pc, #124]	@ (8006588 <xTaskPriorityDisinherit+0x110>)
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTaskPriorityDisinherit+0xba>
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006520:	2201      	movs	r2, #1
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43da      	mvns	r2, r3
 8006528:	4b18      	ldr	r3, [pc, #96]	@ (800658c <xTaskPriorityDisinherit+0x114>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4013      	ands	r3, r2
 800652e:	4a17      	ldr	r2, [pc, #92]	@ (800658c <xTaskPriorityDisinherit+0x114>)
 8006530:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	f1c3 0207 	rsb	r2, r3, #7
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	2201      	movs	r2, #1
 800654c:	409a      	lsls	r2, r3
 800654e:	4b0f      	ldr	r3, [pc, #60]	@ (800658c <xTaskPriorityDisinherit+0x114>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4313      	orrs	r3, r2
 8006554:	4a0d      	ldr	r2, [pc, #52]	@ (800658c <xTaskPriorityDisinherit+0x114>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a08      	ldr	r2, [pc, #32]	@ (8006588 <xTaskPriorityDisinherit+0x110>)
 8006566:	441a      	add	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fe fb18 	bl	8004ba4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006578:	697b      	ldr	r3, [r7, #20]
	}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	200006e0 	.word	0x200006e0
 8006588:	200006e4 	.word	0x200006e4
 800658c:	200007e8 	.word	0x200007e8

08006590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8089 	beq.w	80066bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10d      	bne.n	80065ce <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	60fb      	str	r3, [r7, #12]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d902      	bls.n	80065de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e002      	b.n	80065e4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d066      	beq.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d161      	bne.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065f8:	4b32      	ldr	r3, [pc, #200]	@ (80066c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d10d      	bne.n	800661e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	b672      	cpsid	i
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	b662      	cpsie	i
 8006616:	60bb      	str	r3, [r7, #8]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	db04      	blt.n	800663c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f1c3 0207 	rsb	r2, r3, #7
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	6959      	ldr	r1, [r3, #20]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4a1f      	ldr	r2, [pc, #124]	@ (80066c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800664c:	4413      	add	r3, r2
 800664e:	4299      	cmp	r1, r3
 8006650:	d134      	bne.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fb01 	bl	8004c5e <uxListRemove>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d115      	bne.n	800668e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006666:	4918      	ldr	r1, [pc, #96]	@ (80066c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43da      	mvns	r2, r3
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4013      	ands	r3, r2
 800668a:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800668c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	4b0d      	ldr	r3, [pc, #52]	@ (80066cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4313      	orrs	r3, r2
 800669c:	4a0b      	ldr	r2, [pc, #44]	@ (80066cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a06      	ldr	r2, [pc, #24]	@ (80066c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80066ae:	441a      	add	r2, r3
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe fa74 	bl	8004ba4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066bc:	bf00      	nop
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200006e0 	.word	0x200006e0
 80066c8:	200006e4 	.word	0x200006e4
 80066cc:	200007e8 	.word	0x200007e8

080066d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066d4:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066dc:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066e2:	3201      	adds	r2, #1
 80066e4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80066e6:	4b03      	ldr	r3, [pc, #12]	@ (80066f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80066e8:	681b      	ldr	r3, [r3, #0]
	}
 80066ea:	4618      	mov	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	200006e0 	.word	0x200006e0

080066f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006702:	4b29      	ldr	r3, [pc, #164]	@ (80067a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3304      	adds	r3, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe faa5 	bl	8004c5e <uxListRemove>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800671a:	4b24      	ldr	r3, [pc, #144]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	2201      	movs	r2, #1
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43da      	mvns	r2, r3
 8006728:	4b21      	ldr	r3, [pc, #132]	@ (80067b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4013      	ands	r3, r2
 800672e:	4a20      	ldr	r2, [pc, #128]	@ (80067b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d10a      	bne.n	8006750 <prvAddCurrentTaskToDelayedList+0x58>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006740:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	481a      	ldr	r0, [pc, #104]	@ (80067b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800674a:	f7fe fa2b 	bl	8004ba4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800674e:	e026      	b.n	800679e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006758:	4b14      	ldr	r3, [pc, #80]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	429a      	cmp	r2, r3
 8006766:	d209      	bcs.n	800677c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006768:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	4b0f      	ldr	r3, [pc, #60]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7fe fa39 	bl	8004bec <vListInsert>
}
 800677a:	e010      	b.n	800679e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677c:	4b0f      	ldr	r3, [pc, #60]	@ (80067bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe fa2f 	bl	8004bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	429a      	cmp	r2, r3
 8006796:	d202      	bcs.n	800679e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006798:	4a09      	ldr	r2, [pc, #36]	@ (80067c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6013      	str	r3, [r2, #0]
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200007e4 	.word	0x200007e4
 80067ac:	200006e0 	.word	0x200006e0
 80067b0:	200007e8 	.word	0x200007e8
 80067b4:	200007cc 	.word	0x200007cc
 80067b8:	2000079c 	.word	0x2000079c
 80067bc:	20000798 	.word	0x20000798
 80067c0:	20000800 	.word	0x20000800

080067c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b04      	subs	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006828 <pxPortInitialiseStack+0x64>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b14      	subs	r3, #20
 80067fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b04      	subs	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f06f 0202 	mvn.w	r2, #2
 8006812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b20      	subs	r3, #32
 8006818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	0800682d 	.word	0x0800682d

0800682c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006836:	4b15      	ldr	r3, [pc, #84]	@ (800688c <prvTaskExitError+0x60>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d00d      	beq.n	800685c <prvTaskExitError+0x30>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006844:	b672      	cpsid	i
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	b662      	cpsie	i
 8006854:	60fb      	str	r3, [r7, #12]
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <prvTaskExitError+0x2c>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	b672      	cpsid	i
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	b662      	cpsie	i
 8006870:	60bb      	str	r3, [r7, #8]
}
 8006872:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006874:	bf00      	nop
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0fc      	beq.n	8006876 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000014 	.word	0x20000014

08006890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <pxCurrentTCBConst2>)
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	6808      	ldr	r0, [r1, #0]
 8006896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	f380 8809 	msr	PSP, r0
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	4770      	bx	lr
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst2>:
 80068b0:	200006e0 	.word	0x200006e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068b8:	4808      	ldr	r0, [pc, #32]	@ (80068dc <prvPortStartFirstTask+0x24>)
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f380 8808 	msr	MSP, r0
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8814 	msr	CONTROL, r0
 80068ca:	b662      	cpsie	i
 80068cc:	b661      	cpsie	f
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	df00      	svc	0
 80068d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068da:	bf00      	nop
 80068dc:	e000ed08 	.word	0xe000ed08

080068e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068e6:	4b37      	ldr	r3, [pc, #220]	@ (80069c4 <xPortStartScheduler+0xe4>)
 80068e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	22ff      	movs	r2, #255	@ 0xff
 80068f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b2f      	ldr	r3, [pc, #188]	@ (80069c8 <xPortStartScheduler+0xe8>)
 800690c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800690e:	4b2f      	ldr	r3, [pc, #188]	@ (80069cc <xPortStartScheduler+0xec>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006914:	e009      	b.n	800692a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006916:	4b2d      	ldr	r3, [pc, #180]	@ (80069cc <xPortStartScheduler+0xec>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	4a2b      	ldr	r2, [pc, #172]	@ (80069cc <xPortStartScheduler+0xec>)
 800691e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006932:	2b80      	cmp	r3, #128	@ 0x80
 8006934:	d0ef      	beq.n	8006916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006936:	4b25      	ldr	r3, [pc, #148]	@ (80069cc <xPortStartScheduler+0xec>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1c3 0307 	rsb	r3, r3, #7
 800693e:	2b04      	cmp	r3, #4
 8006940:	d00d      	beq.n	800695e <xPortStartScheduler+0x7e>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	60bb      	str	r3, [r7, #8]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800695e:	4b1b      	ldr	r3, [pc, #108]	@ (80069cc <xPortStartScheduler+0xec>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	4a19      	ldr	r2, [pc, #100]	@ (80069cc <xPortStartScheduler+0xec>)
 8006966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <xPortStartScheduler+0xec>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006970:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <xPortStartScheduler+0xec>)
 8006972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800697c:	4b14      	ldr	r3, [pc, #80]	@ (80069d0 <xPortStartScheduler+0xf0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a13      	ldr	r2, [pc, #76]	@ (80069d0 <xPortStartScheduler+0xf0>)
 8006982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <xPortStartScheduler+0xf0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a10      	ldr	r2, [pc, #64]	@ (80069d0 <xPortStartScheduler+0xf0>)
 800698e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006994:	f000 f8dc 	bl	8006b50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006998:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <xPortStartScheduler+0xf4>)
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800699e:	f000 f8fb 	bl	8006b98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <xPortStartScheduler+0xf8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a0c      	ldr	r2, [pc, #48]	@ (80069d8 <xPortStartScheduler+0xf8>)
 80069a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ae:	f7ff ff83 	bl	80068b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069b2:	f7ff fa75 	bl	8005ea0 <vTaskSwitchContext>
	prvTaskExitError();
 80069b6:	f7ff ff39 	bl	800682c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	e000e400 	.word	0xe000e400
 80069c8:	2000080c 	.word	0x2000080c
 80069cc:	20000810 	.word	0x20000810
 80069d0:	e000ed20 	.word	0xe000ed20
 80069d4:	20000014 	.word	0x20000014
 80069d8:	e000ef34 	.word	0xe000ef34

080069dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	b672      	cpsid	i
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	b662      	cpsie	i
 80069f6:	607b      	str	r3, [r7, #4]
}
 80069f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069fa:	4b11      	ldr	r3, [pc, #68]	@ (8006a40 <vPortEnterCritical+0x64>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	4a0f      	ldr	r2, [pc, #60]	@ (8006a40 <vPortEnterCritical+0x64>)
 8006a02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a04:	4b0e      	ldr	r3, [pc, #56]	@ (8006a40 <vPortEnterCritical+0x64>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d112      	bne.n	8006a32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <vPortEnterCritical+0x68>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <vPortEnterCritical+0x56>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	b672      	cpsid	i
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	b662      	cpsie	i
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	e7fd      	b.n	8006a2e <vPortEnterCritical+0x52>
	}
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000014 	.word	0x20000014
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a4e:	4b13      	ldr	r3, [pc, #76]	@ (8006a9c <vPortExitCritical+0x54>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <vPortExitCritical+0x2a>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	b672      	cpsid	i
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	b662      	cpsie	i
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <vPortExitCritical+0x54>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <vPortExitCritical+0x54>)
 8006a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a7c:	4b07      	ldr	r3, [pc, #28]	@ (8006a9c <vPortExitCritical+0x54>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <vPortExitCritical+0x48>
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	20000014 	.word	0x20000014

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f01e 0f10 	tst.w	lr, #16
 8006ab0:	bf08      	it	eq
 8006ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ac4:	b672      	cpsid	i
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	b662      	cpsie	i
 8006ad4:	f7ff f9e4 	bl	8005ea0 <vTaskSwitchContext>
 8006ad8:	f04f 0000 	mov.w	r0, #0
 8006adc:	f380 8811 	msr	BASEPRI, r0
 8006ae0:	bc09      	pop	{r0, r3}
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f01e 0f10 	tst.w	lr, #16
 8006aee:	bf08      	it	eq
 8006af0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006af4:	f380 8809 	msr	PSP, r0
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <pxCurrentTCBConst>:
 8006b00:	200006e0 	.word	0x200006e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	607b      	str	r3, [r7, #4]
}
 8006b24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b26:	f7ff f8ff 	bl	8005d28 <xTaskIncrementTick>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b30:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <xPortSysTickHandler+0x44>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f383 8811 	msr	BASEPRI, r3
}
 8006b42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b54:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <vPortSetupTimerInterrupt+0x34>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <vPortSetupTimerInterrupt+0x38>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <vPortSetupTimerInterrupt+0x3c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a0a      	ldr	r2, [pc, #40]	@ (8006b90 <vPortSetupTimerInterrupt+0x40>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	099b      	lsrs	r3, r3, #6
 8006b6c:	4a09      	ldr	r2, [pc, #36]	@ (8006b94 <vPortSetupTimerInterrupt+0x44>)
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b72:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <vPortSetupTimerInterrupt+0x34>)
 8006b74:	2207      	movs	r2, #7
 8006b76:	601a      	str	r2, [r3, #0]
}
 8006b78:	bf00      	nop
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	e000e010 	.word	0xe000e010
 8006b88:	e000e018 	.word	0xe000e018
 8006b8c:	20000008 	.word	0x20000008
 8006b90:	10624dd3 	.word	0x10624dd3
 8006b94:	e000e014 	.word	0xe000e014

08006b98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ba8 <vPortEnableVFP+0x10>
 8006b9c:	6801      	ldr	r1, [r0, #0]
 8006b9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ba2:	6001      	str	r1, [r0, #0]
 8006ba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ba6:	bf00      	nop
 8006ba8:	e000ed88 	.word	0xe000ed88

08006bac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bb2:	f3ef 8305 	mrs	r3, IPSR
 8006bb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d917      	bls.n	8006bee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006c28 <vPortValidateInterruptPriority+0x7c>)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bc8:	4b18      	ldr	r3, [pc, #96]	@ (8006c2c <vPortValidateInterruptPriority+0x80>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	7afa      	ldrb	r2, [r7, #11]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20d      	bcs.n	8006bee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	b672      	cpsid	i
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	b662      	cpsie	i
 8006be6:	607b      	str	r3, [r7, #4]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bee:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <vPortValidateInterruptPriority+0x84>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <vPortValidateInterruptPriority+0x88>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d90d      	bls.n	8006c1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	b672      	cpsid	i
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	b662      	cpsie	i
 8006c12:	603b      	str	r3, [r7, #0]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <vPortValidateInterruptPriority+0x6a>
	}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	e000e3f0 	.word	0xe000e3f0
 8006c2c:	2000080c 	.word	0x2000080c
 8006c30:	e000ed0c 	.word	0xe000ed0c
 8006c34:	20000810 	.word	0x20000810

08006c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c44:	f7fe ffc2 	bl	8005bcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c48:	4b5d      	ldr	r3, [pc, #372]	@ (8006dc0 <pvPortMalloc+0x188>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c50:	f000 f920 	bl	8006e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c54:	4b5b      	ldr	r3, [pc, #364]	@ (8006dc4 <pvPortMalloc+0x18c>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 8094 	bne.w	8006d8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d020      	beq.n	8006caa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006c68:	2208      	movs	r2, #8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f023 0307 	bic.w	r3, r3, #7
 8006c80:	3308      	adds	r3, #8
 8006c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <pvPortMalloc+0x72>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	b672      	cpsid	i
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	b662      	cpsie	i
 8006ca2:	617b      	str	r3, [r7, #20]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d06c      	beq.n	8006d8a <pvPortMalloc+0x152>
 8006cb0:	4b45      	ldr	r3, [pc, #276]	@ (8006dc8 <pvPortMalloc+0x190>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d867      	bhi.n	8006d8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cba:	4b44      	ldr	r3, [pc, #272]	@ (8006dcc <pvPortMalloc+0x194>)
 8006cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cbe:	4b43      	ldr	r3, [pc, #268]	@ (8006dcc <pvPortMalloc+0x194>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc4:	e004      	b.n	8006cd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d903      	bls.n	8006ce2 <pvPortMalloc+0xaa>
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f1      	bne.n	8006cc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ce2:	4b37      	ldr	r3, [pc, #220]	@ (8006dc0 <pvPortMalloc+0x188>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d04e      	beq.n	8006d8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	4413      	add	r3, r2
 8006cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	1ad2      	subs	r2, r2, r3
 8006d06:	2308      	movs	r3, #8
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d922      	bls.n	8006d54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <pvPortMalloc+0x104>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	613b      	str	r3, [r7, #16]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d4e:	69b8      	ldr	r0, [r7, #24]
 8006d50:	f000 f902 	bl	8006f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d54:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc8 <pvPortMalloc+0x190>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc8 <pvPortMalloc+0x190>)
 8006d60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d62:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <pvPortMalloc+0x190>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd0 <pvPortMalloc+0x198>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d203      	bcs.n	8006d76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d6e:	4b16      	ldr	r3, [pc, #88]	@ (8006dc8 <pvPortMalloc+0x190>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <pvPortMalloc+0x198>)
 8006d74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	4b12      	ldr	r3, [pc, #72]	@ (8006dc4 <pvPortMalloc+0x18c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d8a:	f7fe ff2d 	bl	8005be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <pvPortMalloc+0x17c>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	b672      	cpsid	i
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	b662      	cpsie	i
 8006dac:	60fb      	str	r3, [r7, #12]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <pvPortMalloc+0x178>
	return pvReturn;
 8006db4:	69fb      	ldr	r3, [r7, #28]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3728      	adds	r7, #40	@ 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000441c 	.word	0x2000441c
 8006dc4:	20004428 	.word	0x20004428
 8006dc8:	20004420 	.word	0x20004420
 8006dcc:	20004414 	.word	0x20004414
 8006dd0:	20004424 	.word	0x20004424

08006dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d04e      	beq.n	8006e84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006de6:	2308      	movs	r3, #8
 8006de8:	425b      	negs	r3, r3
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <vPortFree+0xb8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <vPortFree+0x4a>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	60fb      	str	r3, [r7, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <vPortFree+0x6e>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	b672      	cpsid	i
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	b662      	cpsie	i
 8006e3a:	60bb      	str	r3, [r7, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <vPortFree+0xb8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <vPortFree+0xb8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e68:	f7fe feb0 	bl	8005bcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <vPortFree+0xbc>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	4a06      	ldr	r2, [pc, #24]	@ (8006e90 <vPortFree+0xbc>)
 8006e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f000 f86c 	bl	8006f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e80:	f7fe feb2 	bl	8005be8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20004428 	.word	0x20004428
 8006e90:	20004420 	.word	0x20004420

08006e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea0:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <prvHeapInit+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f40 <prvHeapInit+0xac>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8006f44 <prvHeapInit+0xb0>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f44 <prvHeapInit+0xb0>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	@ (8006f48 <prvHeapInit+0xb4>)
 8006ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <prvHeapInit+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efe:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	@ (8006f48 <prvHeapInit+0xb4>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	@ (8006f4c <prvHeapInit+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a09      	ldr	r2, [pc, #36]	@ (8006f50 <prvHeapInit+0xbc>)
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f2c:	4b09      	ldr	r3, [pc, #36]	@ (8006f54 <prvHeapInit+0xc0>)
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000814 	.word	0x20000814
 8006f44:	20004414 	.word	0x20004414
 8006f48:	2000441c 	.word	0x2000441c
 8006f4c:	20004424 	.word	0x20004424
 8006f50:	20004420 	.word	0x20004420
 8006f54:	20004428 	.word	0x20004428

08006f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f60:	4b28      	ldr	r3, [pc, #160]	@ (8007004 <prvInsertBlockIntoFreeList+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e002      	b.n	8006f6c <prvInsertBlockIntoFreeList+0x14>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8f7      	bhi.n	8006f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d108      	bne.n	8006f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d118      	bne.n	8006fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b15      	ldr	r3, [pc, #84]	@ (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00d      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e008      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d002      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20004414 	.word	0x20004414
 8007008:	2000441c 	.word	0x2000441c

0800700c <atoi>:
 800700c:	220a      	movs	r2, #10
 800700e:	2100      	movs	r1, #0
 8007010:	f000 b87a 	b.w	8007108 <strtol>

08007014 <_strtol_l.constprop.0>:
 8007014:	2b24      	cmp	r3, #36	@ 0x24
 8007016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701a:	4686      	mov	lr, r0
 800701c:	4690      	mov	r8, r2
 800701e:	d801      	bhi.n	8007024 <_strtol_l.constprop.0+0x10>
 8007020:	2b01      	cmp	r3, #1
 8007022:	d106      	bne.n	8007032 <_strtol_l.constprop.0+0x1e>
 8007024:	f000 fb06 	bl	8007634 <__errno>
 8007028:	2316      	movs	r3, #22
 800702a:	6003      	str	r3, [r0, #0]
 800702c:	2000      	movs	r0, #0
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	4834      	ldr	r0, [pc, #208]	@ (8007104 <_strtol_l.constprop.0+0xf0>)
 8007034:	460d      	mov	r5, r1
 8007036:	462a      	mov	r2, r5
 8007038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800703c:	5d06      	ldrb	r6, [r0, r4]
 800703e:	f016 0608 	ands.w	r6, r6, #8
 8007042:	d1f8      	bne.n	8007036 <_strtol_l.constprop.0+0x22>
 8007044:	2c2d      	cmp	r4, #45	@ 0x2d
 8007046:	d12d      	bne.n	80070a4 <_strtol_l.constprop.0+0x90>
 8007048:	782c      	ldrb	r4, [r5, #0]
 800704a:	2601      	movs	r6, #1
 800704c:	1c95      	adds	r5, r2, #2
 800704e:	f033 0210 	bics.w	r2, r3, #16
 8007052:	d109      	bne.n	8007068 <_strtol_l.constprop.0+0x54>
 8007054:	2c30      	cmp	r4, #48	@ 0x30
 8007056:	d12a      	bne.n	80070ae <_strtol_l.constprop.0+0x9a>
 8007058:	782a      	ldrb	r2, [r5, #0]
 800705a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800705e:	2a58      	cmp	r2, #88	@ 0x58
 8007060:	d125      	bne.n	80070ae <_strtol_l.constprop.0+0x9a>
 8007062:	786c      	ldrb	r4, [r5, #1]
 8007064:	2310      	movs	r3, #16
 8007066:	3502      	adds	r5, #2
 8007068:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800706c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007070:	2200      	movs	r2, #0
 8007072:	fbbc f9f3 	udiv	r9, ip, r3
 8007076:	4610      	mov	r0, r2
 8007078:	fb03 ca19 	mls	sl, r3, r9, ip
 800707c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007080:	2f09      	cmp	r7, #9
 8007082:	d81b      	bhi.n	80070bc <_strtol_l.constprop.0+0xa8>
 8007084:	463c      	mov	r4, r7
 8007086:	42a3      	cmp	r3, r4
 8007088:	dd27      	ble.n	80070da <_strtol_l.constprop.0+0xc6>
 800708a:	1c57      	adds	r7, r2, #1
 800708c:	d007      	beq.n	800709e <_strtol_l.constprop.0+0x8a>
 800708e:	4581      	cmp	r9, r0
 8007090:	d320      	bcc.n	80070d4 <_strtol_l.constprop.0+0xc0>
 8007092:	d101      	bne.n	8007098 <_strtol_l.constprop.0+0x84>
 8007094:	45a2      	cmp	sl, r4
 8007096:	db1d      	blt.n	80070d4 <_strtol_l.constprop.0+0xc0>
 8007098:	fb00 4003 	mla	r0, r0, r3, r4
 800709c:	2201      	movs	r2, #1
 800709e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070a2:	e7eb      	b.n	800707c <_strtol_l.constprop.0+0x68>
 80070a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80070a6:	bf04      	itt	eq
 80070a8:	782c      	ldrbeq	r4, [r5, #0]
 80070aa:	1c95      	addeq	r5, r2, #2
 80070ac:	e7cf      	b.n	800704e <_strtol_l.constprop.0+0x3a>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1da      	bne.n	8007068 <_strtol_l.constprop.0+0x54>
 80070b2:	2c30      	cmp	r4, #48	@ 0x30
 80070b4:	bf0c      	ite	eq
 80070b6:	2308      	moveq	r3, #8
 80070b8:	230a      	movne	r3, #10
 80070ba:	e7d5      	b.n	8007068 <_strtol_l.constprop.0+0x54>
 80070bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80070c0:	2f19      	cmp	r7, #25
 80070c2:	d801      	bhi.n	80070c8 <_strtol_l.constprop.0+0xb4>
 80070c4:	3c37      	subs	r4, #55	@ 0x37
 80070c6:	e7de      	b.n	8007086 <_strtol_l.constprop.0+0x72>
 80070c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80070cc:	2f19      	cmp	r7, #25
 80070ce:	d804      	bhi.n	80070da <_strtol_l.constprop.0+0xc6>
 80070d0:	3c57      	subs	r4, #87	@ 0x57
 80070d2:	e7d8      	b.n	8007086 <_strtol_l.constprop.0+0x72>
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	e7e1      	b.n	800709e <_strtol_l.constprop.0+0x8a>
 80070da:	1c53      	adds	r3, r2, #1
 80070dc:	d108      	bne.n	80070f0 <_strtol_l.constprop.0+0xdc>
 80070de:	2322      	movs	r3, #34	@ 0x22
 80070e0:	f8ce 3000 	str.w	r3, [lr]
 80070e4:	4660      	mov	r0, ip
 80070e6:	f1b8 0f00 	cmp.w	r8, #0
 80070ea:	d0a0      	beq.n	800702e <_strtol_l.constprop.0+0x1a>
 80070ec:	1e69      	subs	r1, r5, #1
 80070ee:	e006      	b.n	80070fe <_strtol_l.constprop.0+0xea>
 80070f0:	b106      	cbz	r6, 80070f4 <_strtol_l.constprop.0+0xe0>
 80070f2:	4240      	negs	r0, r0
 80070f4:	f1b8 0f00 	cmp.w	r8, #0
 80070f8:	d099      	beq.n	800702e <_strtol_l.constprop.0+0x1a>
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d1f6      	bne.n	80070ec <_strtol_l.constprop.0+0xd8>
 80070fe:	f8c8 1000 	str.w	r1, [r8]
 8007102:	e794      	b.n	800702e <_strtol_l.constprop.0+0x1a>
 8007104:	0800874d 	.word	0x0800874d

08007108 <strtol>:
 8007108:	4613      	mov	r3, r2
 800710a:	460a      	mov	r2, r1
 800710c:	4601      	mov	r1, r0
 800710e:	4802      	ldr	r0, [pc, #8]	@ (8007118 <strtol+0x10>)
 8007110:	6800      	ldr	r0, [r0, #0]
 8007112:	f7ff bf7f 	b.w	8007014 <_strtol_l.constprop.0>
 8007116:	bf00      	nop
 8007118:	20000024 	.word	0x20000024

0800711c <std>:
 800711c:	2300      	movs	r3, #0
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	e9c0 3300 	strd	r3, r3, [r0]
 8007126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800712a:	6083      	str	r3, [r0, #8]
 800712c:	8181      	strh	r1, [r0, #12]
 800712e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007130:	81c2      	strh	r2, [r0, #14]
 8007132:	6183      	str	r3, [r0, #24]
 8007134:	4619      	mov	r1, r3
 8007136:	2208      	movs	r2, #8
 8007138:	305c      	adds	r0, #92	@ 0x5c
 800713a:	f000 fa2d 	bl	8007598 <memset>
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <std+0x58>)
 8007140:	6263      	str	r3, [r4, #36]	@ 0x24
 8007142:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <std+0x5c>)
 8007144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <std+0x60>)
 8007148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <std+0x64>)
 800714c:	6323      	str	r3, [r4, #48]	@ 0x30
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <std+0x68>)
 8007150:	6224      	str	r4, [r4, #32]
 8007152:	429c      	cmp	r4, r3
 8007154:	d006      	beq.n	8007164 <std+0x48>
 8007156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800715a:	4294      	cmp	r4, r2
 800715c:	d002      	beq.n	8007164 <std+0x48>
 800715e:	33d0      	adds	r3, #208	@ 0xd0
 8007160:	429c      	cmp	r4, r3
 8007162:	d105      	bne.n	8007170 <std+0x54>
 8007164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716c:	f000 ba8c 	b.w	8007688 <__retarget_lock_init_recursive>
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	080073e9 	.word	0x080073e9
 8007178:	0800740b 	.word	0x0800740b
 800717c:	08007443 	.word	0x08007443
 8007180:	08007467 	.word	0x08007467
 8007184:	2000442c 	.word	0x2000442c

08007188 <stdio_exit_handler>:
 8007188:	4a02      	ldr	r2, [pc, #8]	@ (8007194 <stdio_exit_handler+0xc>)
 800718a:	4903      	ldr	r1, [pc, #12]	@ (8007198 <stdio_exit_handler+0x10>)
 800718c:	4803      	ldr	r0, [pc, #12]	@ (800719c <stdio_exit_handler+0x14>)
 800718e:	f000 b869 	b.w	8007264 <_fwalk_sglue>
 8007192:	bf00      	nop
 8007194:	20000018 	.word	0x20000018
 8007198:	080081f5 	.word	0x080081f5
 800719c:	20000028 	.word	0x20000028

080071a0 <cleanup_stdio>:
 80071a0:	6841      	ldr	r1, [r0, #4]
 80071a2:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <cleanup_stdio+0x34>)
 80071a4:	4299      	cmp	r1, r3
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	d001      	beq.n	80071b0 <cleanup_stdio+0x10>
 80071ac:	f001 f822 	bl	80081f4 <_fflush_r>
 80071b0:	68a1      	ldr	r1, [r4, #8]
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <cleanup_stdio+0x38>)
 80071b4:	4299      	cmp	r1, r3
 80071b6:	d002      	beq.n	80071be <cleanup_stdio+0x1e>
 80071b8:	4620      	mov	r0, r4
 80071ba:	f001 f81b 	bl	80081f4 <_fflush_r>
 80071be:	68e1      	ldr	r1, [r4, #12]
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <cleanup_stdio+0x3c>)
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d004      	beq.n	80071d0 <cleanup_stdio+0x30>
 80071c6:	4620      	mov	r0, r4
 80071c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071cc:	f001 b812 	b.w	80081f4 <_fflush_r>
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	2000442c 	.word	0x2000442c
 80071d8:	20004494 	.word	0x20004494
 80071dc:	200044fc 	.word	0x200044fc

080071e0 <global_stdio_init.part.0>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <global_stdio_init.part.0+0x30>)
 80071e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007214 <global_stdio_init.part.0+0x34>)
 80071e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007218 <global_stdio_init.part.0+0x38>)
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	4620      	mov	r0, r4
 80071ec:	2200      	movs	r2, #0
 80071ee:	2104      	movs	r1, #4
 80071f0:	f7ff ff94 	bl	800711c <std>
 80071f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071f8:	2201      	movs	r2, #1
 80071fa:	2109      	movs	r1, #9
 80071fc:	f7ff ff8e 	bl	800711c <std>
 8007200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007204:	2202      	movs	r2, #2
 8007206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720a:	2112      	movs	r1, #18
 800720c:	f7ff bf86 	b.w	800711c <std>
 8007210:	20004564 	.word	0x20004564
 8007214:	2000442c 	.word	0x2000442c
 8007218:	08007189 	.word	0x08007189

0800721c <__sfp_lock_acquire>:
 800721c:	4801      	ldr	r0, [pc, #4]	@ (8007224 <__sfp_lock_acquire+0x8>)
 800721e:	f000 ba34 	b.w	800768a <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	2000456d 	.word	0x2000456d

08007228 <__sfp_lock_release>:
 8007228:	4801      	ldr	r0, [pc, #4]	@ (8007230 <__sfp_lock_release+0x8>)
 800722a:	f000 ba2f 	b.w	800768c <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	2000456d 	.word	0x2000456d

08007234 <__sinit>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f7ff fff0 	bl	800721c <__sfp_lock_acquire>
 800723c:	6a23      	ldr	r3, [r4, #32]
 800723e:	b11b      	cbz	r3, 8007248 <__sinit+0x14>
 8007240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007244:	f7ff bff0 	b.w	8007228 <__sfp_lock_release>
 8007248:	4b04      	ldr	r3, [pc, #16]	@ (800725c <__sinit+0x28>)
 800724a:	6223      	str	r3, [r4, #32]
 800724c:	4b04      	ldr	r3, [pc, #16]	@ (8007260 <__sinit+0x2c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f5      	bne.n	8007240 <__sinit+0xc>
 8007254:	f7ff ffc4 	bl	80071e0 <global_stdio_init.part.0>
 8007258:	e7f2      	b.n	8007240 <__sinit+0xc>
 800725a:	bf00      	nop
 800725c:	080071a1 	.word	0x080071a1
 8007260:	20004564 	.word	0x20004564

08007264 <_fwalk_sglue>:
 8007264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007268:	4607      	mov	r7, r0
 800726a:	4688      	mov	r8, r1
 800726c:	4614      	mov	r4, r2
 800726e:	2600      	movs	r6, #0
 8007270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007274:	f1b9 0901 	subs.w	r9, r9, #1
 8007278:	d505      	bpl.n	8007286 <_fwalk_sglue+0x22>
 800727a:	6824      	ldr	r4, [r4, #0]
 800727c:	2c00      	cmp	r4, #0
 800727e:	d1f7      	bne.n	8007270 <_fwalk_sglue+0xc>
 8007280:	4630      	mov	r0, r6
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d907      	bls.n	800729c <_fwalk_sglue+0x38>
 800728c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007290:	3301      	adds	r3, #1
 8007292:	d003      	beq.n	800729c <_fwalk_sglue+0x38>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	47c0      	blx	r8
 800729a:	4306      	orrs	r6, r0
 800729c:	3568      	adds	r5, #104	@ 0x68
 800729e:	e7e9      	b.n	8007274 <_fwalk_sglue+0x10>

080072a0 <iprintf>:
 80072a0:	b40f      	push	{r0, r1, r2, r3}
 80072a2:	b507      	push	{r0, r1, r2, lr}
 80072a4:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <iprintf+0x20>)
 80072a6:	ab04      	add	r3, sp, #16
 80072a8:	6808      	ldr	r0, [r1, #0]
 80072aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ae:	6881      	ldr	r1, [r0, #8]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	f000 fc75 	bl	8007ba0 <_vfiprintf_r>
 80072b6:	b003      	add	sp, #12
 80072b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072bc:	b004      	add	sp, #16
 80072be:	4770      	bx	lr
 80072c0:	20000024 	.word	0x20000024

080072c4 <_puts_r>:
 80072c4:	6a03      	ldr	r3, [r0, #32]
 80072c6:	b570      	push	{r4, r5, r6, lr}
 80072c8:	6884      	ldr	r4, [r0, #8]
 80072ca:	4605      	mov	r5, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	b90b      	cbnz	r3, 80072d4 <_puts_r+0x10>
 80072d0:	f7ff ffb0 	bl	8007234 <__sinit>
 80072d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d405      	bmi.n	80072e6 <_puts_r+0x22>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	0598      	lsls	r0, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_puts_r+0x22>
 80072e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072e2:	f000 f9d2 	bl	800768a <__retarget_lock_acquire_recursive>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	0719      	lsls	r1, r3, #28
 80072ea:	d502      	bpl.n	80072f2 <_puts_r+0x2e>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d135      	bne.n	800735e <_puts_r+0x9a>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f8f9 	bl	80074ec <__swsetup_r>
 80072fa:	b380      	cbz	r0, 800735e <_puts_r+0x9a>
 80072fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007302:	07da      	lsls	r2, r3, #31
 8007304:	d405      	bmi.n	8007312 <_puts_r+0x4e>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d402      	bmi.n	8007312 <_puts_r+0x4e>
 800730c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730e:	f000 f9bd 	bl	800768c <__retarget_lock_release_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	2b00      	cmp	r3, #0
 8007318:	da04      	bge.n	8007324 <_puts_r+0x60>
 800731a:	69a2      	ldr	r2, [r4, #24]
 800731c:	429a      	cmp	r2, r3
 800731e:	dc17      	bgt.n	8007350 <_puts_r+0x8c>
 8007320:	290a      	cmp	r1, #10
 8007322:	d015      	beq.n	8007350 <_puts_r+0x8c>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	7019      	strb	r1, [r3, #0]
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007332:	3b01      	subs	r3, #1
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	2900      	cmp	r1, #0
 8007338:	d1ed      	bne.n	8007316 <_puts_r+0x52>
 800733a:	2b00      	cmp	r3, #0
 800733c:	da11      	bge.n	8007362 <_puts_r+0x9e>
 800733e:	4622      	mov	r2, r4
 8007340:	210a      	movs	r1, #10
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f893 	bl	800746e <__swbuf_r>
 8007348:	3001      	adds	r0, #1
 800734a:	d0d7      	beq.n	80072fc <_puts_r+0x38>
 800734c:	250a      	movs	r5, #10
 800734e:	e7d7      	b.n	8007300 <_puts_r+0x3c>
 8007350:	4622      	mov	r2, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f88b 	bl	800746e <__swbuf_r>
 8007358:	3001      	adds	r0, #1
 800735a:	d1e7      	bne.n	800732c <_puts_r+0x68>
 800735c:	e7ce      	b.n	80072fc <_puts_r+0x38>
 800735e:	3e01      	subs	r6, #1
 8007360:	e7e4      	b.n	800732c <_puts_r+0x68>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	6022      	str	r2, [r4, #0]
 8007368:	220a      	movs	r2, #10
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e7ee      	b.n	800734c <_puts_r+0x88>
	...

08007370 <puts>:
 8007370:	4b02      	ldr	r3, [pc, #8]	@ (800737c <puts+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f7ff bfa5 	b.w	80072c4 <_puts_r>
 800737a:	bf00      	nop
 800737c:	20000024 	.word	0x20000024

08007380 <sniprintf>:
 8007380:	b40c      	push	{r2, r3}
 8007382:	b530      	push	{r4, r5, lr}
 8007384:	4b17      	ldr	r3, [pc, #92]	@ (80073e4 <sniprintf+0x64>)
 8007386:	1e0c      	subs	r4, r1, #0
 8007388:	681d      	ldr	r5, [r3, #0]
 800738a:	b09d      	sub	sp, #116	@ 0x74
 800738c:	da08      	bge.n	80073a0 <sniprintf+0x20>
 800738e:	238b      	movs	r3, #139	@ 0x8b
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	f04f 30ff 	mov.w	r0, #4294967295
 8007396:	b01d      	add	sp, #116	@ 0x74
 8007398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800739c:	b002      	add	sp, #8
 800739e:	4770      	bx	lr
 80073a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073a8:	bf14      	ite	ne
 80073aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073ae:	4623      	moveq	r3, r4
 80073b0:	9304      	str	r3, [sp, #16]
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073b8:	9002      	str	r0, [sp, #8]
 80073ba:	9006      	str	r0, [sp, #24]
 80073bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80073c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073c2:	ab21      	add	r3, sp, #132	@ 0x84
 80073c4:	a902      	add	r1, sp, #8
 80073c6:	4628      	mov	r0, r5
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f000 fac3 	bl	8007954 <_svfiprintf_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	bfbc      	itt	lt
 80073d2:	238b      	movlt	r3, #139	@ 0x8b
 80073d4:	602b      	strlt	r3, [r5, #0]
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	d0dd      	beq.n	8007396 <sniprintf+0x16>
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e7d9      	b.n	8007396 <sniprintf+0x16>
 80073e2:	bf00      	nop
 80073e4:	20000024 	.word	0x20000024

080073e8 <__sread>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	460c      	mov	r4, r1
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	f000 f8fc 	bl	80075ec <_read_r>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bfab      	itete	ge
 80073f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073fa:	89a3      	ldrhlt	r3, [r4, #12]
 80073fc:	181b      	addge	r3, r3, r0
 80073fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007402:	bfac      	ite	ge
 8007404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007406:	81a3      	strhlt	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__swrite>:
 800740a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	461f      	mov	r7, r3
 8007410:	898b      	ldrh	r3, [r1, #12]
 8007412:	05db      	lsls	r3, r3, #23
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	4616      	mov	r6, r2
 800741a:	d505      	bpl.n	8007428 <__swrite+0x1e>
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	2302      	movs	r3, #2
 8007422:	2200      	movs	r2, #0
 8007424:	f000 f8d0 	bl	80075c8 <_lseek_r>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	4632      	mov	r2, r6
 8007436:	463b      	mov	r3, r7
 8007438:	4628      	mov	r0, r5
 800743a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	f000 b8e7 	b.w	8007610 <_write_r>

08007442 <__sseek>:
 8007442:	b510      	push	{r4, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744a:	f000 f8bd 	bl	80075c8 <_lseek_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	bf15      	itete	ne
 8007454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800745a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800745e:	81a3      	strheq	r3, [r4, #12]
 8007460:	bf18      	it	ne
 8007462:	81a3      	strhne	r3, [r4, #12]
 8007464:	bd10      	pop	{r4, pc}

08007466 <__sclose>:
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 b89d 	b.w	80075a8 <_close_r>

0800746e <__swbuf_r>:
 800746e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007470:	460e      	mov	r6, r1
 8007472:	4614      	mov	r4, r2
 8007474:	4605      	mov	r5, r0
 8007476:	b118      	cbz	r0, 8007480 <__swbuf_r+0x12>
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b90b      	cbnz	r3, 8007480 <__swbuf_r+0x12>
 800747c:	f7ff feda 	bl	8007234 <__sinit>
 8007480:	69a3      	ldr	r3, [r4, #24]
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	071a      	lsls	r2, r3, #28
 8007488:	d501      	bpl.n	800748e <__swbuf_r+0x20>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	b943      	cbnz	r3, 80074a0 <__swbuf_r+0x32>
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f82b 	bl	80074ec <__swsetup_r>
 8007496:	b118      	cbz	r0, 80074a0 <__swbuf_r+0x32>
 8007498:	f04f 37ff 	mov.w	r7, #4294967295
 800749c:	4638      	mov	r0, r7
 800749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	1a98      	subs	r0, r3, r2
 80074a6:	6963      	ldr	r3, [r4, #20]
 80074a8:	b2f6      	uxtb	r6, r6
 80074aa:	4283      	cmp	r3, r0
 80074ac:	4637      	mov	r7, r6
 80074ae:	dc05      	bgt.n	80074bc <__swbuf_r+0x4e>
 80074b0:	4621      	mov	r1, r4
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 fe9e 	bl	80081f4 <_fflush_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d1ed      	bne.n	8007498 <__swbuf_r+0x2a>
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	701e      	strb	r6, [r3, #0]
 80074ca:	6962      	ldr	r2, [r4, #20]
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d004      	beq.n	80074dc <__swbuf_r+0x6e>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d5e1      	bpl.n	800749c <__swbuf_r+0x2e>
 80074d8:	2e0a      	cmp	r6, #10
 80074da:	d1df      	bne.n	800749c <__swbuf_r+0x2e>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fe88 	bl	80081f4 <_fflush_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0d9      	beq.n	800749c <__swbuf_r+0x2e>
 80074e8:	e7d6      	b.n	8007498 <__swbuf_r+0x2a>
	...

080074ec <__swsetup_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <__swsetup_r+0xa8>)
 80074f0:	4605      	mov	r5, r0
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	460c      	mov	r4, r1
 80074f6:	b118      	cbz	r0, 8007500 <__swsetup_r+0x14>
 80074f8:	6a03      	ldr	r3, [r0, #32]
 80074fa:	b90b      	cbnz	r3, 8007500 <__swsetup_r+0x14>
 80074fc:	f7ff fe9a 	bl	8007234 <__sinit>
 8007500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	d422      	bmi.n	800754e <__swsetup_r+0x62>
 8007508:	06da      	lsls	r2, r3, #27
 800750a:	d407      	bmi.n	800751c <__swsetup_r+0x30>
 800750c:	2209      	movs	r2, #9
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	e033      	b.n	8007584 <__swsetup_r+0x98>
 800751c:	0758      	lsls	r0, r3, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x5a>
 8007520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x4a>
 8007524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x46>
 800752c:	4628      	mov	r0, r5
 800752e:	f000 f8bd 	bl	80076ac <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	@ 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x7a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x7a>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f000 fe95 	bl	8008290 <__smakebuf_r>
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	f013 0201 	ands.w	r2, r3, #1
 800756e:	d00a      	beq.n	8007586 <__swsetup_r+0x9a>
 8007570:	2200      	movs	r2, #0
 8007572:	60a2      	str	r2, [r4, #8]
 8007574:	6962      	ldr	r2, [r4, #20]
 8007576:	4252      	negs	r2, r2
 8007578:	61a2      	str	r2, [r4, #24]
 800757a:	6922      	ldr	r2, [r4, #16]
 800757c:	b942      	cbnz	r2, 8007590 <__swsetup_r+0xa4>
 800757e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007582:	d1c5      	bne.n	8007510 <__swsetup_r+0x24>
 8007584:	bd38      	pop	{r3, r4, r5, pc}
 8007586:	0799      	lsls	r1, r3, #30
 8007588:	bf58      	it	pl
 800758a:	6962      	ldrpl	r2, [r4, #20]
 800758c:	60a2      	str	r2, [r4, #8]
 800758e:	e7f4      	b.n	800757a <__swsetup_r+0x8e>
 8007590:	2000      	movs	r0, #0
 8007592:	e7f7      	b.n	8007584 <__swsetup_r+0x98>
 8007594:	20000024 	.word	0x20000024

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <_close_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d06      	ldr	r5, [pc, #24]	@ (80075c4 <_close_r+0x1c>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fa f94b 	bl	800184e <_close>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_close_r+0x1a>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_close_r+0x1a>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20004568 	.word	0x20004568

080075c8 <_lseek_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d07      	ldr	r5, [pc, #28]	@ (80075e8 <_lseek_r+0x20>)
 80075cc:	4604      	mov	r4, r0
 80075ce:	4608      	mov	r0, r1
 80075d0:	4611      	mov	r1, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7fa f960 	bl	800189c <_lseek>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_lseek_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_lseek_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20004568 	.word	0x20004568

080075ec <_read_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	@ (800760c <_read_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fa f8ee 	bl	80017dc <_read>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_read_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_read_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20004568 	.word	0x20004568

08007610 <_write_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	@ (8007630 <_write_r+0x20>)
 8007614:	4604      	mov	r4, r0
 8007616:	4608      	mov	r0, r1
 8007618:	4611      	mov	r1, r2
 800761a:	2200      	movs	r2, #0
 800761c:	602a      	str	r2, [r5, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	f7fa f8f9 	bl	8001816 <_write>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_write_r+0x1e>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_write_r+0x1e>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20004568 	.word	0x20004568

08007634 <__errno>:
 8007634:	4b01      	ldr	r3, [pc, #4]	@ (800763c <__errno+0x8>)
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000024 	.word	0x20000024

08007640 <__libc_init_array>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4d0d      	ldr	r5, [pc, #52]	@ (8007678 <__libc_init_array+0x38>)
 8007644:	4c0d      	ldr	r4, [pc, #52]	@ (800767c <__libc_init_array+0x3c>)
 8007646:	1b64      	subs	r4, r4, r5
 8007648:	10a4      	asrs	r4, r4, #2
 800764a:	2600      	movs	r6, #0
 800764c:	42a6      	cmp	r6, r4
 800764e:	d109      	bne.n	8007664 <__libc_init_array+0x24>
 8007650:	4d0b      	ldr	r5, [pc, #44]	@ (8007680 <__libc_init_array+0x40>)
 8007652:	4c0c      	ldr	r4, [pc, #48]	@ (8007684 <__libc_init_array+0x44>)
 8007654:	f000 feda 	bl	800840c <_init>
 8007658:	1b64      	subs	r4, r4, r5
 800765a:	10a4      	asrs	r4, r4, #2
 800765c:	2600      	movs	r6, #0
 800765e:	42a6      	cmp	r6, r4
 8007660:	d105      	bne.n	800766e <__libc_init_array+0x2e>
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	f855 3b04 	ldr.w	r3, [r5], #4
 8007668:	4798      	blx	r3
 800766a:	3601      	adds	r6, #1
 800766c:	e7ee      	b.n	800764c <__libc_init_array+0xc>
 800766e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007672:	4798      	blx	r3
 8007674:	3601      	adds	r6, #1
 8007676:	e7f2      	b.n	800765e <__libc_init_array+0x1e>
 8007678:	08008888 	.word	0x08008888
 800767c:	08008888 	.word	0x08008888
 8007680:	08008888 	.word	0x08008888
 8007684:	0800888c 	.word	0x0800888c

08007688 <__retarget_lock_init_recursive>:
 8007688:	4770      	bx	lr

0800768a <__retarget_lock_acquire_recursive>:
 800768a:	4770      	bx	lr

0800768c <__retarget_lock_release_recursive>:
 800768c:	4770      	bx	lr

0800768e <memcpy>:
 800768e:	440a      	add	r2, r1
 8007690:	4291      	cmp	r1, r2
 8007692:	f100 33ff 	add.w	r3, r0, #4294967295
 8007696:	d100      	bne.n	800769a <memcpy+0xc>
 8007698:	4770      	bx	lr
 800769a:	b510      	push	{r4, lr}
 800769c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a4:	4291      	cmp	r1, r2
 80076a6:	d1f9      	bne.n	800769c <memcpy+0xe>
 80076a8:	bd10      	pop	{r4, pc}
	...

080076ac <_free_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4605      	mov	r5, r0
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d041      	beq.n	8007738 <_free_r+0x8c>
 80076b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b8:	1f0c      	subs	r4, r1, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	18e4      	addlt	r4, r4, r3
 80076c0:	f000 f8e0 	bl	8007884 <__malloc_lock>
 80076c4:	4a1d      	ldr	r2, [pc, #116]	@ (800773c <_free_r+0x90>)
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	b933      	cbnz	r3, 80076d8 <_free_r+0x2c>
 80076ca:	6063      	str	r3, [r4, #4]
 80076cc:	6014      	str	r4, [r2, #0]
 80076ce:	4628      	mov	r0, r5
 80076d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d4:	f000 b8dc 	b.w	8007890 <__malloc_unlock>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d908      	bls.n	80076ee <_free_r+0x42>
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	1821      	adds	r1, r4, r0
 80076e0:	428b      	cmp	r3, r1
 80076e2:	bf01      	itttt	eq
 80076e4:	6819      	ldreq	r1, [r3, #0]
 80076e6:	685b      	ldreq	r3, [r3, #4]
 80076e8:	1809      	addeq	r1, r1, r0
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	e7ed      	b.n	80076ca <_free_r+0x1e>
 80076ee:	461a      	mov	r2, r3
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	b10b      	cbz	r3, 80076f8 <_free_r+0x4c>
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d9fa      	bls.n	80076ee <_free_r+0x42>
 80076f8:	6811      	ldr	r1, [r2, #0]
 80076fa:	1850      	adds	r0, r2, r1
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d10b      	bne.n	8007718 <_free_r+0x6c>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	4401      	add	r1, r0
 8007704:	1850      	adds	r0, r2, r1
 8007706:	4283      	cmp	r3, r0
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	d1e0      	bne.n	80076ce <_free_r+0x22>
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	6053      	str	r3, [r2, #4]
 8007712:	4408      	add	r0, r1
 8007714:	6010      	str	r0, [r2, #0]
 8007716:	e7da      	b.n	80076ce <_free_r+0x22>
 8007718:	d902      	bls.n	8007720 <_free_r+0x74>
 800771a:	230c      	movs	r3, #12
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	e7d6      	b.n	80076ce <_free_r+0x22>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf04      	itt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	6063      	str	r3, [r4, #4]
 800772e:	bf04      	itt	eq
 8007730:	1809      	addeq	r1, r1, r0
 8007732:	6021      	streq	r1, [r4, #0]
 8007734:	6054      	str	r4, [r2, #4]
 8007736:	e7ca      	b.n	80076ce <_free_r+0x22>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	20004574 	.word	0x20004574

08007740 <sbrk_aligned>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4e0f      	ldr	r6, [pc, #60]	@ (8007780 <sbrk_aligned+0x40>)
 8007744:	460c      	mov	r4, r1
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	4605      	mov	r5, r0
 800774a:	b911      	cbnz	r1, 8007752 <sbrk_aligned+0x12>
 800774c:	f000 fe18 	bl	8008380 <_sbrk_r>
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fe13 	bl	8008380 <_sbrk_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d103      	bne.n	8007766 <sbrk_aligned+0x26>
 800775e:	f04f 34ff 	mov.w	r4, #4294967295
 8007762:	4620      	mov	r0, r4
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	1cc4      	adds	r4, r0, #3
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	42a0      	cmp	r0, r4
 800776e:	d0f8      	beq.n	8007762 <sbrk_aligned+0x22>
 8007770:	1a21      	subs	r1, r4, r0
 8007772:	4628      	mov	r0, r5
 8007774:	f000 fe04 	bl	8008380 <_sbrk_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d1f2      	bne.n	8007762 <sbrk_aligned+0x22>
 800777c:	e7ef      	b.n	800775e <sbrk_aligned+0x1e>
 800777e:	bf00      	nop
 8007780:	20004570 	.word	0x20004570

08007784 <_malloc_r>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	1ccd      	adds	r5, r1, #3
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	2d00      	cmp	r5, #0
 8007798:	4606      	mov	r6, r0
 800779a:	db01      	blt.n	80077a0 <_malloc_r+0x1c>
 800779c:	42a9      	cmp	r1, r5
 800779e:	d904      	bls.n	80077aa <_malloc_r+0x26>
 80077a0:	230c      	movs	r3, #12
 80077a2:	6033      	str	r3, [r6, #0]
 80077a4:	2000      	movs	r0, #0
 80077a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007880 <_malloc_r+0xfc>
 80077ae:	f000 f869 	bl	8007884 <__malloc_lock>
 80077b2:	f8d8 3000 	ldr.w	r3, [r8]
 80077b6:	461c      	mov	r4, r3
 80077b8:	bb44      	cbnz	r4, 800780c <_malloc_r+0x88>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff ffbf 	bl	8007740 <sbrk_aligned>
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	4604      	mov	r4, r0
 80077c6:	d158      	bne.n	800787a <_malloc_r+0xf6>
 80077c8:	f8d8 4000 	ldr.w	r4, [r8]
 80077cc:	4627      	mov	r7, r4
 80077ce:	2f00      	cmp	r7, #0
 80077d0:	d143      	bne.n	800785a <_malloc_r+0xd6>
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d04b      	beq.n	800786e <_malloc_r+0xea>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	eb04 0903 	add.w	r9, r4, r3
 80077e0:	f000 fdce 	bl	8008380 <_sbrk_r>
 80077e4:	4581      	cmp	r9, r0
 80077e6:	d142      	bne.n	800786e <_malloc_r+0xea>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1a6d      	subs	r5, r5, r1
 80077ec:	4629      	mov	r1, r5
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff ffa6 	bl	8007740 <sbrk_aligned>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d03a      	beq.n	800786e <_malloc_r+0xea>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	442b      	add	r3, r5
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	bb62      	cbnz	r2, 8007860 <_malloc_r+0xdc>
 8007806:	f8c8 7000 	str.w	r7, [r8]
 800780a:	e00f      	b.n	800782c <_malloc_r+0xa8>
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	1b52      	subs	r2, r2, r5
 8007810:	d420      	bmi.n	8007854 <_malloc_r+0xd0>
 8007812:	2a0b      	cmp	r2, #11
 8007814:	d917      	bls.n	8007846 <_malloc_r+0xc2>
 8007816:	1961      	adds	r1, r4, r5
 8007818:	42a3      	cmp	r3, r4
 800781a:	6025      	str	r5, [r4, #0]
 800781c:	bf18      	it	ne
 800781e:	6059      	strne	r1, [r3, #4]
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	bf08      	it	eq
 8007824:	f8c8 1000 	streq.w	r1, [r8]
 8007828:	5162      	str	r2, [r4, r5]
 800782a:	604b      	str	r3, [r1, #4]
 800782c:	4630      	mov	r0, r6
 800782e:	f000 f82f 	bl	8007890 <__malloc_unlock>
 8007832:	f104 000b 	add.w	r0, r4, #11
 8007836:	1d23      	adds	r3, r4, #4
 8007838:	f020 0007 	bic.w	r0, r0, #7
 800783c:	1ac2      	subs	r2, r0, r3
 800783e:	bf1c      	itt	ne
 8007840:	1a1b      	subne	r3, r3, r0
 8007842:	50a3      	strne	r3, [r4, r2]
 8007844:	e7af      	b.n	80077a6 <_malloc_r+0x22>
 8007846:	6862      	ldr	r2, [r4, #4]
 8007848:	42a3      	cmp	r3, r4
 800784a:	bf0c      	ite	eq
 800784c:	f8c8 2000 	streq.w	r2, [r8]
 8007850:	605a      	strne	r2, [r3, #4]
 8007852:	e7eb      	b.n	800782c <_malloc_r+0xa8>
 8007854:	4623      	mov	r3, r4
 8007856:	6864      	ldr	r4, [r4, #4]
 8007858:	e7ae      	b.n	80077b8 <_malloc_r+0x34>
 800785a:	463c      	mov	r4, r7
 800785c:	687f      	ldr	r7, [r7, #4]
 800785e:	e7b6      	b.n	80077ce <_malloc_r+0x4a>
 8007860:	461a      	mov	r2, r3
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	42a3      	cmp	r3, r4
 8007866:	d1fb      	bne.n	8007860 <_malloc_r+0xdc>
 8007868:	2300      	movs	r3, #0
 800786a:	6053      	str	r3, [r2, #4]
 800786c:	e7de      	b.n	800782c <_malloc_r+0xa8>
 800786e:	230c      	movs	r3, #12
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	4630      	mov	r0, r6
 8007874:	f000 f80c 	bl	8007890 <__malloc_unlock>
 8007878:	e794      	b.n	80077a4 <_malloc_r+0x20>
 800787a:	6005      	str	r5, [r0, #0]
 800787c:	e7d6      	b.n	800782c <_malloc_r+0xa8>
 800787e:	bf00      	nop
 8007880:	20004574 	.word	0x20004574

08007884 <__malloc_lock>:
 8007884:	4801      	ldr	r0, [pc, #4]	@ (800788c <__malloc_lock+0x8>)
 8007886:	f7ff bf00 	b.w	800768a <__retarget_lock_acquire_recursive>
 800788a:	bf00      	nop
 800788c:	2000456c 	.word	0x2000456c

08007890 <__malloc_unlock>:
 8007890:	4801      	ldr	r0, [pc, #4]	@ (8007898 <__malloc_unlock+0x8>)
 8007892:	f7ff befb 	b.w	800768c <__retarget_lock_release_recursive>
 8007896:	bf00      	nop
 8007898:	2000456c 	.word	0x2000456c

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	461f      	mov	r7, r3
 80078a4:	42be      	cmp	r6, r7
 80078a6:	680b      	ldr	r3, [r1, #0]
 80078a8:	4682      	mov	sl, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	4690      	mov	r8, r2
 80078ae:	d82d      	bhi.n	800790c <__ssputs_r+0x70>
 80078b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078b8:	d026      	beq.n	8007908 <__ssputs_r+0x6c>
 80078ba:	6965      	ldr	r5, [r4, #20]
 80078bc:	6909      	ldr	r1, [r1, #16]
 80078be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c2:	eba3 0901 	sub.w	r9, r3, r1
 80078c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078ca:	1c7b      	adds	r3, r7, #1
 80078cc:	444b      	add	r3, r9
 80078ce:	106d      	asrs	r5, r5, #1
 80078d0:	429d      	cmp	r5, r3
 80078d2:	bf38      	it	cc
 80078d4:	461d      	movcc	r5, r3
 80078d6:	0553      	lsls	r3, r2, #21
 80078d8:	d527      	bpl.n	800792a <__ssputs_r+0x8e>
 80078da:	4629      	mov	r1, r5
 80078dc:	f7ff ff52 	bl	8007784 <_malloc_r>
 80078e0:	4606      	mov	r6, r0
 80078e2:	b360      	cbz	r0, 800793e <__ssputs_r+0xa2>
 80078e4:	6921      	ldr	r1, [r4, #16]
 80078e6:	464a      	mov	r2, r9
 80078e8:	f7ff fed1 	bl	800768e <memcpy>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	6126      	str	r6, [r4, #16]
 80078fa:	6165      	str	r5, [r4, #20]
 80078fc:	444e      	add	r6, r9
 80078fe:	eba5 0509 	sub.w	r5, r5, r9
 8007902:	6026      	str	r6, [r4, #0]
 8007904:	60a5      	str	r5, [r4, #8]
 8007906:	463e      	mov	r6, r7
 8007908:	42be      	cmp	r6, r7
 800790a:	d900      	bls.n	800790e <__ssputs_r+0x72>
 800790c:	463e      	mov	r6, r7
 800790e:	6820      	ldr	r0, [r4, #0]
 8007910:	4632      	mov	r2, r6
 8007912:	4641      	mov	r1, r8
 8007914:	f000 fcf8 	bl	8008308 <memmove>
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	1b9b      	subs	r3, r3, r6
 800791c:	60a3      	str	r3, [r4, #8]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	4433      	add	r3, r6
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	2000      	movs	r0, #0
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	462a      	mov	r2, r5
 800792c:	f000 fd38 	bl	80083a0 <_realloc_r>
 8007930:	4606      	mov	r6, r0
 8007932:	2800      	cmp	r0, #0
 8007934:	d1e0      	bne.n	80078f8 <__ssputs_r+0x5c>
 8007936:	6921      	ldr	r1, [r4, #16]
 8007938:	4650      	mov	r0, sl
 800793a:	f7ff feb7 	bl	80076ac <_free_r>
 800793e:	230c      	movs	r3, #12
 8007940:	f8ca 3000 	str.w	r3, [sl]
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	e7e9      	b.n	8007926 <__ssputs_r+0x8a>
	...

08007954 <_svfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4698      	mov	r8, r3
 800795a:	898b      	ldrh	r3, [r1, #12]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	b09d      	sub	sp, #116	@ 0x74
 8007960:	4607      	mov	r7, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4614      	mov	r4, r2
 8007966:	d510      	bpl.n	800798a <_svfiprintf_r+0x36>
 8007968:	690b      	ldr	r3, [r1, #16]
 800796a:	b973      	cbnz	r3, 800798a <_svfiprintf_r+0x36>
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	f7ff ff09 	bl	8007784 <_malloc_r>
 8007972:	6028      	str	r0, [r5, #0]
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	b930      	cbnz	r0, 8007986 <_svfiprintf_r+0x32>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	b01d      	add	sp, #116	@ 0x74
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	2340      	movs	r3, #64	@ 0x40
 8007988:	616b      	str	r3, [r5, #20]
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	@ 0x24
 800798e:	2320      	movs	r3, #32
 8007990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007994:	f8cd 800c 	str.w	r8, [sp, #12]
 8007998:	2330      	movs	r3, #48	@ 0x30
 800799a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b38 <_svfiprintf_r+0x1e4>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a2:	f04f 0901 	mov.w	r9, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	469a      	mov	sl, r3
 80079aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ae:	b10a      	cbz	r2, 80079b4 <_svfiprintf_r+0x60>
 80079b0:	2a25      	cmp	r2, #37	@ 0x25
 80079b2:	d1f9      	bne.n	80079a8 <_svfiprintf_r+0x54>
 80079b4:	ebba 0b04 	subs.w	fp, sl, r4
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x7e>
 80079ba:	465b      	mov	r3, fp
 80079bc:	4622      	mov	r2, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ff6b 	bl	800789c <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a7 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ce:	445a      	add	r2, fp
 80079d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d2:	f89a 3000 	ldrb.w	r3, [sl]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 809f 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079dc:	2300      	movs	r3, #0
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f4:	4654      	mov	r4, sl
 80079f6:	2205      	movs	r2, #5
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	484e      	ldr	r0, [pc, #312]	@ (8007b38 <_svfiprintf_r+0x1e4>)
 80079fe:	f7f8 fc07 	bl	8000210 <memchr>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	b9d8      	cbnz	r0, 8007a3e <_svfiprintf_r+0xea>
 8007a06:	06d0      	lsls	r0, r2, #27
 8007a08:	bf44      	itt	mi
 8007a0a:	2320      	movmi	r3, #32
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a10:	0711      	lsls	r1, r2, #28
 8007a12:	bf44      	itt	mi
 8007a14:	232b      	movmi	r3, #43	@ 0x2b
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a20:	d015      	beq.n	8007a4e <_svfiprintf_r+0xfa>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	4654      	mov	r4, sl
 8007a26:	2000      	movs	r0, #0
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a32:	3b30      	subs	r3, #48	@ 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d94b      	bls.n	8007ad0 <_svfiprintf_r+0x17c>
 8007a38:	b1b0      	cbz	r0, 8007a68 <_svfiprintf_r+0x114>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e014      	b.n	8007a68 <_svfiprintf_r+0x114>
 8007a3e:	eba0 0308 	sub.w	r3, r0, r8
 8007a42:	fa09 f303 	lsl.w	r3, r9, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	e7d2      	b.n	80079f4 <_svfiprintf_r+0xa0>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbb      	ittet	lt
 8007a5a:	425b      	neglt	r3, r3
 8007a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a60:	9307      	strge	r3, [sp, #28]
 8007a62:	9307      	strlt	r3, [sp, #28]
 8007a64:	bfb8      	it	lt
 8007a66:	9204      	strlt	r2, [sp, #16]
 8007a68:	7823      	ldrb	r3, [r4, #0]
 8007a6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6c:	d10a      	bne.n	8007a84 <_svfiprintf_r+0x130>
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a72:	d132      	bne.n	8007ada <_svfiprintf_r+0x186>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a80:	3402      	adds	r4, #2
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b48 <_svfiprintf_r+0x1f4>
 8007a88:	7821      	ldrb	r1, [r4, #0]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7f8 fbbf 	bl	8000210 <memchr>
 8007a92:	b138      	cbz	r0, 8007aa4 <_svfiprintf_r+0x150>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	2240      	movs	r2, #64	@ 0x40
 8007a9c:	4082      	lsls	r2, r0
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	4824      	ldr	r0, [pc, #144]	@ (8007b3c <_svfiprintf_r+0x1e8>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aae:	2206      	movs	r2, #6
 8007ab0:	f7f8 fbae 	bl	8000210 <memchr>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d036      	beq.n	8007b26 <_svfiprintf_r+0x1d2>
 8007ab8:	4b21      	ldr	r3, [pc, #132]	@ (8007b40 <_svfiprintf_r+0x1ec>)
 8007aba:	bb1b      	cbnz	r3, 8007b04 <_svfiprintf_r+0x1b0>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	4433      	add	r3, r6
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	e76a      	b.n	80079a6 <_svfiprintf_r+0x52>
 8007ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7a8      	b.n	8007a2c <_svfiprintf_r+0xd8>
 8007ada:	2300      	movs	r3, #0
 8007adc:	3401      	adds	r4, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aec:	3a30      	subs	r2, #48	@ 0x30
 8007aee:	2a09      	cmp	r2, #9
 8007af0:	d903      	bls.n	8007afa <_svfiprintf_r+0x1a6>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c6      	beq.n	8007a84 <_svfiprintf_r+0x130>
 8007af6:	9105      	str	r1, [sp, #20]
 8007af8:	e7c4      	b.n	8007a84 <_svfiprintf_r+0x130>
 8007afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7f0      	b.n	8007ae6 <_svfiprintf_r+0x192>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f3af 8000 	nop.w
 8007b14:	1c42      	adds	r2, r0, #1
 8007b16:	4606      	mov	r6, r0
 8007b18:	d1d6      	bne.n	8007ac8 <_svfiprintf_r+0x174>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	065b      	lsls	r3, r3, #25
 8007b1e:	f53f af2d 	bmi.w	800797c <_svfiprintf_r+0x28>
 8007b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b24:	e72c      	b.n	8007980 <_svfiprintf_r+0x2c>
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	4638      	mov	r0, r7
 8007b32:	f000 f9bb 	bl	8007eac <_printf_i>
 8007b36:	e7ed      	b.n	8007b14 <_svfiprintf_r+0x1c0>
 8007b38:	0800884d 	.word	0x0800884d
 8007b3c:	08008857 	.word	0x08008857
 8007b40:	00000000 	.word	0x00000000
 8007b44:	0800789d 	.word	0x0800789d
 8007b48:	08008853 	.word	0x08008853

08007b4c <__sfputc_r>:
 8007b4c:	6893      	ldr	r3, [r2, #8]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	b410      	push	{r4}
 8007b54:	6093      	str	r3, [r2, #8]
 8007b56:	da08      	bge.n	8007b6a <__sfputc_r+0x1e>
 8007b58:	6994      	ldr	r4, [r2, #24]
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	db01      	blt.n	8007b62 <__sfputc_r+0x16>
 8007b5e:	290a      	cmp	r1, #10
 8007b60:	d103      	bne.n	8007b6a <__sfputc_r+0x1e>
 8007b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b66:	f7ff bc82 	b.w	800746e <__swbuf_r>
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	1c58      	adds	r0, r3, #1
 8007b6e:	6010      	str	r0, [r2, #0]
 8007b70:	7019      	strb	r1, [r3, #0]
 8007b72:	4608      	mov	r0, r1
 8007b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <__sfputs_r>:
 8007b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4614      	mov	r4, r2
 8007b82:	18d5      	adds	r5, r2, r3
 8007b84:	42ac      	cmp	r4, r5
 8007b86:	d101      	bne.n	8007b8c <__sfputs_r+0x12>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e007      	b.n	8007b9c <__sfputs_r+0x22>
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	463a      	mov	r2, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7ff ffda 	bl	8007b4c <__sfputc_r>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d1f3      	bne.n	8007b84 <__sfputs_r+0xa>
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ba0 <_vfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	b09d      	sub	sp, #116	@ 0x74
 8007ba8:	4614      	mov	r4, r2
 8007baa:	4698      	mov	r8, r3
 8007bac:	4606      	mov	r6, r0
 8007bae:	b118      	cbz	r0, 8007bb8 <_vfiprintf_r+0x18>
 8007bb0:	6a03      	ldr	r3, [r0, #32]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x18>
 8007bb4:	f7ff fb3e 	bl	8007234 <__sinit>
 8007bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bba:	07d9      	lsls	r1, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_vfiprintf_r+0x2a>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	059a      	lsls	r2, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_vfiprintf_r+0x2a>
 8007bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bc6:	f7ff fd60 	bl	800768a <__retarget_lock_acquire_recursive>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	071b      	lsls	r3, r3, #28
 8007bce:	d501      	bpl.n	8007bd4 <_vfiprintf_r+0x34>
 8007bd0:	692b      	ldr	r3, [r5, #16]
 8007bd2:	b99b      	cbnz	r3, 8007bfc <_vfiprintf_r+0x5c>
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff fc88 	bl	80074ec <__swsetup_r>
 8007bdc:	b170      	cbz	r0, 8007bfc <_vfiprintf_r+0x5c>
 8007bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007be0:	07dc      	lsls	r4, r3, #31
 8007be2:	d504      	bpl.n	8007bee <_vfiprintf_r+0x4e>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b01d      	add	sp, #116	@ 0x74
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	0598      	lsls	r0, r3, #22
 8007bf2:	d4f7      	bmi.n	8007be4 <_vfiprintf_r+0x44>
 8007bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bf6:	f7ff fd49 	bl	800768c <__retarget_lock_release_recursive>
 8007bfa:	e7f3      	b.n	8007be4 <_vfiprintf_r+0x44>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c00:	2320      	movs	r3, #32
 8007c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0a:	2330      	movs	r3, #48	@ 0x30
 8007c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dbc <_vfiprintf_r+0x21c>
 8007c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c14:	f04f 0901 	mov.w	r9, #1
 8007c18:	4623      	mov	r3, r4
 8007c1a:	469a      	mov	sl, r3
 8007c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c20:	b10a      	cbz	r2, 8007c26 <_vfiprintf_r+0x86>
 8007c22:	2a25      	cmp	r2, #37	@ 0x25
 8007c24:	d1f9      	bne.n	8007c1a <_vfiprintf_r+0x7a>
 8007c26:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2a:	d00b      	beq.n	8007c44 <_vfiprintf_r+0xa4>
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ffa1 	bl	8007b7a <__sfputs_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f000 80a7 	beq.w	8007d8c <_vfiprintf_r+0x1ec>
 8007c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c40:	445a      	add	r2, fp
 8007c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c44:	f89a 3000 	ldrb.w	r3, [sl]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 809f 	beq.w	8007d8c <_vfiprintf_r+0x1ec>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c58:	f10a 0a01 	add.w	sl, sl, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c66:	4654      	mov	r4, sl
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6e:	4853      	ldr	r0, [pc, #332]	@ (8007dbc <_vfiprintf_r+0x21c>)
 8007c70:	f7f8 face 	bl	8000210 <memchr>
 8007c74:	9a04      	ldr	r2, [sp, #16]
 8007c76:	b9d8      	cbnz	r0, 8007cb0 <_vfiprintf_r+0x110>
 8007c78:	06d1      	lsls	r1, r2, #27
 8007c7a:	bf44      	itt	mi
 8007c7c:	2320      	movmi	r3, #32
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c82:	0713      	lsls	r3, r2, #28
 8007c84:	bf44      	itt	mi
 8007c86:	232b      	movmi	r3, #43	@ 0x2b
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c92:	d015      	beq.n	8007cc0 <_vfiprintf_r+0x120>
 8007c94:	9a07      	ldr	r2, [sp, #28]
 8007c96:	4654      	mov	r4, sl
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca4:	3b30      	subs	r3, #48	@ 0x30
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d94b      	bls.n	8007d42 <_vfiprintf_r+0x1a2>
 8007caa:	b1b0      	cbz	r0, 8007cda <_vfiprintf_r+0x13a>
 8007cac:	9207      	str	r2, [sp, #28]
 8007cae:	e014      	b.n	8007cda <_vfiprintf_r+0x13a>
 8007cb0:	eba0 0308 	sub.w	r3, r0, r8
 8007cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	e7d2      	b.n	8007c66 <_vfiprintf_r+0xc6>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	1d19      	adds	r1, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9103      	str	r1, [sp, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfbb      	ittet	lt
 8007ccc:	425b      	neglt	r3, r3
 8007cce:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd2:	9307      	strge	r3, [sp, #28]
 8007cd4:	9307      	strlt	r3, [sp, #28]
 8007cd6:	bfb8      	it	lt
 8007cd8:	9204      	strlt	r2, [sp, #16]
 8007cda:	7823      	ldrb	r3, [r4, #0]
 8007cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cde:	d10a      	bne.n	8007cf6 <_vfiprintf_r+0x156>
 8007ce0:	7863      	ldrb	r3, [r4, #1]
 8007ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce4:	d132      	bne.n	8007d4c <_vfiprintf_r+0x1ac>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	9203      	str	r2, [sp, #12]
 8007cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cf2:	3402      	adds	r4, #2
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007dcc <_vfiprintf_r+0x22c>
 8007cfa:	7821      	ldrb	r1, [r4, #0]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	4650      	mov	r0, sl
 8007d00:	f7f8 fa86 	bl	8000210 <memchr>
 8007d04:	b138      	cbz	r0, 8007d16 <_vfiprintf_r+0x176>
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	eba0 000a 	sub.w	r0, r0, sl
 8007d0c:	2240      	movs	r2, #64	@ 0x40
 8007d0e:	4082      	lsls	r2, r0
 8007d10:	4313      	orrs	r3, r2
 8007d12:	3401      	adds	r4, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1a:	4829      	ldr	r0, [pc, #164]	@ (8007dc0 <_vfiprintf_r+0x220>)
 8007d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d20:	2206      	movs	r2, #6
 8007d22:	f7f8 fa75 	bl	8000210 <memchr>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d03f      	beq.n	8007daa <_vfiprintf_r+0x20a>
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <_vfiprintf_r+0x224>)
 8007d2c:	bb1b      	cbnz	r3, 8007d76 <_vfiprintf_r+0x1d6>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	3307      	adds	r3, #7
 8007d32:	f023 0307 	bic.w	r3, r3, #7
 8007d36:	3308      	adds	r3, #8
 8007d38:	9303      	str	r3, [sp, #12]
 8007d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3c:	443b      	add	r3, r7
 8007d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d40:	e76a      	b.n	8007c18 <_vfiprintf_r+0x78>
 8007d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d46:	460c      	mov	r4, r1
 8007d48:	2001      	movs	r0, #1
 8007d4a:	e7a8      	b.n	8007c9e <_vfiprintf_r+0xfe>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	3401      	adds	r4, #1
 8007d50:	9305      	str	r3, [sp, #20]
 8007d52:	4619      	mov	r1, r3
 8007d54:	f04f 0c0a 	mov.w	ip, #10
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d5e:	3a30      	subs	r2, #48	@ 0x30
 8007d60:	2a09      	cmp	r2, #9
 8007d62:	d903      	bls.n	8007d6c <_vfiprintf_r+0x1cc>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0c6      	beq.n	8007cf6 <_vfiprintf_r+0x156>
 8007d68:	9105      	str	r1, [sp, #20]
 8007d6a:	e7c4      	b.n	8007cf6 <_vfiprintf_r+0x156>
 8007d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d70:	4604      	mov	r4, r0
 8007d72:	2301      	movs	r3, #1
 8007d74:	e7f0      	b.n	8007d58 <_vfiprintf_r+0x1b8>
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4b12      	ldr	r3, [pc, #72]	@ (8007dc8 <_vfiprintf_r+0x228>)
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	4630      	mov	r0, r6
 8007d82:	f3af 8000 	nop.w
 8007d86:	4607      	mov	r7, r0
 8007d88:	1c78      	adds	r0, r7, #1
 8007d8a:	d1d6      	bne.n	8007d3a <_vfiprintf_r+0x19a>
 8007d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d8e:	07d9      	lsls	r1, r3, #31
 8007d90:	d405      	bmi.n	8007d9e <_vfiprintf_r+0x1fe>
 8007d92:	89ab      	ldrh	r3, [r5, #12]
 8007d94:	059a      	lsls	r2, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_vfiprintf_r+0x1fe>
 8007d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d9a:	f7ff fc77 	bl	800768c <__retarget_lock_release_recursive>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	065b      	lsls	r3, r3, #25
 8007da2:	f53f af1f 	bmi.w	8007be4 <_vfiprintf_r+0x44>
 8007da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007da8:	e71e      	b.n	8007be8 <_vfiprintf_r+0x48>
 8007daa:	ab03      	add	r3, sp, #12
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	462a      	mov	r2, r5
 8007db0:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <_vfiprintf_r+0x228>)
 8007db2:	a904      	add	r1, sp, #16
 8007db4:	4630      	mov	r0, r6
 8007db6:	f000 f879 	bl	8007eac <_printf_i>
 8007dba:	e7e4      	b.n	8007d86 <_vfiprintf_r+0x1e6>
 8007dbc:	0800884d 	.word	0x0800884d
 8007dc0:	08008857 	.word	0x08008857
 8007dc4:	00000000 	.word	0x00000000
 8007dc8:	08007b7b 	.word	0x08007b7b
 8007dcc:	08008853 	.word	0x08008853

08007dd0 <_printf_common>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	4698      	mov	r8, r3
 8007dd8:	688a      	ldr	r2, [r1, #8]
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	bfb8      	it	lt
 8007de4:	4613      	movlt	r3, r2
 8007de6:	6033      	str	r3, [r6, #0]
 8007de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dec:	4607      	mov	r7, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	b10a      	cbz	r2, 8007df6 <_printf_common+0x26>
 8007df2:	3301      	adds	r3, #1
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	0699      	lsls	r1, r3, #26
 8007dfa:	bf42      	ittt	mi
 8007dfc:	6833      	ldrmi	r3, [r6, #0]
 8007dfe:	3302      	addmi	r3, #2
 8007e00:	6033      	strmi	r3, [r6, #0]
 8007e02:	6825      	ldr	r5, [r4, #0]
 8007e04:	f015 0506 	ands.w	r5, r5, #6
 8007e08:	d106      	bne.n	8007e18 <_printf_common+0x48>
 8007e0a:	f104 0a19 	add.w	sl, r4, #25
 8007e0e:	68e3      	ldr	r3, [r4, #12]
 8007e10:	6832      	ldr	r2, [r6, #0]
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	42ab      	cmp	r3, r5
 8007e16:	dc26      	bgt.n	8007e66 <_printf_common+0x96>
 8007e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	3b00      	subs	r3, #0
 8007e20:	bf18      	it	ne
 8007e22:	2301      	movne	r3, #1
 8007e24:	0692      	lsls	r2, r2, #26
 8007e26:	d42b      	bmi.n	8007e80 <_printf_common+0xb0>
 8007e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c8      	blx	r9
 8007e32:	3001      	adds	r0, #1
 8007e34:	d01e      	beq.n	8007e74 <_printf_common+0xa4>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6922      	ldr	r2, [r4, #16]
 8007e3a:	f003 0306 	and.w	r3, r3, #6
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	bf02      	ittt	eq
 8007e42:	68e5      	ldreq	r5, [r4, #12]
 8007e44:	6833      	ldreq	r3, [r6, #0]
 8007e46:	1aed      	subeq	r5, r5, r3
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	bf0c      	ite	eq
 8007e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e50:	2500      	movne	r5, #0
 8007e52:	4293      	cmp	r3, r2
 8007e54:	bfc4      	itt	gt
 8007e56:	1a9b      	subgt	r3, r3, r2
 8007e58:	18ed      	addgt	r5, r5, r3
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	341a      	adds	r4, #26
 8007e5e:	42b5      	cmp	r5, r6
 8007e60:	d11a      	bne.n	8007e98 <_printf_common+0xc8>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e008      	b.n	8007e78 <_printf_common+0xa8>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4652      	mov	r2, sl
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	47c8      	blx	r9
 8007e70:	3001      	adds	r0, #1
 8007e72:	d103      	bne.n	8007e7c <_printf_common+0xac>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	e7c6      	b.n	8007e0e <_printf_common+0x3e>
 8007e80:	18e1      	adds	r1, r4, r3
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	2030      	movs	r0, #48	@ 0x30
 8007e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e8a:	4422      	add	r2, r4
 8007e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e94:	3302      	adds	r3, #2
 8007e96:	e7c7      	b.n	8007e28 <_printf_common+0x58>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c8      	blx	r9
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d0e6      	beq.n	8007e74 <_printf_common+0xa4>
 8007ea6:	3601      	adds	r6, #1
 8007ea8:	e7d9      	b.n	8007e5e <_printf_common+0x8e>
	...

08007eac <_printf_i>:
 8007eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	7e0f      	ldrb	r7, [r1, #24]
 8007eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eb4:	2f78      	cmp	r7, #120	@ 0x78
 8007eb6:	4691      	mov	r9, r2
 8007eb8:	4680      	mov	r8, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	469a      	mov	sl, r3
 8007ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ec2:	d807      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ec4:	2f62      	cmp	r7, #98	@ 0x62
 8007ec6:	d80a      	bhi.n	8007ede <_printf_i+0x32>
 8007ec8:	2f00      	cmp	r7, #0
 8007eca:	f000 80d2 	beq.w	8008072 <_printf_i+0x1c6>
 8007ece:	2f58      	cmp	r7, #88	@ 0x58
 8007ed0:	f000 80b9 	beq.w	8008046 <_printf_i+0x19a>
 8007ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007edc:	e03a      	b.n	8007f54 <_printf_i+0xa8>
 8007ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ee2:	2b15      	cmp	r3, #21
 8007ee4:	d8f6      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8007eec <_printf_i+0x40>)
 8007ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007ed5 	.word	0x08007ed5
 8007ef8:	08007ed5 	.word	0x08007ed5
 8007efc:	08007ed5 	.word	0x08007ed5
 8007f00:	08007ed5 	.word	0x08007ed5
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007ed5 	.word	0x08007ed5
 8007f0c:	08007ed5 	.word	0x08007ed5
 8007f10:	08007ed5 	.word	0x08007ed5
 8007f14:	08007ed5 	.word	0x08007ed5
 8007f18:	08008059 	.word	0x08008059
 8007f1c:	08007f83 	.word	0x08007f83
 8007f20:	08008013 	.word	0x08008013
 8007f24:	08007ed5 	.word	0x08007ed5
 8007f28:	08007ed5 	.word	0x08007ed5
 8007f2c:	0800807b 	.word	0x0800807b
 8007f30:	08007ed5 	.word	0x08007ed5
 8007f34:	08007f83 	.word	0x08007f83
 8007f38:	08007ed5 	.word	0x08007ed5
 8007f3c:	08007ed5 	.word	0x08007ed5
 8007f40:	0800801b 	.word	0x0800801b
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6032      	str	r2, [r6, #0]
 8007f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f54:	2301      	movs	r3, #1
 8007f56:	e09d      	b.n	8008094 <_printf_i+0x1e8>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	1d19      	adds	r1, r3, #4
 8007f5e:	6031      	str	r1, [r6, #0]
 8007f60:	0606      	lsls	r6, r0, #24
 8007f62:	d501      	bpl.n	8007f68 <_printf_i+0xbc>
 8007f64:	681d      	ldr	r5, [r3, #0]
 8007f66:	e003      	b.n	8007f70 <_printf_i+0xc4>
 8007f68:	0645      	lsls	r5, r0, #25
 8007f6a:	d5fb      	bpl.n	8007f64 <_printf_i+0xb8>
 8007f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	da03      	bge.n	8007f7c <_printf_i+0xd0>
 8007f74:	232d      	movs	r3, #45	@ 0x2d
 8007f76:	426d      	negs	r5, r5
 8007f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	4859      	ldr	r0, [pc, #356]	@ (80080e4 <_printf_i+0x238>)
 8007f7e:	230a      	movs	r3, #10
 8007f80:	e011      	b.n	8007fa6 <_printf_i+0xfa>
 8007f82:	6821      	ldr	r1, [r4, #0]
 8007f84:	6833      	ldr	r3, [r6, #0]
 8007f86:	0608      	lsls	r0, r1, #24
 8007f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f8c:	d402      	bmi.n	8007f94 <_printf_i+0xe8>
 8007f8e:	0649      	lsls	r1, r1, #25
 8007f90:	bf48      	it	mi
 8007f92:	b2ad      	uxthmi	r5, r5
 8007f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f96:	4853      	ldr	r0, [pc, #332]	@ (80080e4 <_printf_i+0x238>)
 8007f98:	6033      	str	r3, [r6, #0]
 8007f9a:	bf14      	ite	ne
 8007f9c:	230a      	movne	r3, #10
 8007f9e:	2308      	moveq	r3, #8
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fa6:	6866      	ldr	r6, [r4, #4]
 8007fa8:	60a6      	str	r6, [r4, #8]
 8007faa:	2e00      	cmp	r6, #0
 8007fac:	bfa2      	ittt	ge
 8007fae:	6821      	ldrge	r1, [r4, #0]
 8007fb0:	f021 0104 	bicge.w	r1, r1, #4
 8007fb4:	6021      	strge	r1, [r4, #0]
 8007fb6:	b90d      	cbnz	r5, 8007fbc <_printf_i+0x110>
 8007fb8:	2e00      	cmp	r6, #0
 8007fba:	d04b      	beq.n	8008054 <_printf_i+0x1a8>
 8007fbc:	4616      	mov	r6, r2
 8007fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8007fc6:	5dc7      	ldrb	r7, [r0, r7]
 8007fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fcc:	462f      	mov	r7, r5
 8007fce:	42bb      	cmp	r3, r7
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	d9f4      	bls.n	8007fbe <_printf_i+0x112>
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10b      	bne.n	8007ff0 <_printf_i+0x144>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07df      	lsls	r7, r3, #31
 8007fdc:	d508      	bpl.n	8007ff0 <_printf_i+0x144>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	bfde      	ittt	le
 8007fe6:	2330      	movle	r3, #48	@ 0x30
 8007fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ff0:	1b92      	subs	r2, r2, r6
 8007ff2:	6122      	str	r2, [r4, #16]
 8007ff4:	f8cd a000 	str.w	sl, [sp]
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	aa03      	add	r2, sp, #12
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f7ff fee6 	bl	8007dd0 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	d14a      	bne.n	800809e <_printf_i+0x1f2>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b004      	add	sp, #16
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f043 0320 	orr.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	4833      	ldr	r0, [pc, #204]	@ (80080e8 <_printf_i+0x23c>)
 800801c:	2778      	movs	r7, #120	@ 0x78
 800801e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6831      	ldr	r1, [r6, #0]
 8008026:	061f      	lsls	r7, r3, #24
 8008028:	f851 5b04 	ldr.w	r5, [r1], #4
 800802c:	d402      	bmi.n	8008034 <_printf_i+0x188>
 800802e:	065f      	lsls	r7, r3, #25
 8008030:	bf48      	it	mi
 8008032:	b2ad      	uxthmi	r5, r5
 8008034:	6031      	str	r1, [r6, #0]
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	bf44      	itt	mi
 800803a:	f043 0320 	orrmi.w	r3, r3, #32
 800803e:	6023      	strmi	r3, [r4, #0]
 8008040:	b11d      	cbz	r5, 800804a <_printf_i+0x19e>
 8008042:	2310      	movs	r3, #16
 8008044:	e7ac      	b.n	8007fa0 <_printf_i+0xf4>
 8008046:	4827      	ldr	r0, [pc, #156]	@ (80080e4 <_printf_i+0x238>)
 8008048:	e7e9      	b.n	800801e <_printf_i+0x172>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f023 0320 	bic.w	r3, r3, #32
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	e7f6      	b.n	8008042 <_printf_i+0x196>
 8008054:	4616      	mov	r6, r2
 8008056:	e7bd      	b.n	8007fd4 <_printf_i+0x128>
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	1d18      	adds	r0, r3, #4
 8008060:	6030      	str	r0, [r6, #0]
 8008062:	062e      	lsls	r6, r5, #24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	d501      	bpl.n	800806c <_printf_i+0x1c0>
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0x1c6>
 800806c:	0668      	lsls	r0, r5, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0x1bc>
 8008070:	8019      	strh	r1, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	4616      	mov	r6, r2
 8008078:	e7bc      	b.n	8007ff4 <_printf_i+0x148>
 800807a:	6833      	ldr	r3, [r6, #0]
 800807c:	1d1a      	adds	r2, r3, #4
 800807e:	6032      	str	r2, [r6, #0]
 8008080:	681e      	ldr	r6, [r3, #0]
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	2100      	movs	r1, #0
 8008086:	4630      	mov	r0, r6
 8008088:	f7f8 f8c2 	bl	8000210 <memchr>
 800808c:	b108      	cbz	r0, 8008092 <_printf_i+0x1e6>
 800808e:	1b80      	subs	r0, r0, r6
 8008090:	6060      	str	r0, [r4, #4]
 8008092:	6863      	ldr	r3, [r4, #4]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	2300      	movs	r3, #0
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800809c:	e7aa      	b.n	8007ff4 <_printf_i+0x148>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	4632      	mov	r2, r6
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0ad      	beq.n	8008008 <_printf_i+0x15c>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d413      	bmi.n	80080da <_printf_i+0x22e>
 80080b2:	68e0      	ldr	r0, [r4, #12]
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	4298      	cmp	r0, r3
 80080b8:	bfb8      	it	lt
 80080ba:	4618      	movlt	r0, r3
 80080bc:	e7a6      	b.n	800800c <_printf_i+0x160>
 80080be:	2301      	movs	r3, #1
 80080c0:	4632      	mov	r2, r6
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d09d      	beq.n	8008008 <_printf_i+0x15c>
 80080cc:	3501      	adds	r5, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dcf2      	bgt.n	80080be <_printf_i+0x212>
 80080d8:	e7eb      	b.n	80080b2 <_printf_i+0x206>
 80080da:	2500      	movs	r5, #0
 80080dc:	f104 0619 	add.w	r6, r4, #25
 80080e0:	e7f5      	b.n	80080ce <_printf_i+0x222>
 80080e2:	bf00      	nop
 80080e4:	0800885e 	.word	0x0800885e
 80080e8:	0800886f 	.word	0x0800886f

080080ec <__sflush_r>:
 80080ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f4:	0716      	lsls	r6, r2, #28
 80080f6:	4605      	mov	r5, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	d454      	bmi.n	80081a6 <__sflush_r+0xba>
 80080fc:	684b      	ldr	r3, [r1, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dc02      	bgt.n	8008108 <__sflush_r+0x1c>
 8008102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd48      	ble.n	800819a <__sflush_r+0xae>
 8008108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800810a:	2e00      	cmp	r6, #0
 800810c:	d045      	beq.n	800819a <__sflush_r+0xae>
 800810e:	2300      	movs	r3, #0
 8008110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008114:	682f      	ldr	r7, [r5, #0]
 8008116:	6a21      	ldr	r1, [r4, #32]
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	d030      	beq.n	800817e <__sflush_r+0x92>
 800811c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	0759      	lsls	r1, r3, #29
 8008122:	d505      	bpl.n	8008130 <__sflush_r+0x44>
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	1ad2      	subs	r2, r2, r3
 8008128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800812a:	b10b      	cbz	r3, 8008130 <__sflush_r+0x44>
 800812c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008134:	6a21      	ldr	r1, [r4, #32]
 8008136:	4628      	mov	r0, r5
 8008138:	47b0      	blx	r6
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	d106      	bne.n	800814e <__sflush_r+0x62>
 8008140:	6829      	ldr	r1, [r5, #0]
 8008142:	291d      	cmp	r1, #29
 8008144:	d82b      	bhi.n	800819e <__sflush_r+0xb2>
 8008146:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <__sflush_r+0x104>)
 8008148:	410a      	asrs	r2, r1
 800814a:	07d6      	lsls	r6, r2, #31
 800814c:	d427      	bmi.n	800819e <__sflush_r+0xb2>
 800814e:	2200      	movs	r2, #0
 8008150:	6062      	str	r2, [r4, #4]
 8008152:	04d9      	lsls	r1, r3, #19
 8008154:	6922      	ldr	r2, [r4, #16]
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	d504      	bpl.n	8008164 <__sflush_r+0x78>
 800815a:	1c42      	adds	r2, r0, #1
 800815c:	d101      	bne.n	8008162 <__sflush_r+0x76>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b903      	cbnz	r3, 8008164 <__sflush_r+0x78>
 8008162:	6560      	str	r0, [r4, #84]	@ 0x54
 8008164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008166:	602f      	str	r7, [r5, #0]
 8008168:	b1b9      	cbz	r1, 800819a <__sflush_r+0xae>
 800816a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800816e:	4299      	cmp	r1, r3
 8008170:	d002      	beq.n	8008178 <__sflush_r+0x8c>
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff fa9a 	bl	80076ac <_free_r>
 8008178:	2300      	movs	r3, #0
 800817a:	6363      	str	r3, [r4, #52]	@ 0x34
 800817c:	e00d      	b.n	800819a <__sflush_r+0xae>
 800817e:	2301      	movs	r3, #1
 8008180:	4628      	mov	r0, r5
 8008182:	47b0      	blx	r6
 8008184:	4602      	mov	r2, r0
 8008186:	1c50      	adds	r0, r2, #1
 8008188:	d1c9      	bne.n	800811e <__sflush_r+0x32>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0c6      	beq.n	800811e <__sflush_r+0x32>
 8008190:	2b1d      	cmp	r3, #29
 8008192:	d001      	beq.n	8008198 <__sflush_r+0xac>
 8008194:	2b16      	cmp	r3, #22
 8008196:	d11e      	bne.n	80081d6 <__sflush_r+0xea>
 8008198:	602f      	str	r7, [r5, #0]
 800819a:	2000      	movs	r0, #0
 800819c:	e022      	b.n	80081e4 <__sflush_r+0xf8>
 800819e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	e01b      	b.n	80081de <__sflush_r+0xf2>
 80081a6:	690f      	ldr	r7, [r1, #16]
 80081a8:	2f00      	cmp	r7, #0
 80081aa:	d0f6      	beq.n	800819a <__sflush_r+0xae>
 80081ac:	0793      	lsls	r3, r2, #30
 80081ae:	680e      	ldr	r6, [r1, #0]
 80081b0:	bf08      	it	eq
 80081b2:	694b      	ldreq	r3, [r1, #20]
 80081b4:	600f      	str	r7, [r1, #0]
 80081b6:	bf18      	it	ne
 80081b8:	2300      	movne	r3, #0
 80081ba:	eba6 0807 	sub.w	r8, r6, r7
 80081be:	608b      	str	r3, [r1, #8]
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	dde9      	ble.n	800819a <__sflush_r+0xae>
 80081c6:	6a21      	ldr	r1, [r4, #32]
 80081c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081ca:	4643      	mov	r3, r8
 80081cc:	463a      	mov	r2, r7
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b0      	blx	r6
 80081d2:	2800      	cmp	r0, #0
 80081d4:	dc08      	bgt.n	80081e8 <__sflush_r+0xfc>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	4407      	add	r7, r0
 80081ea:	eba8 0800 	sub.w	r8, r8, r0
 80081ee:	e7e7      	b.n	80081c0 <__sflush_r+0xd4>
 80081f0:	dfbffffe 	.word	0xdfbffffe

080081f4 <_fflush_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	690b      	ldr	r3, [r1, #16]
 80081f8:	4605      	mov	r5, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	b913      	cbnz	r3, 8008204 <_fflush_r+0x10>
 80081fe:	2500      	movs	r5, #0
 8008200:	4628      	mov	r0, r5
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	b118      	cbz	r0, 800820e <_fflush_r+0x1a>
 8008206:	6a03      	ldr	r3, [r0, #32]
 8008208:	b90b      	cbnz	r3, 800820e <_fflush_r+0x1a>
 800820a:	f7ff f813 	bl	8007234 <__sinit>
 800820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f3      	beq.n	80081fe <_fflush_r+0xa>
 8008216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008218:	07d0      	lsls	r0, r2, #31
 800821a:	d404      	bmi.n	8008226 <_fflush_r+0x32>
 800821c:	0599      	lsls	r1, r3, #22
 800821e:	d402      	bmi.n	8008226 <_fflush_r+0x32>
 8008220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008222:	f7ff fa32 	bl	800768a <__retarget_lock_acquire_recursive>
 8008226:	4628      	mov	r0, r5
 8008228:	4621      	mov	r1, r4
 800822a:	f7ff ff5f 	bl	80080ec <__sflush_r>
 800822e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008230:	07da      	lsls	r2, r3, #31
 8008232:	4605      	mov	r5, r0
 8008234:	d4e4      	bmi.n	8008200 <_fflush_r+0xc>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	059b      	lsls	r3, r3, #22
 800823a:	d4e1      	bmi.n	8008200 <_fflush_r+0xc>
 800823c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800823e:	f7ff fa25 	bl	800768c <__retarget_lock_release_recursive>
 8008242:	e7dd      	b.n	8008200 <_fflush_r+0xc>

08008244 <__swhatbuf_r>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	460c      	mov	r4, r1
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	2900      	cmp	r1, #0
 800824e:	b096      	sub	sp, #88	@ 0x58
 8008250:	4615      	mov	r5, r2
 8008252:	461e      	mov	r6, r3
 8008254:	da0d      	bge.n	8008272 <__swhatbuf_r+0x2e>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800825c:	f04f 0100 	mov.w	r1, #0
 8008260:	bf14      	ite	ne
 8008262:	2340      	movne	r3, #64	@ 0x40
 8008264:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008268:	2000      	movs	r0, #0
 800826a:	6031      	str	r1, [r6, #0]
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	b016      	add	sp, #88	@ 0x58
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	466a      	mov	r2, sp
 8008274:	f000 f862 	bl	800833c <_fstat_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	dbec      	blt.n	8008256 <__swhatbuf_r+0x12>
 800827c:	9901      	ldr	r1, [sp, #4]
 800827e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008282:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008286:	4259      	negs	r1, r3
 8008288:	4159      	adcs	r1, r3
 800828a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800828e:	e7eb      	b.n	8008268 <__swhatbuf_r+0x24>

08008290 <__smakebuf_r>:
 8008290:	898b      	ldrh	r3, [r1, #12]
 8008292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008294:	079d      	lsls	r5, r3, #30
 8008296:	4606      	mov	r6, r0
 8008298:	460c      	mov	r4, r1
 800829a:	d507      	bpl.n	80082ac <__smakebuf_r+0x1c>
 800829c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	2301      	movs	r3, #1
 80082a6:	6163      	str	r3, [r4, #20]
 80082a8:	b003      	add	sp, #12
 80082aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ac:	ab01      	add	r3, sp, #4
 80082ae:	466a      	mov	r2, sp
 80082b0:	f7ff ffc8 	bl	8008244 <__swhatbuf_r>
 80082b4:	9f00      	ldr	r7, [sp, #0]
 80082b6:	4605      	mov	r5, r0
 80082b8:	4639      	mov	r1, r7
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff fa62 	bl	8007784 <_malloc_r>
 80082c0:	b948      	cbnz	r0, 80082d6 <__smakebuf_r+0x46>
 80082c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c6:	059a      	lsls	r2, r3, #22
 80082c8:	d4ee      	bmi.n	80082a8 <__smakebuf_r+0x18>
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	f043 0302 	orr.w	r3, r3, #2
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	e7e2      	b.n	800829c <__smakebuf_r+0xc>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	6020      	str	r0, [r4, #0]
 80082da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082e6:	b15b      	cbz	r3, 8008300 <__smakebuf_r+0x70>
 80082e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 f837 	bl	8008360 <_isatty_r>
 80082f2:	b128      	cbz	r0, 8008300 <__smakebuf_r+0x70>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	431d      	orrs	r5, r3
 8008304:	81a5      	strh	r5, [r4, #12]
 8008306:	e7cf      	b.n	80082a8 <__smakebuf_r+0x18>

08008308 <memmove>:
 8008308:	4288      	cmp	r0, r1
 800830a:	b510      	push	{r4, lr}
 800830c:	eb01 0402 	add.w	r4, r1, r2
 8008310:	d902      	bls.n	8008318 <memmove+0x10>
 8008312:	4284      	cmp	r4, r0
 8008314:	4623      	mov	r3, r4
 8008316:	d807      	bhi.n	8008328 <memmove+0x20>
 8008318:	1e43      	subs	r3, r0, #1
 800831a:	42a1      	cmp	r1, r4
 800831c:	d008      	beq.n	8008330 <memmove+0x28>
 800831e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008326:	e7f8      	b.n	800831a <memmove+0x12>
 8008328:	4402      	add	r2, r0
 800832a:	4601      	mov	r1, r0
 800832c:	428a      	cmp	r2, r1
 800832e:	d100      	bne.n	8008332 <memmove+0x2a>
 8008330:	bd10      	pop	{r4, pc}
 8008332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800833a:	e7f7      	b.n	800832c <memmove+0x24>

0800833c <_fstat_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	@ (800835c <_fstat_r+0x20>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	f7f9 fa8c 	bl	8001866 <_fstat>
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	d102      	bne.n	8008358 <_fstat_r+0x1c>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	b103      	cbz	r3, 8008358 <_fstat_r+0x1c>
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	20004568 	.word	0x20004568

08008360 <_isatty_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	@ (800837c <_isatty_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7f9 fa8b 	bl	8001886 <_isatty>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_isatty_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_isatty_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20004568 	.word	0x20004568

08008380 <_sbrk_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	@ (800839c <_sbrk_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7f9 fa94 	bl	80018b8 <_sbrk>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_sbrk_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_sbrk_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20004568 	.word	0x20004568

080083a0 <_realloc_r>:
 80083a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	4680      	mov	r8, r0
 80083a6:	4615      	mov	r5, r2
 80083a8:	460c      	mov	r4, r1
 80083aa:	b921      	cbnz	r1, 80083b6 <_realloc_r+0x16>
 80083ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b0:	4611      	mov	r1, r2
 80083b2:	f7ff b9e7 	b.w	8007784 <_malloc_r>
 80083b6:	b92a      	cbnz	r2, 80083c4 <_realloc_r+0x24>
 80083b8:	f7ff f978 	bl	80076ac <_free_r>
 80083bc:	2400      	movs	r4, #0
 80083be:	4620      	mov	r0, r4
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c4:	f000 f81a 	bl	80083fc <_malloc_usable_size_r>
 80083c8:	4285      	cmp	r5, r0
 80083ca:	4606      	mov	r6, r0
 80083cc:	d802      	bhi.n	80083d4 <_realloc_r+0x34>
 80083ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083d2:	d8f4      	bhi.n	80083be <_realloc_r+0x1e>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff f9d4 	bl	8007784 <_malloc_r>
 80083dc:	4607      	mov	r7, r0
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0ec      	beq.n	80083bc <_realloc_r+0x1c>
 80083e2:	42b5      	cmp	r5, r6
 80083e4:	462a      	mov	r2, r5
 80083e6:	4621      	mov	r1, r4
 80083e8:	bf28      	it	cs
 80083ea:	4632      	movcs	r2, r6
 80083ec:	f7ff f94f 	bl	800768e <memcpy>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4640      	mov	r0, r8
 80083f4:	f7ff f95a 	bl	80076ac <_free_r>
 80083f8:	463c      	mov	r4, r7
 80083fa:	e7e0      	b.n	80083be <_realloc_r+0x1e>

080083fc <_malloc_usable_size_r>:
 80083fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008400:	1f18      	subs	r0, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfbc      	itt	lt
 8008406:	580b      	ldrlt	r3, [r1, r0]
 8008408:	18c0      	addlt	r0, r0, r3
 800840a:	4770      	bx	lr

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
