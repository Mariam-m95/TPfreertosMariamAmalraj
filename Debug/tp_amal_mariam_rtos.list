
tp_amal_mariam_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009318  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b4c  08009b4c  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b4c  08009b4c  0000ab4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b54  08009b54  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009b5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000817c  20000074  08009bd0  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200081f0  08009bd0  0000b1f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c21  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c26  00000000  00000000  00023cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000278f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108c  00000000  00000000  00028e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e7e  00000000  00000000  00029ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a572  00000000  00000000  0002fd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd22b  00000000  00000000  0004a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001474ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062bc  00000000  00000000  00147544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094d0 	.word	0x080094d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080094d0 	.word	0x080094d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000094 	.word	0x20000094
 800061c:	200000f8 	.word	0x200000f8

08000620 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_FREERTOS_Init+0x30>)
 8000628:	1d3c      	adds	r4, r7, #4
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f004 feee 	bl	800541e <osThreadCreate>
 8000642:	4603      	mov	r3, r0
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <MX_FREERTOS_Init+0x34>)
 8000646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	080094f4 	.word	0x080094f4
 8000654:	20000090 	.word	0x20000090

08000658 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f004 ff28 	bl	80054b6 <osDelay>
 8000666:	e7fb      	b.n	8000660 <StartDefaultTask+0x8>

08000668 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b090      	sub	sp, #64	@ 0x40
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067e:	4bad      	ldr	r3, [pc, #692]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4aac      	ldr	r2, [pc, #688]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000684:	f043 0310 	orr.w	r3, r3, #16
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4baa      	ldr	r3, [pc, #680]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0310 	and.w	r3, r3, #16
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000696:	4ba7      	ldr	r3, [pc, #668]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4aa6      	ldr	r2, [pc, #664]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4ba4      	ldr	r3, [pc, #656]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4ba1      	ldr	r3, [pc, #644]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4aa0      	ldr	r2, [pc, #640]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b9e      	ldr	r3, [pc, #632]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
 80006c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b9b      	ldr	r3, [pc, #620]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b98      	ldr	r3, [pc, #608]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b95      	ldr	r3, [pc, #596]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a94      	ldr	r2, [pc, #592]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b92      	ldr	r3, [pc, #584]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b8f      	ldr	r3, [pc, #572]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b8c      	ldr	r3, [pc, #560]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800070e:	4b89      	ldr	r3, [pc, #548]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a88      	ldr	r2, [pc, #544]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b86      	ldr	r3, [pc, #536]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000726:	4b83      	ldr	r3, [pc, #524]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a82      	ldr	r2, [pc, #520]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b80      	ldr	r3, [pc, #512]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800073e:	4b7d      	ldr	r3, [pc, #500]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a7c      	ldr	r2, [pc, #496]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000744:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b7a      	ldr	r3, [pc, #488]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b77      	ldr	r3, [pc, #476]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a76      	ldr	r2, [pc, #472]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b74      	ldr	r3, [pc, #464]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b71      	ldr	r3, [pc, #452]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a70      	ldr	r2, [pc, #448]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b6e      	ldr	r3, [pc, #440]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	486b      	ldr	r0, [pc, #428]	@ (8000938 <MX_GPIO_Init+0x2d0>)
 800078c:	f001 fef8 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000796:	4869      	ldr	r0, [pc, #420]	@ (800093c <MX_GPIO_Init+0x2d4>)
 8000798:	f001 fef2 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	4867      	ldr	r0, [pc, #412]	@ (8000940 <MX_GPIO_Init+0x2d8>)
 80007a2:	f001 feed 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4865      	ldr	r0, [pc, #404]	@ (8000944 <MX_GPIO_Init+0x2dc>)
 80007ae:	f001 fee7 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	21c8      	movs	r1, #200	@ 0xc8
 80007b6:	4864      	ldr	r0, [pc, #400]	@ (8000948 <MX_GPIO_Init+0x2e0>)
 80007b8:	f001 fee2 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007cc:	230e      	movs	r3, #14
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	485d      	ldr	r0, [pc, #372]	@ (800094c <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 fd26 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007dc:	2308      	movs	r3, #8
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ec:	4619      	mov	r1, r3
 80007ee:	4857      	ldr	r0, [pc, #348]	@ (800094c <MX_GPIO_Init+0x2e4>)
 80007f0:	f001 fd1a 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007f4:	2304      	movs	r3, #4
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000804:	2309      	movs	r3, #9
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800080c:	4619      	mov	r1, r3
 800080e:	484f      	ldr	r0, [pc, #316]	@ (800094c <MX_GPIO_Init+0x2e4>)
 8000810:	f001 fd0a 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000814:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000826:	230b      	movs	r3, #11
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800082e:	4619      	mov	r1, r3
 8000830:	4845      	ldr	r0, [pc, #276]	@ (8000948 <MX_GPIO_Init+0x2e0>)
 8000832:	f001 fcf9 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000836:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000848:	230c      	movs	r3, #12
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	483e      	ldr	r0, [pc, #248]	@ (800094c <MX_GPIO_Init+0x2e4>)
 8000854:	f001 fce8 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086a:	2304      	movs	r3, #4
 800086c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000872:	4619      	mov	r1, r3
 8000874:	4836      	ldr	r0, [pc, #216]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 8000876:	f001 fcd7 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800087a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800088c:	230a      	movs	r3, #10
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000894:	4619      	mov	r1, r3
 8000896:	482e      	ldr	r0, [pc, #184]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 8000898:	f001 fcc6 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ac:	2302      	movs	r3, #2
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4826      	ldr	r0, [pc, #152]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 80008b8:	f001 fcb6 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008cc:	2308      	movs	r3, #8
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_GPIO_Init+0x2d0>)
 80008d8:	f001 fca6 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008ee:	230c      	movs	r3, #12
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4816      	ldr	r0, [pc, #88]	@ (8000954 <MX_GPIO_Init+0x2ec>)
 80008fa:	f001 fc95 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000910:	2301      	movs	r3, #1
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <MX_GPIO_Init+0x2f0>)
 800091c:	f001 fc84 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000930:	230d      	movs	r3, #13
 8000932:	e013      	b.n	800095c <MX_GPIO_Init+0x2f4>
 8000934:	40023800 	.word	0x40023800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40022000 	.word	0x40022000
 8000940:	40022800 	.word	0x40022800
 8000944:	40021c00 	.word	0x40021c00
 8000948:	40021800 	.word	0x40021800
 800094c:	40021000 	.word	0x40021000
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	48bc      	ldr	r0, [pc, #752]	@ (8000c58 <MX_GPIO_Init+0x5f0>)
 8000966:	f001 fc5f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800097a:	230a      	movs	r3, #10
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	48b5      	ldr	r0, [pc, #724]	@ (8000c5c <MX_GPIO_Init+0x5f4>)
 8000986:	f001 fc4f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800098a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a4:	4619      	mov	r1, r3
 80009a6:	48ae      	ldr	r0, [pc, #696]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 80009a8:	f001 fc3e 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009ac:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009be:	230e      	movs	r3, #14
 80009c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c6:	4619      	mov	r1, r3
 80009c8:	48a6      	ldr	r0, [pc, #664]	@ (8000c64 <MX_GPIO_Init+0x5fc>)
 80009ca:	f001 fc2d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	48a0      	ldr	r0, [pc, #640]	@ (8000c64 <MX_GPIO_Init+0x5fc>)
 80009e4:	f001 fc20 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	489a      	ldr	r0, [pc, #616]	@ (8000c68 <MX_GPIO_Init+0x600>)
 80009fe:	f001 fc13 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a02:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a14:	230c      	movs	r3, #12
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4892      	ldr	r0, [pc, #584]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000a20:	f001 fc02 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	488a      	ldr	r0, [pc, #552]	@ (8000c6c <MX_GPIO_Init+0x604>)
 8000a42:	f001 fbf1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a46:	23f0      	movs	r3, #240	@ 0xf0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a56:	230a      	movs	r3, #10
 8000a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4883      	ldr	r0, [pc, #524]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000a62:	f001 fbe1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a66:	23f7      	movs	r3, #247	@ 0xf7
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a76:	230e      	movs	r3, #14
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	487c      	ldr	r0, [pc, #496]	@ (8000c74 <MX_GPIO_Init+0x60c>)
 8000a82:	f001 fbd1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	486f      	ldr	r0, [pc, #444]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000aa4:	f001 fbc0 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aba:	230a      	movs	r3, #10
 8000abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4866      	ldr	r0, [pc, #408]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000ac6:	f001 fbaf 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aca:	2320      	movs	r3, #32
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4861      	ldr	r0, [pc, #388]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000ae2:	f001 fba1 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000af6:	230d      	movs	r3, #13
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4859      	ldr	r0, [pc, #356]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000b02:	f001 fb91 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000b06:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4854      	ldr	r0, [pc, #336]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000b20:	f001 fb82 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b36:	4619      	mov	r1, r3
 8000b38:	484f      	ldr	r0, [pc, #316]	@ (8000c78 <MX_GPIO_Init+0x610>)
 8000b3a:	f001 fb75 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b50:	230c      	movs	r3, #12
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4848      	ldr	r0, [pc, #288]	@ (8000c7c <MX_GPIO_Init+0x614>)
 8000b5c:	f001 fb64 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b60:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b72:	230e      	movs	r3, #14
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483c      	ldr	r0, [pc, #240]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000b7e:	f001 fb53 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	4836      	ldr	r0, [pc, #216]	@ (8000c74 <MX_GPIO_Init+0x60c>)
 8000b9a:	f001 fb45 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bb0:	230d      	movs	r3, #13
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4829      	ldr	r0, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000bbc:	f001 fb34 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4825      	ldr	r0, [pc, #148]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000bd4:	f001 fb28 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be8:	230c      	movs	r3, #12
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481d      	ldr	r0, [pc, #116]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000bf4:	f001 fb18 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bf8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <MX_GPIO_Init+0x618>)
 8000c0e:	f001 fb0b 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	@ (8000c80 <MX_GPIO_Init+0x618>)
 8000c2c:	f001 fafc 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c30:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c42:	230d      	movs	r3, #13
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <MX_GPIO_Init+0x618>)
 8000c4e:	f001 faeb 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e016      	b.n	8000c84 <MX_GPIO_Init+0x61c>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40022000 	.word	0x40022000
 8000c74:	40022800 	.word	0x40022800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40021400 	.word	0x40021400
 8000c80:	40021c00 	.word	0x40021c00
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	48a4      	ldr	r0, [pc, #656]	@ (8000f30 <MX_GPIO_Init+0x8c8>)
 8000c9e:	f001 fac3 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	489e      	ldr	r0, [pc, #632]	@ (8000f30 <MX_GPIO_Init+0x8c8>)
 8000cb8:	f001 fab6 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4896      	ldr	r0, [pc, #600]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000cda:	f001 faa5 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	488e      	ldr	r0, [pc, #568]	@ (8000f30 <MX_GPIO_Init+0x8c8>)
 8000cf6:	f001 fa97 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4888      	ldr	r0, [pc, #544]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000d16:	f001 fa87 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	4881      	ldr	r0, [pc, #516]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000d36:	f001 fa77 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d3a:	2328      	movs	r3, #40	@ 0x28
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4879      	ldr	r0, [pc, #484]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000d56:	f001 fa67 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d5a:	23c8      	movs	r3, #200	@ 0xc8
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4873      	ldr	r0, [pc, #460]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000d72:	f001 fa59 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d76:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	486e      	ldr	r0, [pc, #440]	@ (8000f44 <MX_GPIO_Init+0x8dc>)
 8000d8c:	f001 fa4c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d90:	2308      	movs	r3, #8
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da0:	230c      	movs	r3, #12
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	4863      	ldr	r0, [pc, #396]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000dac:	f001 fa3c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000db0:	2305      	movs	r3, #5
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	485b      	ldr	r0, [pc, #364]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000dcc:	f001 fa2c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dd0:	2332      	movs	r3, #50	@ 0x32
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4853      	ldr	r0, [pc, #332]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000dec:	f001 fa1c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df0:	2304      	movs	r3, #4
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e00:	2309      	movs	r3, #9
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	484f      	ldr	r0, [pc, #316]	@ (8000f48 <MX_GPIO_Init+0x8e0>)
 8000e0c:	f001 fa0c 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e10:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e22:	2309      	movs	r3, #9
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4847      	ldr	r0, [pc, #284]	@ (8000f4c <MX_GPIO_Init+0x8e4>)
 8000e2e:	f001 f9fb 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e32:	2304      	movs	r3, #4
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e42:	4619      	mov	r1, r3
 8000e44:	483e      	ldr	r0, [pc, #248]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000e46:	f001 f9ef 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e4a:	2386      	movs	r3, #134	@ 0x86
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4833      	ldr	r0, [pc, #204]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000e66:	f001 f9df 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	482d      	ldr	r0, [pc, #180]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000e7e:	f001 f9d3 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e82:	2350      	movs	r3, #80	@ 0x50
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e92:	230d      	movs	r3, #13
 8000e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4825      	ldr	r0, [pc, #148]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000e9e:	f001 f9c3 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ea2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481f      	ldr	r0, [pc, #124]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000ec0:	f001 f9b2 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ec4:	2328      	movs	r3, #40	@ 0x28
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	4815      	ldr	r0, [pc, #84]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000ee0:	f001 f9a2 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ee4:	2340      	movs	r3, #64	@ 0x40
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ef4:	2309      	movs	r3, #9
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000f00:	f001 f992 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f04:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f16:	2305      	movs	r3, #5
 8000f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <MX_GPIO_Init+0x8e0>)
 8000f22:	f001 f981 	bl	8002228 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	@ 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40021c00 	.word	0x40021c00
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020c00 	.word	0x40020c00

08000f50 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f58:	1d39      	adds	r1, r7, #4
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <__io_putchar+0x20>)
 8000f62:	f002 ffa1 	bl	8003ea8 <HAL_UART_Transmit>
	return ch;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200006c4 	.word	0x200006c4

08000f74 <fonction>:
		vTaskDelay(pdMS_TO_TICKS(delay));
	}
}

int fonction(int argc, char ** argv)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <fonction+0x1c>)
 8000f80:	f007 fa2e 	bl	80083e0 <puts>
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	08009638 	.word	0x08009638

08000f94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x24>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <HAL_UART_RxCpltCallback+0x18>
	{
		shell_uart_receive_irq_cb();
 8000fa6:	f000 fae1 	bl	800156c <shell_uart_receive_irq_cb>
	}
	else{
		Error_Handler();
	}
}
 8000faa:	e001      	b.n	8000fb0 <HAL_UART_RxCpltCallback+0x1c>
		Error_Handler();
 8000fac:	f000 face 	bl	800154c <Error_Handler>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40011000 	.word	0x40011000

08000fbc <led_task>:

void led_task(void *pvParameters){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	int period = (int)pvParameters;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <led_task+0x34>)
 8000fce:	f001 fad7 	bl	8002580 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fa3b 	bl	8006450 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <led_task+0x34>)
 8000fe0:	f001 face 	bl	8002580 <HAL_GPIO_WritePin>
		vTaskDelay(period);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 fa32 	bl	8006450 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8000fec:	bf00      	nop
 8000fee:	e7eb      	b.n	8000fc8 <led_task+0xc>
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <sh_led>:
	}
}

int sh_led(int argc, char ** argv)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	if(argc>1){
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	dd43      	ble.n	800108c <sh_led+0x98>
		int period = atoi(argv[1]);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f007 f836 	bl	800807c <atoi>
 8001010:	60f8      	str	r0, [r7, #12]
		if(period ==0){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d112      	bne.n	800103e <sh_led+0x4a>
			if (xLedTaskHandle != NULL) {
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <sh_led+0xb0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01a      	beq.n	8001056 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8001020:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <sh_led+0xb0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f005 f981 	bl	800632c <vTaskDelete>
				xLedTaskHandle = NULL;
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <sh_led+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2102      	movs	r1, #2
 8001034:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <sh_led+0xb4>)
 8001036:	f001 faa3 	bl	8002580 <HAL_GPIO_WritePin>
				return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e02d      	b.n	800109a <sh_led+0xa6>
			}
		}
		else{
			if (xLedTaskHandle != NULL) {
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <sh_led+0xb0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <sh_led+0x62>
				vTaskDelete(xLedTaskHandle);
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <sh_led+0xb0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f005 f96e 	bl	800632c <vTaskDelete>
				xLedTaskHandle = NULL;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <sh_led+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
			}
		}
		BaseType_t ret = xTaskCreate(led_task, "LED_Task", STACK_SIZE_LONG, (void*)period, TASK_LED_PRIORITY, &xLedTaskHandle);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <sh_led+0xb0>)
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	9200      	str	r2, [sp, #0]
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	4911      	ldr	r1, [pc, #68]	@ (80010ac <sh_led+0xb8>)
 8001066:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <sh_led+0xbc>)
 8001068:	f005 f814 	bl	8006094 <xTaskCreate>
 800106c:	60b8      	str	r0, [r7, #8]
		if (ret == pdPASS) {
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d104      	bne.n	800107e <sh_led+0x8a>
			printf("Tâche LED lancée avec une période de %d ms\r\n",period);
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <sh_led+0xc0>)
 8001078:	f007 f94a 	bl	8008310 <iprintf>
 800107c:	e004      	b.n	8001088 <sh_led+0x94>
		} else {
			printf("Erreur création tâche LED\r\n");
 800107e:	480e      	ldr	r0, [pc, #56]	@ (80010b8 <sh_led+0xc4>)
 8001080:	f007 f9ae 	bl	80083e0 <puts>
			Error_Handler();
 8001084:	f000 fa62 	bl	800154c <Error_Handler>
		}
		return 1;
 8001088:	2301      	movs	r3, #1
 800108a:	e006      	b.n	800109a <sh_led+0xa6>
	}
	else{
		printf("Erreur : ajouter la période\r\n");
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <sh_led+0xc8>)
 800108e:	f007 f9a7 	bl	80083e0 <puts>
		Error_Handler();
 8001092:	f000 fa5b 	bl	800154c <Error_Handler>
		return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002fc 	.word	0x200002fc
 80010a8:	40022000 	.word	0x40022000
 80010ac:	08009654 	.word	0x08009654
 80010b0:	08000fbd 	.word	0x08000fbd
 80010b4:	08009660 	.word	0x08009660
 80010b8:	08009690 	.word	0x08009690
 80010bc:	080096b0 	.word	0x080096b0

080010c0 <spam_task>:

void spam_task(void *pvParameters) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	SpamParams *params = (SpamParams*) pvParameters;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	613b      	str	r3, [r7, #16]
	char* msg = params->msg;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
	int count = params->count;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60bb      	str	r3, [r7, #8]
	int i;

	if (xMutexSpam == NULL) {
 80010d8:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <spam_task+0xa4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <spam_task+0x2c>
		xMutexSpam = xSemaphoreCreateMutex();
 80010e0:	2001      	movs	r0, #1
 80010e2:	f004 fb9d 	bl	8005820 <xQueueCreateMutex>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <spam_task+0xa4>)
 80010ea:	6013      	str	r3, [r2, #0]
	}

	if (xMutexSpam != NULL) {
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <spam_task+0xa4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d022      	beq.n	800113a <spam_task+0x7a>
		if (xSemaphoreTake(xMutexSpam, portMAX_DELAY) == pdPASS) {
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <spam_task+0xa4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fd49 	bl	8005b94 <xQueueSemaphoreTake>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d11d      	bne.n	8001144 <spam_task+0x84>
			for (i = 0; i < count; i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e009      	b.n	8001122 <spam_task+0x62>
				printf("%s\r\n", msg);
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	4815      	ldr	r0, [pc, #84]	@ (8001168 <spam_task+0xa8>)
 8001112:	f007 f8fd 	bl	8008310 <iprintf>
				vTaskDelay(pdMS_TO_TICKS(100));
 8001116:	2064      	movs	r0, #100	@ 0x64
 8001118:	f005 f99a 	bl	8006450 <vTaskDelay>
			for (i = 0; i < count; i++) {
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbf1      	blt.n	800110e <spam_task+0x4e>
			}
			xSemaphoreGive(xMutexSpam);
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <spam_task+0xa4>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	f004 fb8c 	bl	8005850 <xQueueGenericSend>
 8001138:	e004      	b.n	8001144 <spam_task+0x84>
		}
	} else {
		printf("Erreur création du mutex\r\n");
 800113a:	480c      	ldr	r0, [pc, #48]	@ (800116c <spam_task+0xac>)
 800113c:	f007 f950 	bl	80083e0 <puts>
		Error_Handler();
 8001140:	f000 fa04 	bl	800154c <Error_Handler>
	}

	if (xSpamHandle != NULL) {
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <spam_task+0xb0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <spam_task+0x9c>
		vTaskDelete(xSpamHandle);
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <spam_task+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f005 f8eb 	bl	800632c <vTaskDelete>
		xSpamHandle = NULL;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <spam_task+0xb0>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
	}
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000308 	.word	0x20000308
 8001168:	080096d0 	.word	0x080096d0
 800116c:	080096d8 	.word	0x080096d8
 8001170:	20000304 	.word	0x20000304

08001174 <sh_spam>:

int sh_spam(int argc, char **argv) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	if (argc > 2) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	dd4e      	ble.n	8001222 <sh_spam+0xae>
		spam_params.msg = argv[1];
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a2b      	ldr	r2, [pc, #172]	@ (8001238 <sh_spam+0xc4>)
 800118a:	6013      	str	r3, [r2, #0]
		spam_params.count = atoi(argv[2]);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3308      	adds	r3, #8
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f006 ff72 	bl	800807c <atoi>
 8001198:	4603      	mov	r3, r0
 800119a:	4a27      	ldr	r2, [pc, #156]	@ (8001238 <sh_spam+0xc4>)
 800119c:	6053      	str	r3, [r2, #4]

		if (xMutexSpam == NULL) {
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <sh_spam+0xc8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d105      	bne.n	80011b2 <sh_spam+0x3e>
			xMutexSpam = xSemaphoreCreateMutex();
 80011a6:	2001      	movs	r0, #1
 80011a8:	f004 fb3a 	bl	8005820 <xQueueCreateMutex>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <sh_spam+0xc8>)
 80011b0:	6013      	str	r3, [r2, #0]
		}

		if (xMutexSpam != NULL) {
 80011b2:	4b22      	ldr	r3, [pc, #136]	@ (800123c <sh_spam+0xc8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d029      	beq.n	800120e <sh_spam+0x9a>
			if (xSemaphoreTake(xMutexSpam, portMAX_DELAY) == pdPASS) {
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <sh_spam+0xc8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f04f 31ff 	mov.w	r1, #4294967295
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fce6 	bl	8005b94 <xQueueSemaphoreTake>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d127      	bne.n	800121e <sh_spam+0xaa>
				BaseType_t ret = xTaskCreate(spam_task, "SPAM_task", STACK_SIZE_LONG, (void*)&spam_params, TASK_SPAM_PRIORITY, &xSpamHandle);
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <sh_spam+0xcc>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <sh_spam+0xc4>)
 80011d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011dc:	4919      	ldr	r1, [pc, #100]	@ (8001244 <sh_spam+0xd0>)
 80011de:	481a      	ldr	r0, [pc, #104]	@ (8001248 <sh_spam+0xd4>)
 80011e0:	f004 ff58 	bl	8006094 <xTaskCreate>
 80011e4:	60f8      	str	r0, [r7, #12]
				if (ret == pdPASS) {
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d103      	bne.n	80011f4 <sh_spam+0x80>
					printf("Debut SPAM : \r\n");
 80011ec:	4817      	ldr	r0, [pc, #92]	@ (800124c <sh_spam+0xd8>)
 80011ee:	f007 f8f7 	bl	80083e0 <puts>
 80011f2:	e004      	b.n	80011fe <sh_spam+0x8a>
				} else {
					printf("Erreur création tâche SPAM\r\n");
 80011f4:	4816      	ldr	r0, [pc, #88]	@ (8001250 <sh_spam+0xdc>)
 80011f6:	f007 f8f3 	bl	80083e0 <puts>
					Error_Handler();
 80011fa:	f000 f9a7 	bl	800154c <Error_Handler>
				}
				xSemaphoreGive(xMutexSpam);
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <sh_spam+0xc8>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	f004 fb22 	bl	8005850 <xQueueGenericSend>
 800120c:	e007      	b.n	800121e <sh_spam+0xaa>
			}
		} else {
			printf("Erreur création du mutex\r\n");
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <sh_spam+0xe0>)
 8001210:	f007 f8e6 	bl	80083e0 <puts>
			Error_Handler();
 8001214:	f000 f99a 	bl	800154c <Error_Handler>
			return -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	e008      	b.n	8001230 <sh_spam+0xbc>
		}
		return 1;
 800121e:	2301      	movs	r3, #1
 8001220:	e006      	b.n	8001230 <sh_spam+0xbc>
	} else {
		printf("Erreur : ajouter le message et le nombre de répétitions\r\n");
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <sh_spam+0xe4>)
 8001224:	f007 f8dc 	bl	80083e0 <puts>
		Error_Handler();
 8001228:	f000 f990 	bl	800154c <Error_Handler>
		return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000310 	.word	0x20000310
 800123c:	20000308 	.word	0x20000308
 8001240:	20000304 	.word	0x20000304
 8001244:	080096f4 	.word	0x080096f4
 8001248:	080010c1 	.word	0x080010c1
 800124c:	08009700 	.word	0x08009700
 8001250:	08009710 	.word	0x08009710
 8001254:	080096d8 	.word	0x080096d8
 8001258:	08009730 	.word	0x08009730

0800125c <vApplicationStackOverflowHook>:

	return 1;
}

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	printf("Stack overflow détecté dans la tâche : %s\r\n", pcTaskName);
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <vApplicationStackOverflowHook+0x20>)
 800126a:	f007 f851 	bl	8008310 <iprintf>
	Error_Handler();
 800126e:	f000 f96d 	bl	800154c <Error_Handler>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800980c 	.word	0x0800980c

08001280 <configureTimerForRunTimeStats>:


void configureTimerForRunTimeStats(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <configureTimerForRunTimeStats+0x10>)
 8001286:	f002 fab7 	bl	80037f8 <HAL_TIM_Base_Start_IT>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000678 	.word	0x20000678

08001294 <stats_task>:

void stats_task(void *pvParameters)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800129a:	af00      	add	r7, sp, #0
 800129c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80012a0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80012a4:	6018      	str	r0, [r3, #0]
	char stats_buffer[512];
	char task_list_buffer[512];

	printf("\r\n=== Liste des tâches (vTaskList) ===\r\n");
 80012a6:	4815      	ldr	r0, [pc, #84]	@ (80012fc <stats_task+0x68>)
 80012a8:	f007 f89a 	bl	80083e0 <puts>
	vTaskList(task_list_buffer);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 f925 	bl	8007500 <vTaskList>
	printf("Nom\tEtat\tPriorité\tStack\tN°\r\n");
 80012b6:	4812      	ldr	r0, [pc, #72]	@ (8001300 <stats_task+0x6c>)
 80012b8:	f007 f892 	bl	80083e0 <puts>
	printf("%s\r\n", task_list_buffer);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	@ (8001304 <stats_task+0x70>)
 80012c4:	f007 f824 	bl	8008310 <iprintf>

	printf("=== Statistiques d'exécution (vTaskGetRunTimeStats) ===\r\n");
 80012c8:	480f      	ldr	r0, [pc, #60]	@ (8001308 <stats_task+0x74>)
 80012ca:	f007 f889 	bl	80083e0 <puts>
	vTaskGetRunTimeStats(stats_buffer);
 80012ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 f9aa 	bl	800762c <vTaskGetRunTimeStats>
	printf("Nom\tTemps\t\t%% CPU\r\n");
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <stats_task+0x78>)
 80012da:	f007 f819 	bl	8008310 <iprintf>
	printf("%s\r\n", stats_buffer);
 80012de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <stats_task+0x70>)
 80012e6:	f007 f813 	bl	8008310 <iprintf>

	vTaskDelay(pdMS_TO_TICKS(2000));
 80012ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ee:	f005 f8af 	bl	8006450 <vTaskDelay>
}
 80012f2:	bf00      	nop
 80012f4:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	0800983c 	.word	0x0800983c
 8001300:	08009868 	.word	0x08009868
 8001304:	080096d0 	.word	0x080096d0
 8001308:	08009888 	.word	0x08009888
 800130c:	080098c4 	.word	0x080098c4

08001310 <sh_stats>:

int sh_stats(int argc, char **argv)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	BaseType_t ret = xTaskCreate(stats_task, "Stats_task", 512, NULL, tskIDLE_PRIORITY + 1, NULL);
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2301      	movs	r3, #1
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <sh_stats+0x38>)
 800132a:	4808      	ldr	r0, [pc, #32]	@ (800134c <sh_stats+0x3c>)
 800132c:	f004 feb2 	bl	8006094 <xTaskCreate>
 8001330:	60f8      	str	r0, [r7, #12]
	if (ret == pdPASS) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d001      	beq.n	800133c <sh_stats+0x2c>
		//printf("Tâche de statistiques lancée.\r\n");
	} else {
		//printf("Erreur création tâche de statistiques.\r\n");
		Error_Handler();
 8001338:	f000 f908 	bl	800154c <Error_Handler>
	}
	return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	080098d8 	.word	0x080098d8
 800134c:	08001295 	.word	0x08001295

08001350 <task_shell>:


void task_shell(void * unused){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	shell_init();
 8001358:	f000 f994 	bl	8001684 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <task_shell+0x40>)
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <task_shell+0x44>)
 8001360:	2066      	movs	r0, #102	@ 0x66
 8001362:	f000 f9c7 	bl	80016f4 <shell_add>
	shell_add('l', sh_led, "Fonction LED");
 8001366:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <task_shell+0x48>)
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <task_shell+0x4c>)
 800136a:	206c      	movs	r0, #108	@ 0x6c
 800136c:	f000 f9c2 	bl	80016f4 <shell_add>
	shell_add('s', sh_spam, "Fonction SPAM");
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <task_shell+0x50>)
 8001372:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <task_shell+0x54>)
 8001374:	2073      	movs	r0, #115	@ 0x73
 8001376:	f000 f9bd 	bl	80016f4 <shell_add>
	shell_add('e',sh_stats, "Fonction Stats");
 800137a:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <task_shell+0x58>)
 800137c:	490b      	ldr	r1, [pc, #44]	@ (80013ac <task_shell+0x5c>)
 800137e:	2065      	movs	r0, #101	@ 0x65
 8001380:	f000 f9b8 	bl	80016f4 <shell_add>
	//shell_add('o',sh_overflow, "Fonction Overflow");
	shell_run();	// boucle infinie
 8001384:	f000 fa62 	bl	800184c <shell_run>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	080098e4 	.word	0x080098e4
 8001394:	08000f75 	.word	0x08000f75
 8001398:	080098fc 	.word	0x080098fc
 800139c:	08000ff5 	.word	0x08000ff5
 80013a0:	0800990c 	.word	0x0800990c
 80013a4:	08001175 	.word	0x08001175
 80013a8:	0800991c 	.word	0x0800991c
 80013ac:	08001311 	.word	0x08001311

080013b0 <getRunTimeCounterValue>:


extern volatile unsigned long ulHighFrequencyTimerTicks;

unsigned long getRunTimeCounterValue(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks++;
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <getRunTimeCounterValue+0x18>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4903      	ldr	r1, [pc, #12]	@ (80013c8 <getRunTimeCounterValue+0x18>)
 80013bc:	600a      	str	r2, [r1, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000670 	.word	0x20000670

080013cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80013d2:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d4:	f000 fd03 	bl	8001dde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013d8:	f000 f84c 	bl	8001474 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013dc:	f7ff f944 	bl	8000668 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80013e0:	f000 fc1a 	bl	8001c18 <MX_USART1_UART_Init>
	MX_TIM6_Init();
 80013e4:	f000 fbbc 	bl	8001b60 <MX_TIM6_Init>
	//
	//	xTaskCreate(BlinkTask, "LED_Task", TASK_STACK, NULL, BLINK_TASK_PRIORITY, NULL);


	////////Semaphore
	xSemaphore = xSemaphoreCreateBinary();
 80013e8:	2203      	movs	r2, #3
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f004 f997 	bl	8005720 <xQueueGenericCreate>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <main+0x8c>)
 80013f6:	6013      	str	r3, [r2, #0]
	//		vTaskStartScheduler();
	//	}

	////////////Queues
	char stats_buffer[512];  // Taille suffisante
	vTaskGetRunTimeStats(stats_buffer);
 80013f8:	463b      	mov	r3, r7
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 f916 	bl	800762c <vTaskGetRunTimeStats>
	printf("%s\r\n", stats_buffer);
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4815      	ldr	r0, [pc, #84]	@ (800145c <main+0x90>)
 8001406:	f006 ff83 	bl	8008310 <iprintf>


	//vTaskStartScheduler();


	xMutexPrint = xSemaphoreCreateMutex();
 800140a:	2001      	movs	r0, #1
 800140c:	f004 fa08 	bl	8005820 <xQueueCreateMutex>
 8001410:	4603      	mov	r3, r0
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <main+0x94>)
 8001414:	6013      	str	r3, [r2, #0]
	if (xMutexPrint == NULL) {
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <main+0x94>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <main+0x56>
		Error_Handler();  // Création mutex échouée
 800141e:	f000 f895 	bl	800154c <Error_Handler>
	}

	//////////////SHELL

	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <main+0x98>)
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2301      	movs	r3, #1
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	490d      	ldr	r1, [pc, #52]	@ (8001468 <main+0x9c>)
 8001432:	480e      	ldr	r0, [pc, #56]	@ (800146c <main+0xa0>)
 8001434:	f004 fe2e 	bl	8006094 <xTaskCreate>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d004      	beq.n	8001448 <main+0x7c>
	{
		printf("Error creating task shell\r\n");
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <main+0xa4>)
 8001440:	f006 ffce 	bl	80083e0 <puts>
		Error_Handler();
 8001444:	f000 f882 	bl	800154c <Error_Handler>
	}


	vTaskStartScheduler();
 8001448:	f005 f8a4 	bl	8006594 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800144c:	f7ff f8e8 	bl	8000620 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001450:	f003 ffde 	bl	8005410 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <main+0x88>
 8001458:	200002f8 	.word	0x200002f8
 800145c:	080096d0 	.word	0x080096d0
 8001460:	2000030c 	.word	0x2000030c
 8001464:	20000300 	.word	0x20000300
 8001468:	0800992c 	.word	0x0800992c
 800146c:	08001351 	.word	0x08001351
 8001470:	08009934 	.word	0x08009934

08001474 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	2230      	movs	r2, #48	@ 0x30
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f007 f8e4 	bl	8008650 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <SystemClock_Config+0xd0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	4a29      	ldr	r2, [pc, #164]	@ (8001544 <SystemClock_Config+0xd0>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <SystemClock_Config+0xd0>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <SystemClock_Config+0xd4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a24      	ldr	r2, [pc, #144]	@ (8001548 <SystemClock_Config+0xd4>)
 80014b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <SystemClock_Config+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 80014e0:	23d8      	movs	r3, #216	@ 0xd8
 80014e2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 f8af 	bl	8002654 <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80014fc:	f000 f826 	bl	800154c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001500:	f001 f858 	bl	80025b4 <HAL_PWREx_EnableOverDrive>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800150a:	f000 f81f 	bl	800154c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800151a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800151e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2107      	movs	r1, #7
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fb35 	bl	8002b9c <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001538:	f000 f808 	bl	800154c <Error_Handler>
	}
}
 800153c:	bf00      	nop
 800153e:	3750      	adds	r7, #80	@ 0x50
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		printf("ERREUR\r\n");
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <Error_Handler+0x1c>)
 8001556:	f006 ff43 	bl	80083e0 <puts>
		HAL_Delay(500);
 800155a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800155e:	f000 fc9b 	bl	8001e98 <HAL_Delay>
		printf("ERREUR\r\n");
 8001562:	bf00      	nop
 8001564:	e7f6      	b.n	8001554 <Error_Handler+0x8>
 8001566:	bf00      	nop
 8001568:	08009950 	.word	0x08009950

0800156c <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <shell_uart_receive_irq_cb+0x38>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fa70 	bl	8005a64 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <shell_uart_receive_irq_cb+0x2e>
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <shell_uart_receive_irq_cb+0x3c>)
 800158c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	f3bf 8f6f 	isb	sy
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000644 	.word	0x20000644
 80015a8:	e000ed04 	.word	0xe000ed04

080015ac <uart_read>:

static char uart_read() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <uart_read+0x2c>)
 80015ba:	f002 fcfe 	bl	8003fba <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <uart_read+0x30>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fae4 	bl	8005b94 <xQueueSemaphoreTake>

	return c;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200006c4 	.word	0x200006c4
 80015dc:	20000644 	.word	0x20000644

080015e0 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <uart_write+0x24>)
 80015f6:	f002 fc57 	bl	8003ea8 <HAL_UART_Transmit>
	return size;
 80015fa:	887b      	ldrh	r3, [r7, #2]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200006c4 	.word	0x200006c4

08001608 <sh_help>:

static int sh_help(int argc, char ** argv) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e022      	b.n	800165e <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001618:	4916      	ldr	r1, [pc, #88]	@ (8001674 <sh_help+0x6c>)
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	4912      	ldr	r1, [pc, #72]	@ (8001674 <sh_help+0x6c>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4603      	mov	r3, r0
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <sh_help+0x70>)
 8001642:	2128      	movs	r1, #40	@ 0x28
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <sh_help+0x74>)
 8001646:	f006 fed3 	bl	80083f0 <sniprintf>
 800164a:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <sh_help+0x74>)
 8001654:	f7ff ffc4 	bl	80015e0 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <sh_help+0x78>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbd7      	blt.n	8001618 <sh_help+0x10>
	}

	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000031c 	.word	0x2000031c
 8001678:	08009958 	.word	0x08009958
 800167c:	2000061c 	.word	0x2000061c
 8001680:	20000318 	.word	0x20000318

08001684 <shell_init>:

void shell_init() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	int size = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <shell_init+0x58>)
 8001690:	2128      	movs	r1, #40	@ 0x28
 8001692:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <shell_init+0x5c>)
 8001694:	f006 feac 	bl	80083f0 <sniprintf>
 8001698:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	480f      	ldr	r0, [pc, #60]	@ (80016e0 <shell_init+0x5c>)
 80016a2:	f7ff ff9d 	bl	80015e0 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 80016a6:	2203      	movs	r2, #3
 80016a8:	2100      	movs	r1, #0
 80016aa:	2001      	movs	r0, #1
 80016ac:	f004 f838 	bl	8005720 <xQueueGenericCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <shell_init+0x60>)
 80016b4:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <shell_init+0x60>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 80016be:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <shell_init+0x64>)
 80016c0:	f006 fe8e 	bl	80083e0 <puts>
		while(1);
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <shell_init+0x68>)
 80016ca:	4909      	ldr	r1, [pc, #36]	@ (80016f0 <shell_init+0x6c>)
 80016cc:	2068      	movs	r0, #104	@ 0x68
 80016ce:	f000 f811 	bl	80016f4 <shell_add>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	08009964 	.word	0x08009964
 80016e0:	2000061c 	.word	0x2000061c
 80016e4:	20000644 	.word	0x20000644
 80016e8:	0800998c 	.word	0x0800998c
 80016ec:	080099a4 	.word	0x080099a4
 80016f0:	08001609 	.word	0x08001609

080016f4 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <shell_add+0x74>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b3f      	cmp	r3, #63	@ 0x3f
 8001708:	dc26      	bgt.n	8001758 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <shell_add+0x74>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4917      	ldr	r1, [pc, #92]	@ (800176c <shell_add+0x78>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <shell_add+0x74>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4912      	ldr	r1, [pc, #72]	@ (800176c <shell_add+0x78>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <shell_add+0x74>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <shell_add+0x78>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3308      	adds	r3, #8
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <shell_add+0x74>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <shell_add+0x74>)
 8001752:	6013      	str	r3, [r2, #0]
		return 0;
 8001754:	2300      	movs	r3, #0
 8001756:	e001      	b.n	800175c <shell_add+0x68>
	}

	return -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	20000318 	.word	0x20000318
 800176c:	2000031c 	.word	0x2000031c

08001770 <shell_exec>:

static int shell_exec(char * buf) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	@ 0x40
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001784:	e040      	b.n	8001808 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8001786:	492d      	ldr	r1, [pc, #180]	@ (800183c <shell_exec+0xcc>)
 8001788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800179a:	429a      	cmp	r2, r3
 800179c:	d131      	bne.n	8001802 <shell_exec+0x92>
			argc = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017aa:	e013      	b.n	80017d4 <shell_exec+0x64>
				if(*p == ' ') {
 80017ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d10c      	bne.n	80017ce <shell_exec+0x5e>
					*p = '\0';
 80017b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80017ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017c2:	3201      	adds	r2, #1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	3340      	adds	r3, #64	@ 0x40
 80017c8:	443b      	add	r3, r7
 80017ca:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80017ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d0:	3301      	adds	r3, #1
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <shell_exec+0x72>
 80017dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017de:	2b07      	cmp	r3, #7
 80017e0:	dde4      	ble.n	80017ac <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80017e2:	4916      	ldr	r1, [pc, #88]	@ (800183c <shell_exec+0xcc>)
 80017e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	4611      	mov	r1, r2
 80017fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80017fc:	4798      	blx	r3
 80017fe:	4603      	mov	r3, r0
 8001800:	e017      	b.n	8001832 <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001804:	3301      	adds	r3, #1
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <shell_exec+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800180e:	429a      	cmp	r2, r3
 8001810:	dbb9      	blt.n	8001786 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001812:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001816:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <shell_exec+0xd4>)
 8001818:	2128      	movs	r1, #40	@ 0x28
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <shell_exec+0xd8>)
 800181c:	f006 fde8 	bl	80083f0 <sniprintf>
 8001820:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	b29b      	uxth	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <shell_exec+0xd8>)
 800182a:	f7ff fed9 	bl	80015e0 <uart_write>
	return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	3740      	adds	r7, #64	@ 0x40
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000031c 	.word	0x2000031c
 8001840:	20000318 	.word	0x20000318
 8001844:	080099ac 	.word	0x080099ac
 8001848:	2000061c 	.word	0x2000061c

0800184c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
	int reading = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 800185a:	2102      	movs	r1, #2
 800185c:	482a      	ldr	r0, [pc, #168]	@ (8001908 <shell_run+0xbc>)
 800185e:	f7ff febf 	bl	80015e0 <uart_write>
		reading = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8001866:	e047      	b.n	80018f8 <shell_run+0xac>
			char c = uart_read();
 8001868:	f7ff fea0 	bl	80015ac <uart_read>
 800186c:	4603      	mov	r3, r0
 800186e:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d025      	beq.n	80018c2 <shell_run+0x76>
 8001876:	2b0d      	cmp	r3, #13
 8001878:	d12e      	bne.n	80018d8 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 800187a:	4a24      	ldr	r2, [pc, #144]	@ (800190c <shell_run+0xc0>)
 800187c:	2128      	movs	r1, #40	@ 0x28
 800187e:	4824      	ldr	r0, [pc, #144]	@ (8001910 <shell_run+0xc4>)
 8001880:	f006 fdb6 	bl	80083f0 <sniprintf>
 8001884:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	4820      	ldr	r0, [pc, #128]	@ (8001910 <shell_run+0xc4>)
 800188e:	f7ff fea7 	bl	80015e0 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <shell_run+0xc8>)
 800189a:	2100      	movs	r1, #0
 800189c:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <shell_run+0xc8>)
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <shell_run+0xcc>)
 80018a2:	2128      	movs	r1, #40	@ 0x28
 80018a4:	481a      	ldr	r0, [pc, #104]	@ (8001910 <shell_run+0xc4>)
 80018a6:	f006 fda3 	bl	80083f0 <sniprintf>
 80018aa:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	4817      	ldr	r0, [pc, #92]	@ (8001910 <shell_run+0xc4>)
 80018b4:	f7ff fe94 	bl	80015e0 <uart_write>
				reading = 0;        //exit read loop
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
				break;
 80018c0:	e01a      	b.n	80018f8 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dd16      	ble.n	80018f6 <shell_run+0xaa>
					pos--;          //remove it in buffer
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 80018ce:	2103      	movs	r1, #3
 80018d0:	4812      	ldr	r0, [pc, #72]	@ (800191c <shell_run+0xd0>)
 80018d2:	f7ff fe85 	bl	80015e0 <uart_write>
				}
				break;
 80018d6:	e00e      	b.n	80018f6 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b27      	cmp	r3, #39	@ 0x27
 80018dc:	dc0c      	bgt.n	80018f8 <shell_run+0xac>
					uart_write(&c, 1);
 80018de:	1cfb      	adds	r3, r7, #3
 80018e0:	2101      	movs	r1, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe7c 	bl	80015e0 <uart_write>
					cmd_buffer[pos++] = c; //store
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	78f9      	ldrb	r1, [r7, #3]
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <shell_run+0xc8>)
 80018f2:	54d1      	strb	r1, [r2, r3]
 80018f4:	e000      	b.n	80018f8 <shell_run+0xac>
				break;
 80018f6:	bf00      	nop
		while(reading) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1b4      	bne.n	8001868 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <shell_run+0xc8>)
 8001900:	f7ff ff36 	bl	8001770 <shell_exec>
		uart_write(prompt, 2);
 8001904:	e7a9      	b.n	800185a <shell_run+0xe>
 8001906:	bf00      	nop
 8001908:	20000004 	.word	0x20000004
 800190c:	080099c4 	.word	0x080099c4
 8001910:	2000061c 	.word	0x2000061c
 8001914:	20000648 	.word	0x20000648
 8001918:	080099c8 	.word	0x080099c8
 800191c:	20000000 	.word	0x20000000

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	4a10      	ldr	r2, [pc, #64]	@ (800196c <HAL_MspInit+0x4c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	@ 0x40
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	f06f 0001 	mvn.w	r0, #1
 800195e:	f000 fb9a 	bl	8002096 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <NMI_Handler+0x4>

08001978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <UsageFault_Handler+0x4>

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019aa:	f000 fa55 	bl	8001e58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019ae:	f005 fbb7 	bl	8007120 <xTaskGetSchedulerState>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019b8:	f006 f8de 	bl	8007b78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <USART1_IRQHandler+0x10>)
 80019c6:	f002 fb3d 	bl	8004044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200006c4 	.word	0x200006c4

080019d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <TIM6_DAC_IRQHandler+0x18>)
 80019da:	f001 ff85 	bl	80038e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	ulHighFrequencyTimerTicks++;
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <TIM6_DAC_IRQHandler+0x1c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a02      	ldr	r2, [pc, #8]	@ (80019f0 <TIM6_DAC_IRQHandler+0x1c>)
 80019e6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000678 	.word	0x20000678
 80019f0:	20000670 	.word	0x20000670

080019f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e00a      	b.n	8001a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a06:	f3af 8000 	nop.w
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf0      	blt.n	8001a06 <_read+0x12>
  }

  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e009      	b.n	8001a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fa81 	bl	8000f50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf1      	blt.n	8001a40 <_write+0x12>
  }
  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_close>:

int _close(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_isatty>:

int _isatty(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f006 fdf4 	bl	80086ec <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20050000 	.word	0x20050000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000674 	.word	0x20000674
 8001b38:	200081f0 	.word	0x200081f0

08001b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <MX_TIM6_Init+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001b92:	f001 fdd9 	bl	8003748 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b9c:	f7ff fcd6 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_TIM6_Init+0x64>)
 8001bae:	f002 f881 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bb8:	f7ff fcc8 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000678 	.word	0x20000678
 8001bc8:	40001000 	.word	0x40001000

08001bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <HAL_TIM_Base_MspInit+0x44>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d113      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <HAL_TIM_Base_MspInit+0x48>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <HAL_TIM_Base_MspInit+0x48>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_TIM_Base_MspInit+0x48>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	2036      	movs	r0, #54	@ 0x36
 8001bfc:	f000 fa4b 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c00:	2036      	movs	r0, #54	@ 0x36
 8001c02:	f000 fa64 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40001000 	.word	0x40001000
 8001c14:	40023800 	.word	0x40023800

08001c18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c1e:	4a15      	ldr	r2, [pc, #84]	@ (8001c74 <MX_USART1_UART_Init+0x5c>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c22:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART1_UART_Init+0x58>)
 8001c5c:	f002 f8d6 	bl	8003e0c <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c66:	f7ff fc71 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200006c4 	.word	0x200006c4
 8001c74:	40011000 	.word	0x40011000

08001c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	2284      	movs	r2, #132	@ 0x84
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 fcd9 	bl	8008650 <memset>
  if(uartHandle->Instance==USART1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a36      	ldr	r2, [pc, #216]	@ (8001d7c <HAL_UART_MspInit+0x104>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d164      	bne.n	8001d72 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ca8:	2340      	movs	r3, #64	@ 0x40
 8001caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cac:	2300      	movs	r3, #0
 8001cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f957 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc0:	f7ff fc44 	bl	800154c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_UART_MspInit+0x108>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d24:	2307      	movs	r3, #7
 8001d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <HAL_UART_MspInit+0x10c>)
 8001d32:	f000 fa79 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d50:	2307      	movs	r3, #7
 8001d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <HAL_UART_MspInit+0x110>)
 8001d5e:	f000 fa63 	bl	8002228 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2105      	movs	r1, #5
 8001d66:	2025      	movs	r0, #37	@ 0x25
 8001d68:	f000 f995 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d6c:	2025      	movs	r0, #37	@ 0x25
 8001d6e:	f000 f9ae 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	37b0      	adds	r7, #176	@ 0xb0
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020000 	.word	0x40020000

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d90:	f7ff fed4 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d96:	490d      	ldr	r1, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dac:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f006 fc9d 	bl	80086f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff fb05 	bl	80013cc <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dd0:	08009b5c 	.word	0x08009b5c
  ldr r2, =_sbss
 8001dd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dd8:	200081f0 	.word	0x200081f0

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>

08001dde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de2:	2003      	movs	r0, #3
 8001de4:	f000 f94c 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de8:	200f      	movs	r0, #15
 8001dea:	f000 f805 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dee:	f7ff fd97 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f967 	bl	80020ea <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 f92f 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000010 	.word	0x20000010
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000010 	.word	0x20000010
 8001e7c:	2000074c 	.word	0x2000074c

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	2000074c 	.word	0x2000074c

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x40>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	05fa0000 	.word	0x05fa0000

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	@ (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	@ (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff feb6 	bl	8001e80 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d008      	beq.n	8002134 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2280      	movs	r2, #128	@ 0x80
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e052      	b.n	80021da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0216 	bic.w	r2, r2, #22
 8002142:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002152:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <HAL_DMA_Abort+0x62>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002184:	e013      	b.n	80021ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002186:	f7ff fe7b 	bl	8001e80 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b05      	cmp	r3, #5
 8002192:	d90c      	bls.n	80021ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e015      	b.n	80021da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e4      	bne.n	8002186 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	223f      	movs	r2, #63	@ 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d004      	beq.n	8002200 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e00c      	b.n	800221a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2205      	movs	r2, #5
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e175      	b.n	8002534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8164 	bne.w	800252e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x56>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80be 	beq.w	800252e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	4a65      	ldr	r2, [pc, #404]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023be:	4b63      	ldr	r3, [pc, #396]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ca:	4a61      	ldr	r2, [pc, #388]	@ (8002550 <HAL_GPIO_Init+0x328>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d037      	beq.n	8002466 <HAL_GPIO_Init+0x23e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_GPIO_Init+0x23a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a56      	ldr	r2, [pc, #344]	@ (800255c <HAL_GPIO_Init+0x334>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <HAL_GPIO_Init+0x236>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a55      	ldr	r2, [pc, #340]	@ (8002560 <HAL_GPIO_Init+0x338>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x232>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a54      	ldr	r2, [pc, #336]	@ (8002564 <HAL_GPIO_Init+0x33c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a53      	ldr	r2, [pc, #332]	@ (8002568 <HAL_GPIO_Init+0x340>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x22a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_GPIO_Init+0x344>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x226>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <HAL_GPIO_Init+0x348>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x222>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a50      	ldr	r2, [pc, #320]	@ (8002574 <HAL_GPIO_Init+0x34c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	@ (8002578 <HAL_GPIO_Init+0x350>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x21a>
 800243e:	2309      	movs	r3, #9
 8002440:	e012      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002442:	230a      	movs	r3, #10
 8002444:	e010      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002446:	2308      	movs	r3, #8
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244a:	2307      	movs	r3, #7
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	@ (8002550 <HAL_GPIO_Init+0x328>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a34      	ldr	r2, [pc, #208]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_GPIO_Init+0x354>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae86 	bls.w	8002248 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40021800 	.word	0x40021800
 8002570:	40021c00 	.word	0x40021c00
 8002574:	40022000 	.word	0x40022000
 8002578:	40022400 	.word	0x40022400
 800257c:	40013c00 	.word	0x40013c00

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a22      	ldr	r2, [pc, #136]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1d      	ldr	r2, [pc, #116]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e2:	f7ff fc4d 	bl	8001e80 <HAL_GetTick>
 80025e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e8:	e009      	b.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ea:	f7ff fc49 	bl	8001e80 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025f8:	d901      	bls.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e022      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260a:	d1ee      	bne.n	80025ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7ff fc32 	bl	8001e80 <HAL_GetTick>
 800261c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261e:	e009      	b.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002620:	f7ff fc2e 	bl	8001e80 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800262e:	d901      	bls.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e007      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002640:	d1ee      	bne.n	8002620 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e291      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b96      	ldr	r3, [pc, #600]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002684:	4b93      	ldr	r3, [pc, #588]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
 8002690:	4b90      	ldr	r3, [pc, #576]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b8d      	ldr	r3, [pc, #564]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x130>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e26b      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x7a>
 80026c0:	4b84      	ldr	r3, [pc, #528]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a83      	ldr	r2, [pc, #524]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x9c>
 80026d6:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7e      	ldr	r2, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b7c      	ldr	r3, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7b      	ldr	r2, [pc, #492]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xc0>
 80026fa:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a72      	ldr	r2, [pc, #456]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 8002714:	4b6f      	ldr	r3, [pc, #444]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b6c      	ldr	r3, [pc, #432]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6b      	ldr	r2, [pc, #428]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff fba4 	bl	8001e80 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff fba0 	bl	8001e80 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e21f      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff fb90 	bl	8001e80 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff fb8c 	bl	8001e80 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	@ 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e20b      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x110>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d069      	beq.n	8002866 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b50      	ldr	r3, [pc, #320]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
 80027aa:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b47      	ldr	r3, [pc, #284]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1df      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	493d      	ldr	r1, [pc, #244]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e040      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff fb42 	bl	8001e80 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fb3e 	bl	8001e80 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1bd      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4929      	ldr	r1, [pc, #164]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
 8002832:	e018      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a26      	ldr	r2, [pc, #152]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff fb1e 	bl	8001e80 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff fb1a 	bl	8001e80 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e199      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d038      	beq.n	80028e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7ff fafb 	bl	8001e80 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7ff faf7 	bl	8001e80 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e176      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x23a>
 80028ac:	e01a      	b.n	80028e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7ff fae1 	bl	8001e80 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7ff fadd 	bl	8001e80 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d903      	bls.n	80028d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e15c      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
 80028d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b91      	ldr	r3, [pc, #580]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a4 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a87      	ldr	r2, [pc, #540]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b85      	ldr	r3, [pc, #532]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002926:	4b7f      	ldr	r3, [pc, #508]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff faa5 	bl	8001e80 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff faa1 	bl	8001e80 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	@ 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e120      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x31a>
 8002960:	4b6f      	ldr	r3, [pc, #444]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	4a6e      	ldr	r2, [pc, #440]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x33c>
 8002976:	4b6a      	ldr	r3, [pc, #424]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a69      	ldr	r2, [pc, #420]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b67      	ldr	r3, [pc, #412]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a66      	ldr	r2, [pc, #408]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x35e>
 8002998:	4b61      	ldr	r3, [pc, #388]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a60      	ldr	r2, [pc, #384]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029be:	4b58      	ldr	r3, [pc, #352]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a57      	ldr	r2, [pc, #348]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7ff fa55 	bl	8001e80 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fa51 	bl	8001e80 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0ce      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x386>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fa3f 	bl	8001e80 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fa3b 	bl	8001e80 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a4 	beq.w	8002b8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d06b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d149      	bne.n	8002aec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a30      	ldr	r2, [pc, #192]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff fa0c 	bl	8001e80 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff fa08 	bl	8001e80 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e087      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b28      	ldr	r3, [pc, #160]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ab6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f9dc 	bl	8001e80 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7ff f9d8 	bl	8001e80 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e057      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x478>
 8002aea:	e04f      	b.n	8002b8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff f9c2 	bl	8001e80 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff f9be 	bl	8001e80 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e03d      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x4ac>
 8002b1e:	e035      	b.n	8002b8c <HAL_RCC_OscConfig+0x538>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x544>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d121      	bne.n	8002b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d0      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	4965      	ldr	r1, [pc, #404]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d040      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e073      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06b      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4936      	ldr	r1, [pc, #216]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7ff f8f6 	bl	8001e80 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7ff f8f2 	bl	8001e80 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e053      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d210      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 020f 	bic.w	r2, r3, #15
 8002cd6:	4922      	ldr	r1, [pc, #136]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x1cc>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1d0>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1d4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f852 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08009a00 	.word	0x08009a00
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b090      	sub	sp, #64	@ 0x40
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80a1 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dac:	e09b      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db2:	e098      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df4:	460a      	mov	r2, r1
 8002df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e0e:	f7fd fa57 	bl	80002c0 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e1a:	e053      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e66:	ebb2 0408 	subs.w	r4, r2, r8
 8002e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	00eb      	lsls	r3, r5, #3
 8002e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	eb14 030a 	adds.w	r3, r4, sl
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	eb45 030b 	adc.w	r3, r5, fp
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb8:	f7fd fa02 	bl	80002c0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	@ 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08009a10 	.word	0x08009a10

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffdc 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08009a10 	.word	0x08009a10

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f90:	4b69      	ldr	r3, [pc, #420]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a68      	ldr	r2, [pc, #416]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f96:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f9a:	6093      	str	r3, [r2, #8]
 8002f9c:	4b66      	ldr	r3, [pc, #408]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	4964      	ldr	r1, [pc, #400]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	4959      	ldr	r1, [pc, #356]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003004:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	494a      	ldr	r1, [pc, #296]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301c:	d101      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 808b 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	4a39      	ldr	r2, [pc, #228]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003056:	6413      	str	r3, [r2, #64]	@ 0x40
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003064:	4b35      	ldr	r3, [pc, #212]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a34      	ldr	r2, [pc, #208]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe ff06 	bl	8001e80 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003078:	f7fe ff02 	bl	8001e80 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e357      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800308a:	4b2c      	ldr	r3, [pc, #176]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003096:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d035      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d02e      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b4:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030be:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030d6:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d114      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe feca 	bl	8001e80 <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fec6 	bl	8001e80 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e319      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800311e:	d111      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003120:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800312e:	400b      	ands	r3, r1
 8003130:	4901      	ldr	r1, [pc, #4]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
 8003136:	e00b      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	0ffffcff 	.word	0x0ffffcff
 8003144:	4baa      	ldr	r3, [pc, #680]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4aa9      	ldr	r2, [pc, #676]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	4ba7      	ldr	r3, [pc, #668]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003152:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	49a4      	ldr	r1, [pc, #656]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315e:	4313      	orrs	r3, r2
 8003160:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316e:	4ba0      	ldr	r3, [pc, #640]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003174:	4a9e      	ldr	r2, [pc, #632]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800317a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800317e:	4b9c      	ldr	r3, [pc, #624]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003180:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	4999      	ldr	r1, [pc, #612]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319c:	4b94      	ldr	r3, [pc, #592]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031aa:	4991      	ldr	r1, [pc, #580]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031be:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031cc:	4988      	ldr	r1, [pc, #544]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e0:	4b83      	ldr	r3, [pc, #524]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ee:	4980      	ldr	r1, [pc, #512]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003202:	4b7b      	ldr	r3, [pc, #492]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	4977      	ldr	r1, [pc, #476]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003224:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	f023 0203 	bic.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	496f      	ldr	r1, [pc, #444]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003246:	4b6a      	ldr	r3, [pc, #424]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	f023 020c 	bic.w	r2, r3, #12
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	4966      	ldr	r1, [pc, #408]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003268:	4b61      	ldr	r3, [pc, #388]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	495e      	ldr	r1, [pc, #376]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800328a:	4b59      	ldr	r3, [pc, #356]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003298:	4955      	ldr	r1, [pc, #340]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ac:	4b50      	ldr	r3, [pc, #320]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	494d      	ldr	r1, [pc, #308]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032ce:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	4944      	ldr	r1, [pc, #272]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032f0:	4b3f      	ldr	r3, [pc, #252]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	493c      	ldr	r1, [pc, #240]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003312:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003320:	4933      	ldr	r1, [pc, #204]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003334:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003342:	492b      	ldr	r1, [pc, #172]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003356:	4b26      	ldr	r3, [pc, #152]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003364:	4922      	ldr	r1, [pc, #136]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003396:	4b16      	ldr	r3, [pc, #88]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a4:	4912      	ldr	r1, [pc, #72]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c8:	4909      	ldr	r1, [pc, #36]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d006      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80d9 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033e4:	4b02      	ldr	r3, [pc, #8]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a01      	ldr	r2, [pc, #4]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033ee:	e001      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f6:	f7fe fd43 	bl	8001e80 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033fe:	f7fe fd3f 	bl	8001e80 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	@ 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e194      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003410:	4b6c      	ldr	r3, [pc, #432]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d021      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003430:	4b64      	ldr	r3, [pc, #400]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800343e:	4b61      	ldr	r3, [pc, #388]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003444:	0e1b      	lsrs	r3, r3, #24
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	019a      	lsls	r2, r3, #6
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	071b      	lsls	r3, r3, #28
 8003464:	4957      	ldr	r1, [pc, #348]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02e      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003496:	d129      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003498:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	0c1b      	lsrs	r3, r3, #16
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ac:	0f1b      	lsrs	r3, r3, #28
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	019a      	lsls	r2, r3, #6
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	071b      	lsls	r3, r3, #28
 80034cc:	493d      	ldr	r1, [pc, #244]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034d4:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034da:	f023 021f 	bic.w	r2, r3, #31
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	3b01      	subs	r3, #1
 80034e4:	4937      	ldr	r1, [pc, #220]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034f8:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	0e1b      	lsrs	r3, r3, #24
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003506:	4b2f      	ldr	r3, [pc, #188]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350c:	0f1b      	lsrs	r3, r3, #28
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	019a      	lsls	r2, r3, #6
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	071b      	lsls	r3, r3, #28
 800352c:	4925      	ldr	r1, [pc, #148]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	019a      	lsls	r2, r3, #6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	061b      	lsls	r3, r3, #24
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	071b      	lsls	r3, r3, #28
 800355c:	4919      	ldr	r1, [pc, #100]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800356e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003570:	f7fe fc86 	bl	8001e80 <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003578:	f7fe fc82 	bl	8001e80 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0d7      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 80cd 	bne.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a08      	ldr	r2, [pc, #32]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fe fc69 	bl	8001e80 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035b2:	f7fe fc65 	bl	8001e80 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	@ 0x64
 80035be:	d903      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0ba      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d4:	d0ed      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02e      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d12a      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035fe:	4b51      	ldr	r3, [pc, #324]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800360c:	4b4d      	ldr	r3, [pc, #308]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	0f1b      	lsrs	r3, r3, #28
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	019a      	lsls	r2, r3, #6
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	4944      	ldr	r1, [pc, #272]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800363a:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003640:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	493d      	ldr	r1, [pc, #244]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003668:	d11d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366a:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003678:	4b32      	ldr	r3, [pc, #200]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	0f1b      	lsrs	r3, r3, #28
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	019a      	lsls	r2, r3, #6
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	4929      	ldr	r1, [pc, #164]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b2:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036c0:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	019a      	lsls	r2, r3, #6
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	4917      	ldr	r1, [pc, #92]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	4911      	ldr	r1, [pc, #68]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003704:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0e      	ldr	r2, [pc, #56]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fe fbb6 	bl	8001e80 <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003718:	f7fe fbb2 	bl	8001e80 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e007      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003736:	d1ef      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e049      	b.n	80037ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fa2c 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 f9e8 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e054      	b.n	80038ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383a:	d01d      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a22      	ldr	r2, [pc, #136]	@ (80038cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_TIM_Base_Start_IT+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d115      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d015      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d011      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40010400 	.word	0x40010400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40001800 	.word	0x40001800
 80038e4:	00010007 	.word	0x00010007

080038e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0202 	mvn.w	r2, #2
 800391c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8f3 	bl	8003b1e <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8e5 	bl	8003b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8f6 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d020      	beq.n	8003998 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0204 	mvn.w	r2, #4
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8cd 	bl	8003b1e <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8bf 	bl	8003b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8d0 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d020      	beq.n	80039e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01b      	beq.n	80039e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0208 	mvn.w	r2, #8
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f8a7 	bl	8003b1e <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f899 	bl	8003b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8aa 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d020      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0210 	mvn.w	r2, #16
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2208      	movs	r2, #8
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f881 	bl	8003b1e <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f873 	bl	8003b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f884 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0201 	mvn.w	r2, #1
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f851 	bl	8003af6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9b1 	bl	8003de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9a9 	bl	8003df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f83e 	bl	8003b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0220 	mvn.w	r2, #32
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f971 	bl	8003dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a46      	ldr	r2, [pc, #280]	@ (8003c88 <TIM_Base_SetConfig+0x12c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7a:	d00f      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a43      	ldr	r2, [pc, #268]	@ (8003c8c <TIM_Base_SetConfig+0x130>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <TIM_Base_SetConfig+0x134>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a41      	ldr	r2, [pc, #260]	@ (8003c94 <TIM_Base_SetConfig+0x138>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a40      	ldr	r2, [pc, #256]	@ (8003c98 <TIM_Base_SetConfig+0x13c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a35      	ldr	r2, [pc, #212]	@ (8003c88 <TIM_Base_SetConfig+0x12c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbc:	d027      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a32      	ldr	r2, [pc, #200]	@ (8003c8c <TIM_Base_SetConfig+0x130>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d023      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <TIM_Base_SetConfig+0x134>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01f      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a30      	ldr	r2, [pc, #192]	@ (8003c94 <TIM_Base_SetConfig+0x138>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003c98 <TIM_Base_SetConfig+0x13c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d017      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c9c <TIM_Base_SetConfig+0x140>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <TIM_Base_SetConfig+0x144>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00f      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <TIM_Base_SetConfig+0x148>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <TIM_Base_SetConfig+0x14c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <TIM_Base_SetConfig+0x150>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a29      	ldr	r2, [pc, #164]	@ (8003cb0 <TIM_Base_SetConfig+0x154>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d108      	bne.n	8003c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a10      	ldr	r2, [pc, #64]	@ (8003c88 <TIM_Base_SetConfig+0x12c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_Base_SetConfig+0xf8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	@ (8003c98 <TIM_Base_SetConfig+0x13c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d103      	bne.n	8003c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40010400 	.word	0x40010400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800
 8003ca8:	40001800 	.word	0x40001800
 8003cac:	40001c00 	.word	0x40001c00
 8003cb0:	40002000 	.word	0x40002000

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e06d      	b.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a30      	ldr	r2, [pc, #192]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e040      	b.n	8003ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd ff22 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	@ 0x24
 8003e38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fe4c 	bl	8004af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fbe5 	bl	8004628 <UART_SetConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01b      	b.n	8003ea0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fecb 	bl	8004c34 <UART_CheckIdleState>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d177      	bne.n	8003fb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_UART_Transmit+0x24>
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e070      	b.n	8003fb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2221      	movs	r2, #33	@ 0x21
 8003edc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ede:	f7fd ffcf 	bl	8001e80 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d108      	bne.n	8003f10 <HAL_UART_Transmit+0x68>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f18:	e02f      	b.n	8003f7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fedc 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e03b      	b.n	8003fb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	3302      	adds	r3, #2
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e007      	b.n	8003f68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1c9      	bne.n	8003f1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2140      	movs	r1, #64	@ 0x40
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fea6 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e005      	b.n	8003fb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08a      	sub	sp, #40	@ 0x28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d132      	bne.n	8004038 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_Receive_IT+0x24>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e02b      	b.n	800403a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d018      	beq.n	8004028 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	613b      	str	r3, [r7, #16]
   return(result);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	61bb      	str	r3, [r7, #24]
   return(result);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	461a      	mov	r2, r3
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fec4 	bl	8004dbc <UART_Start_Receive_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	e000      	b.n	800403a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	@ 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ba      	sub	sp, #232	@ 0xe8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800406a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800406e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004072:	4013      	ands	r3, r2
 8004074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d115      	bne.n	80040ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00f      	beq.n	80040ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8297 	beq.w	80045d0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
      }
      return;
 80040aa:	e291      	b.n	80045d0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8117 	beq.w	80042e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040c6:	4b85      	ldr	r3, [pc, #532]	@ (80042dc <HAL_UART_IRQHandler+0x298>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 810a 	beq.w	80042e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <HAL_UART_IRQHandler+0xbc>
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <HAL_UART_IRQHandler+0xec>
 800410c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2202      	movs	r2, #2
 800411e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d011      	beq.n	8004160 <HAL_UART_IRQHandler+0x11c>
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2204      	movs	r2, #4
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004156:	f043 0202 	orr.w	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d017      	beq.n	800419c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800417c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2208      	movs	r2, #8
 800418a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <HAL_UART_IRQHandler+0x18a>
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 81fd 	beq.w	80045d4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004208:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d005      	beq.n	8004226 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800421a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800421e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d04f      	beq.n	80042c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fe8e 	bl	8004f48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004236:	2b40      	cmp	r3, #64	@ 0x40
 8004238:	d141      	bne.n	80042be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004250:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004266:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800426a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800427e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1d9      	bne.n	800423a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	2b00      	cmp	r3, #0
 800428c:	d013      	beq.n	80042b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <HAL_UART_IRQHandler+0x29c>)
 8004294:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd ffa1 	bl	80021e2 <HAL_DMA_Abort_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d017      	beq.n	80042d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	e00f      	b.n	80042d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9a0 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00b      	b.n	80042d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f99c 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e007      	b.n	80042d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f998 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80042d4:	e17e      	b.n	80045d4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d6:	bf00      	nop
    return;
 80042d8:	e17c      	b.n	80045d4 <HAL_UART_IRQHandler+0x590>
 80042da:	bf00      	nop
 80042dc:	04000120 	.word	0x04000120
 80042e0:	08005011 	.word	0x08005011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 814c 	bne.w	8004586 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8145 	beq.w	8004586 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 813e 	beq.w	8004586 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	f040 80b6 	bne.w	800448e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800432e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8150 	beq.w	80045d8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800433e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004342:	429a      	cmp	r2, r3
 8004344:	f080 8148 	bcs.w	80045d8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800434e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435c:	f000 8086 	beq.w	800446c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800438a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800438e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004396:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1da      	bne.n	8004360 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e1      	bne.n	80043aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800440a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004410:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800443a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443c:	f023 0310 	bic.w	r3, r3, #16
 8004440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800444e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004450:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004454:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800445c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e4      	bne.n	800442c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fe4b 	bl	8002102 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800447e:	b29b      	uxth	r3, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8c2 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800448c:	e0a4      	b.n	80045d8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800449a:	b29b      	uxth	r3, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8096 	beq.w	80045dc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8091 	beq.w	80045dc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e4      	bne.n	80044ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004514:	633a      	str	r2, [r7, #48]	@ 0x30
 8004516:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800451a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e3      	bne.n	80044f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	60fb      	str	r3, [r7, #12]
   return(result);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 0310 	bic.w	r3, r3, #16
 8004550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	617b      	str	r3, [r7, #20]
   return(result);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e4      	bne.n	800453c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f846 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004584:	e02a      	b.n	80045dc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01c      	beq.n	80045e0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
    }
    return;
 80045ae:	e017      	b.n	80045e0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <HAL_UART_IRQHandler+0x59e>
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fd37 	bl	800503c <UART_EndTransmit_IT>
    return;
 80045ce:	e008      	b.n	80045e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80045d0:	bf00      	nop
 80045d2:	e006      	b.n	80045e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80045d4:	bf00      	nop
 80045d6:	e004      	b.n	80045e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80045d8:	bf00      	nop
 80045da:	e002      	b.n	80045e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80045dc:	bf00      	nop
 80045de:	e000      	b.n	80045e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80045e0:	bf00      	nop
  }

}
 80045e2:	37e8      	adds	r7, #232	@ 0xe8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4ba6      	ldr	r3, [pc, #664]	@ (80048ec <UART_SetConfig+0x2c4>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	430b      	orrs	r3, r1
 800465e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a94      	ldr	r2, [pc, #592]	@ (80048f0 <UART_SetConfig+0x2c8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d120      	bne.n	80046e6 <UART_SetConfig+0xbe>
 80046a4:	4b93      	ldr	r3, [pc, #588]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d816      	bhi.n	80046e0 <UART_SetConfig+0xb8>
 80046b2:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <UART_SetConfig+0x90>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046d5 	.word	0x080046d5
 80046c0:	080046cf 	.word	0x080046cf
 80046c4:	080046db 	.word	0x080046db
 80046c8:	2301      	movs	r3, #1
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e150      	b.n	8004970 <UART_SetConfig+0x348>
 80046ce:	2302      	movs	r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e14d      	b.n	8004970 <UART_SetConfig+0x348>
 80046d4:	2304      	movs	r3, #4
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e14a      	b.n	8004970 <UART_SetConfig+0x348>
 80046da:	2308      	movs	r3, #8
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e147      	b.n	8004970 <UART_SetConfig+0x348>
 80046e0:	2310      	movs	r3, #16
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e144      	b.n	8004970 <UART_SetConfig+0x348>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a83      	ldr	r2, [pc, #524]	@ (80048f8 <UART_SetConfig+0x2d0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d132      	bne.n	8004756 <UART_SetConfig+0x12e>
 80046f0:	4b80      	ldr	r3, [pc, #512]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d828      	bhi.n	8004750 <UART_SetConfig+0x128>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0xdc>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004739 	.word	0x08004739
 8004708:	08004751 	.word	0x08004751
 800470c:	08004751 	.word	0x08004751
 8004710:	08004751 	.word	0x08004751
 8004714:	08004745 	.word	0x08004745
 8004718:	08004751 	.word	0x08004751
 800471c:	08004751 	.word	0x08004751
 8004720:	08004751 	.word	0x08004751
 8004724:	0800473f 	.word	0x0800473f
 8004728:	08004751 	.word	0x08004751
 800472c:	08004751 	.word	0x08004751
 8004730:	08004751 	.word	0x08004751
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e118      	b.n	8004970 <UART_SetConfig+0x348>
 800473e:	2302      	movs	r3, #2
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e115      	b.n	8004970 <UART_SetConfig+0x348>
 8004744:	2304      	movs	r3, #4
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e112      	b.n	8004970 <UART_SetConfig+0x348>
 800474a:	2308      	movs	r3, #8
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e10f      	b.n	8004970 <UART_SetConfig+0x348>
 8004750:	2310      	movs	r3, #16
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e10c      	b.n	8004970 <UART_SetConfig+0x348>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a68      	ldr	r2, [pc, #416]	@ (80048fc <UART_SetConfig+0x2d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d120      	bne.n	80047a2 <UART_SetConfig+0x17a>
 8004760:	4b64      	ldr	r3, [pc, #400]	@ (80048f4 <UART_SetConfig+0x2cc>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800476a:	2b30      	cmp	r3, #48	@ 0x30
 800476c:	d013      	beq.n	8004796 <UART_SetConfig+0x16e>
 800476e:	2b30      	cmp	r3, #48	@ 0x30
 8004770:	d814      	bhi.n	800479c <UART_SetConfig+0x174>
 8004772:	2b20      	cmp	r3, #32
 8004774:	d009      	beq.n	800478a <UART_SetConfig+0x162>
 8004776:	2b20      	cmp	r3, #32
 8004778:	d810      	bhi.n	800479c <UART_SetConfig+0x174>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x15c>
 800477e:	2b10      	cmp	r3, #16
 8004780:	d006      	beq.n	8004790 <UART_SetConfig+0x168>
 8004782:	e00b      	b.n	800479c <UART_SetConfig+0x174>
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e0f2      	b.n	8004970 <UART_SetConfig+0x348>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e0ef      	b.n	8004970 <UART_SetConfig+0x348>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0ec      	b.n	8004970 <UART_SetConfig+0x348>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e0e9      	b.n	8004970 <UART_SetConfig+0x348>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e0e6      	b.n	8004970 <UART_SetConfig+0x348>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a56      	ldr	r2, [pc, #344]	@ (8004900 <UART_SetConfig+0x2d8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d120      	bne.n	80047ee <UART_SetConfig+0x1c6>
 80047ac:	4b51      	ldr	r3, [pc, #324]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047b8:	d013      	beq.n	80047e2 <UART_SetConfig+0x1ba>
 80047ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80047bc:	d814      	bhi.n	80047e8 <UART_SetConfig+0x1c0>
 80047be:	2b80      	cmp	r3, #128	@ 0x80
 80047c0:	d009      	beq.n	80047d6 <UART_SetConfig+0x1ae>
 80047c2:	2b80      	cmp	r3, #128	@ 0x80
 80047c4:	d810      	bhi.n	80047e8 <UART_SetConfig+0x1c0>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <UART_SetConfig+0x1a8>
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d006      	beq.n	80047dc <UART_SetConfig+0x1b4>
 80047ce:	e00b      	b.n	80047e8 <UART_SetConfig+0x1c0>
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e0cc      	b.n	8004970 <UART_SetConfig+0x348>
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e0c9      	b.n	8004970 <UART_SetConfig+0x348>
 80047dc:	2304      	movs	r3, #4
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e0c6      	b.n	8004970 <UART_SetConfig+0x348>
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e0c3      	b.n	8004970 <UART_SetConfig+0x348>
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e0c0      	b.n	8004970 <UART_SetConfig+0x348>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a44      	ldr	r2, [pc, #272]	@ (8004904 <UART_SetConfig+0x2dc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x21c>
 80047f8:	4b3e      	ldr	r3, [pc, #248]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004806:	d017      	beq.n	8004838 <UART_SetConfig+0x210>
 8004808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800480c:	d817      	bhi.n	800483e <UART_SetConfig+0x216>
 800480e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004812:	d00b      	beq.n	800482c <UART_SetConfig+0x204>
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d811      	bhi.n	800483e <UART_SetConfig+0x216>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x1fe>
 800481e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004822:	d006      	beq.n	8004832 <UART_SetConfig+0x20a>
 8004824:	e00b      	b.n	800483e <UART_SetConfig+0x216>
 8004826:	2300      	movs	r3, #0
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0a1      	b.n	8004970 <UART_SetConfig+0x348>
 800482c:	2302      	movs	r3, #2
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e09e      	b.n	8004970 <UART_SetConfig+0x348>
 8004832:	2304      	movs	r3, #4
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e09b      	b.n	8004970 <UART_SetConfig+0x348>
 8004838:	2308      	movs	r3, #8
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e098      	b.n	8004970 <UART_SetConfig+0x348>
 800483e:	2310      	movs	r3, #16
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e095      	b.n	8004970 <UART_SetConfig+0x348>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2f      	ldr	r2, [pc, #188]	@ (8004908 <UART_SetConfig+0x2e0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d125      	bne.n	800489a <UART_SetConfig+0x272>
 800484e:	4b29      	ldr	r3, [pc, #164]	@ (80048f4 <UART_SetConfig+0x2cc>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800485c:	d017      	beq.n	800488e <UART_SetConfig+0x266>
 800485e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004862:	d817      	bhi.n	8004894 <UART_SetConfig+0x26c>
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d00b      	beq.n	8004882 <UART_SetConfig+0x25a>
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486e:	d811      	bhi.n	8004894 <UART_SetConfig+0x26c>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x254>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004878:	d006      	beq.n	8004888 <UART_SetConfig+0x260>
 800487a:	e00b      	b.n	8004894 <UART_SetConfig+0x26c>
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e076      	b.n	8004970 <UART_SetConfig+0x348>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e073      	b.n	8004970 <UART_SetConfig+0x348>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e070      	b.n	8004970 <UART_SetConfig+0x348>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e06d      	b.n	8004970 <UART_SetConfig+0x348>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e06a      	b.n	8004970 <UART_SetConfig+0x348>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1b      	ldr	r2, [pc, #108]	@ (800490c <UART_SetConfig+0x2e4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d138      	bne.n	8004916 <UART_SetConfig+0x2ee>
 80048a4:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <UART_SetConfig+0x2cc>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b2:	d017      	beq.n	80048e4 <UART_SetConfig+0x2bc>
 80048b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b8:	d82a      	bhi.n	8004910 <UART_SetConfig+0x2e8>
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048be:	d00b      	beq.n	80048d8 <UART_SetConfig+0x2b0>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c4:	d824      	bhi.n	8004910 <UART_SetConfig+0x2e8>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <UART_SetConfig+0x2aa>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	d006      	beq.n	80048de <UART_SetConfig+0x2b6>
 80048d0:	e01e      	b.n	8004910 <UART_SetConfig+0x2e8>
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e04b      	b.n	8004970 <UART_SetConfig+0x348>
 80048d8:	2302      	movs	r3, #2
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e048      	b.n	8004970 <UART_SetConfig+0x348>
 80048de:	2304      	movs	r3, #4
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e045      	b.n	8004970 <UART_SetConfig+0x348>
 80048e4:	2308      	movs	r3, #8
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e042      	b.n	8004970 <UART_SetConfig+0x348>
 80048ea:	bf00      	nop
 80048ec:	efff69f3 	.word	0xefff69f3
 80048f0:	40011000 	.word	0x40011000
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40004400 	.word	0x40004400
 80048fc:	40004800 	.word	0x40004800
 8004900:	40004c00 	.word	0x40004c00
 8004904:	40005000 	.word	0x40005000
 8004908:	40011400 	.word	0x40011400
 800490c:	40007800 	.word	0x40007800
 8004910:	2310      	movs	r3, #16
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e02c      	b.n	8004970 <UART_SetConfig+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a72      	ldr	r2, [pc, #456]	@ (8004ae4 <UART_SetConfig+0x4bc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d125      	bne.n	800496c <UART_SetConfig+0x344>
 8004920:	4b71      	ldr	r3, [pc, #452]	@ (8004ae8 <UART_SetConfig+0x4c0>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800492a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800492e:	d017      	beq.n	8004960 <UART_SetConfig+0x338>
 8004930:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004934:	d817      	bhi.n	8004966 <UART_SetConfig+0x33e>
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493a:	d00b      	beq.n	8004954 <UART_SetConfig+0x32c>
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004940:	d811      	bhi.n	8004966 <UART_SetConfig+0x33e>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <UART_SetConfig+0x326>
 8004946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800494a:	d006      	beq.n	800495a <UART_SetConfig+0x332>
 800494c:	e00b      	b.n	8004966 <UART_SetConfig+0x33e>
 800494e:	2300      	movs	r3, #0
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e00d      	b.n	8004970 <UART_SetConfig+0x348>
 8004954:	2302      	movs	r3, #2
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e00a      	b.n	8004970 <UART_SetConfig+0x348>
 800495a:	2304      	movs	r3, #4
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e007      	b.n	8004970 <UART_SetConfig+0x348>
 8004960:	2308      	movs	r3, #8
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e004      	b.n	8004970 <UART_SetConfig+0x348>
 8004966:	2310      	movs	r3, #16
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e001      	b.n	8004970 <UART_SetConfig+0x348>
 800496c:	2310      	movs	r3, #16
 800496e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004978:	d15b      	bne.n	8004a32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d828      	bhi.n	80049d2 <UART_SetConfig+0x3aa>
 8004980:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <UART_SetConfig+0x360>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049bd 	.word	0x080049bd
 8004994:	080049d3 	.word	0x080049d3
 8004998:	080049c3 	.word	0x080049c3
 800499c:	080049d3 	.word	0x080049d3
 80049a0:	080049d3 	.word	0x080049d3
 80049a4:	080049d3 	.word	0x080049d3
 80049a8:	080049cb 	.word	0x080049cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7fe fab4 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80049b0:	61b8      	str	r0, [r7, #24]
        break;
 80049b2:	e013      	b.n	80049dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7fe fac4 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 80049b8:	61b8      	str	r0, [r7, #24]
        break;
 80049ba:	e00f      	b.n	80049dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049bc:	4b4b      	ldr	r3, [pc, #300]	@ (8004aec <UART_SetConfig+0x4c4>)
 80049be:	61bb      	str	r3, [r7, #24]
        break;
 80049c0:	e00c      	b.n	80049dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c2:	f7fe f9d7 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80049c6:	61b8      	str	r0, [r7, #24]
        break;
 80049c8:	e008      	b.n	80049dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ce:	61bb      	str	r3, [r7, #24]
        break;
 80049d0:	e004      	b.n	80049dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	77bb      	strb	r3, [r7, #30]
        break;
 80049da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d074      	beq.n	8004acc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	005a      	lsls	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d916      	bls.n	8004a2c <UART_SetConfig+0x404>
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d212      	bcs.n	8004a2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f023 030f 	bic.w	r3, r3, #15
 8004a0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	89fa      	ldrh	r2, [r7, #14]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e04f      	b.n	8004acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77bb      	strb	r3, [r7, #30]
 8004a30:	e04c      	b.n	8004acc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	7ffb      	ldrb	r3, [r7, #31]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d828      	bhi.n	8004a8a <UART_SetConfig+0x462>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <UART_SetConfig+0x418>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fa58 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61b8      	str	r0, [r7, #24]
        break;
 8004a6a:	e013      	b.n	8004a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fe fa68 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8004a70:	61b8      	str	r0, [r7, #24]
        break;
 8004a72:	e00f      	b.n	8004a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <UART_SetConfig+0x4c4>)
 8004a76:	61bb      	str	r3, [r7, #24]
        break;
 8004a78:	e00c      	b.n	8004a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fe f97b 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8004a7e:	61b8      	str	r0, [r7, #24]
        break;
 8004a80:	e008      	b.n	8004a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a86:	61bb      	str	r3, [r7, #24]
        break;
 8004a88:	e004      	b.n	8004a94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	77bb      	strb	r3, [r7, #30]
        break;
 8004a92:	bf00      	nop
    }

    if (pclk != 0U)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085a      	lsrs	r2, r3, #1
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d909      	bls.n	8004ac8 <UART_SetConfig+0x4a0>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aba:	d205      	bcs.n	8004ac8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e001      	b.n	8004acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ad8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40007c00 	.word	0x40007c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bee:	d10a      	bne.n	8004c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	@ 0x30
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c44:	f7fd f91c 	bl	8001e80 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d12e      	bne.n	8004cb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f83b 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e011      	b.n	8004cda <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3728      	adds	r7, #40	@ 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e04f      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d04b      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fd f8c0 	bl	8001e80 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04e      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d037      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d034      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d031      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d110      	bne.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2208      	movs	r2, #8
 8004d44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8fe 	bl	8004f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e029      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d6e:	d111      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8e4 	bl	8004f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e00f      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d0a0      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b097      	sub	sp, #92	@ 0x5c
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	d10e      	bne.n	8004e0e <UART_Start_Receive_IT+0x52>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <UART_Start_Receive_IT+0x48>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e02:	e02d      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	22ff      	movs	r2, #255	@ 0xff
 8004e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e0c:	e028      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <UART_Start_Receive_IT+0x76>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <UART_Start_Receive_IT+0x6c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	22ff      	movs	r2, #255	@ 0xff
 8004e22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e26:	e01b      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	227f      	movs	r2, #127	@ 0x7f
 8004e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e30:	e016      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e3a:	d10d      	bne.n	8004e58 <UART_Start_Receive_IT+0x9c>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <UART_Start_Receive_IT+0x92>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	227f      	movs	r2, #127	@ 0x7f
 8004e48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e4c:	e008      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	223f      	movs	r2, #63	@ 0x3f
 8004e52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e56:	e003      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2222      	movs	r2, #34	@ 0x22
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e5      	bne.n	8004e70 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eac:	d107      	bne.n	8004ebe <UART_Start_Receive_IT+0x102>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <UART_Start_Receive_IT+0x184>)
 8004eba:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ebc:	e002      	b.n	8004ec4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	@ (8004f44 <UART_Start_Receive_IT+0x188>)
 8004ec2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d019      	beq.n	8004f00 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_Start_Receive_IT+0x110>
 8004efe:	e018      	b.n	8004f32 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	69f9      	ldr	r1, [r7, #28]
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e6      	bne.n	8004f00 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	375c      	adds	r7, #92	@ 0x5c
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	08005239 	.word	0x08005239
 8004f44:	08005091 	.word	0x08005091

08004f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b095      	sub	sp, #84	@ 0x54
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e6      	bne.n	8004f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e5      	bne.n	8004f82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d118      	bne.n	8004ff0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 0310 	bic.w	r3, r3, #16
 8004fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e6      	bne.n	8004fbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005004:	bf00      	nop
 8005006:	3754      	adds	r7, #84	@ 0x54
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fae4 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	60bb      	str	r3, [r7, #8]
   return(result);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fab0 	bl	80045e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b09c      	sub	sp, #112	@ 0x70
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800509e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a8:	2b22      	cmp	r3, #34	@ 0x22
 80050aa:	f040 80b9 	bne.w	8005220 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050bc:	b2d9      	uxtb	r1, r3
 80050be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	400a      	ands	r2, r1
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 809c 	bne.w	8005230 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800511c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	667b      	str	r3, [r7, #100]	@ 0x64
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800514a:	647a      	str	r2, [r7, #68]	@ 0x44
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005194:	663b      	str	r3, [r7, #96]	@ 0x60
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d12e      	bne.n	8005218 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	69b9      	ldr	r1, [r7, #24]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	617b      	str	r3, [r7, #20]
   return(result);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e6      	bne.n	80051c0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d103      	bne.n	8005208 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2210      	movs	r2, #16
 8005206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff f9fd 	bl	8004610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005216:	e00b      	b.n	8005230 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7fb febb 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 800521e:	e007      	b.n	8005230 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0208 	orr.w	r2, r2, #8
 800522e:	619a      	str	r2, [r3, #24]
}
 8005230:	bf00      	nop
 8005232:	3770      	adds	r7, #112	@ 0x70
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b09c      	sub	sp, #112	@ 0x70
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005246:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005250:	2b22      	cmp	r3, #34	@ 0x22
 8005252:	f040 80b9 	bne.w	80053c8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005266:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800526a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800526e:	4013      	ands	r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005274:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527a:	1c9a      	adds	r2, r3, #2
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	f040 809c 	bne.w	80053d8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052be:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d018      	beq.n	800535a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	61fb      	str	r3, [r7, #28]
   return(result);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800533c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005348:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800534c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535e:	2b01      	cmp	r3, #1
 8005360:	d12e      	bne.n	80053c0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	60bb      	str	r3, [r7, #8]
   return(result);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 0310 	bic.w	r3, r3, #16
 800537c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d103      	bne.n	80053b0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2210      	movs	r2, #16
 80053ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff f929 	bl	8004610 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053be:	e00b      	b.n	80053d8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fb fde7 	bl	8000f94 <HAL_UART_RxCpltCallback>
}
 80053c6:	e007      	b.n	80053d8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	619a      	str	r2, [r3, #24]
}
 80053d8:	bf00      	nop
 80053da:	3770      	adds	r7, #112	@ 0x70
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80053ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f2:	2b84      	cmp	r3, #132	@ 0x84
 80053f4:	d005      	beq.n	8005402 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80053f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	3303      	adds	r3, #3
 8005400:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005414:	f001 f8be 	bl	8006594 <vTaskStartScheduler>
  
  return osOK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	bd80      	pop	{r7, pc}

0800541e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800541e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005420:	b089      	sub	sp, #36	@ 0x24
 8005422:	af04      	add	r7, sp, #16
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <osThreadCreate+0x54>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01c      	beq.n	8005472 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685c      	ldr	r4, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691e      	ldr	r6, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ffc8 	bl	80053e0 <makeFreeRtosPriority>
 8005450:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800545a:	9202      	str	r2, [sp, #8]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	9100      	str	r1, [sp, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4632      	mov	r2, r6
 8005464:	4629      	mov	r1, r5
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fdae 	bl	8005fc8 <xTaskCreateStatic>
 800546c:	4603      	mov	r3, r0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e01c      	b.n	80054ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685c      	ldr	r4, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800547e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff ffaa 	bl	80053e0 <makeFreeRtosPriority>
 800548c:	4602      	mov	r2, r0
 800548e:	f107 030c 	add.w	r3, r7, #12
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	9200      	str	r2, [sp, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	4632      	mov	r2, r6
 800549a:	4629      	mov	r1, r5
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fdf9 	bl	8006094 <xTaskCreate>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e000      	b.n	80054ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <osDelay+0x16>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	e000      	b.n	80054ce <osDelay+0x18>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ffbe 	bl	8006450 <vTaskDelay>
  
  return osOK;
 80054d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f103 0208 	add.w	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295
 80054f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f103 0208 	add.w	r2, r3, #8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0208 	add.w	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d103      	bne.n	80055a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e00c      	b.n	80055ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3308      	adds	r3, #8
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e002      	b.n	80055ae <vListInsert+0x2e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d2f6      	bcs.n	80055a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6892      	ldr	r2, [r2, #8]
 8005608:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6852      	ldr	r2, [r2, #4]
 8005612:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d103      	bne.n	8005626 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10d      	bne.n	8005678 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005678:	f002 f9e8 	bl	8007a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	441a      	add	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a8:	3b01      	subs	r3, #1
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	441a      	add	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	22ff      	movs	r2, #255	@ 0xff
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	22ff      	movs	r2, #255	@ 0xff
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d114      	bne.n	80056f8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01a      	beq.n	800570c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3310      	adds	r3, #16
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fa84 	bl	8006be8 <xTaskRemoveFromEventList>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d012      	beq.n	800570c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056e6:	4b0d      	ldr	r3, [pc, #52]	@ (800571c <xQueueGenericReset+0xd4>)
 80056e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	e009      	b.n	800570c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3310      	adds	r3, #16
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff feee 	bl	80054de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3324      	adds	r3, #36	@ 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fee9 	bl	80054de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800570c:	f002 f9d4 	bl	8007ab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005710:	2301      	movs	r3, #1
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10d      	bne.n	8005750 <xQueueGenericCreate+0x30>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	b672      	cpsid	i
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	b662      	cpsie	i
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e004      	b.n	8005766 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3350      	adds	r3, #80	@ 0x50
 800576a:	4618      	mov	r0, r3
 800576c:	f002 fa9c 	bl	8007ca8 <pvPortMalloc>
 8005770:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3350      	adds	r3, #80	@ 0x50
 8005780:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800578a:	79fa      	ldrb	r2, [r7, #7]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f805 	bl	80057a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800579c:	69bb      	ldr	r3, [r7, #24]
	}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e002      	b.n	80057c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057d4:	2101      	movs	r1, #1
 80057d6:	69b8      	ldr	r0, [r7, #24]
 80057d8:	f7ff ff36 	bl	8005648 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800580c:	2300      	movs	r3, #0
 800580e:	2200      	movs	r2, #0
 8005810:	2100      	movs	r1, #0
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f81c 	bl	8005850 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	461a      	mov	r2, r3
 8005836:	6939      	ldr	r1, [r7, #16]
 8005838:	6978      	ldr	r0, [r7, #20]
 800583a:	f7ff ff71 	bl	8005720 <xQueueGenericCreate>
 800583e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff ffd3 	bl	80057ec <prvInitialiseMutex>

		return xNewQueue;
 8005846:	68fb      	ldr	r3, [r7, #12]
	}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	@ 0x38
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800585e:	2300      	movs	r3, #0
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <xQueueGenericSend+0x38>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	b672      	cpsid	i
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	b662      	cpsie	i
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <xQueueGenericSend+0x46>
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <xQueueGenericSend+0x4a>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <xQueueGenericSend+0x4c>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <xQueueGenericSend+0x6c>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	b672      	cpsid	i
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	b662      	cpsie	i
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSend+0x7a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <xQueueGenericSend+0x7e>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xQueueGenericSend+0x80>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <xQueueGenericSend+0xa0>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	b672      	cpsid	i
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	b662      	cpsie	i
 80058e8:	623b      	str	r3, [r7, #32]
}
 80058ea:	bf00      	nop
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058f0:	f001 fc16 	bl	8007120 <xTaskGetSchedulerState>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <xQueueGenericSend+0xb0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <xQueueGenericSend+0xb4>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericSend+0xb6>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <xQueueGenericSend+0xd6>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	b672      	cpsid	i
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	b662      	cpsie	i
 800591e:	61fb      	str	r3, [r7, #28]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005926:	f002 f891 	bl	8007a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xQueueGenericSend+0xec>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d129      	bne.n	8005990 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005942:	f000 fa57 	bl	8005df4 <prvCopyDataToQueue>
 8005946:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	3324      	adds	r3, #36	@ 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f947 	bl	8006be8 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3f      	ldr	r3, [pc, #252]	@ (8005a60 <xQueueGenericSend+0x210>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e00a      	b.n	8005988 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <xQueueGenericSend+0x210>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005988:	f002 f896 	bl	8007ab8 <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e063      	b.n	8005a58 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005996:	f002 f88f 	bl	8007ab8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e05c      	b.n	8005a58 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f983 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b2:	f002 f881 	bl	8007ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b6:	f000 fe55 	bl	8006664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ba:	f002 f847 	bl	8007a4c <vPortEnterCritical>
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <xQueueGenericSend+0x184>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x19a>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ea:	f002 f865 	bl	8007ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 f972 	bl	8006ce0 <xTaskCheckForTimeOut>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d124      	bne.n	8005a4c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a04:	f000 fac8 	bl	8005f98 <prvIsQueueFull>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 f8be 	bl	8006b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a1e:	f000 fa53 	bl	8005ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f000 fe2d 	bl	8006680 <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af7c 	bne.w	8005926 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <xQueueGenericSend+0x210>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e772      	b.n	8005926 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a42:	f000 fa41 	bl	8005ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fe1b 	bl	8006680 <xTaskResumeAll>
 8005a4a:	e76c      	b.n	8005926 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a4e:	f000 fa3b 	bl	8005ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fe15 	bl	8006680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3738      	adds	r7, #56	@ 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	@ 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <xQueueGiveFromISR+0x30>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7c:	b672      	cpsid	i
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	b662      	cpsie	i
 8005a8c:	623b      	str	r3, [r7, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <xQueueGiveFromISR+0x54>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	b672      	cpsid	i
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	b662      	cpsie	i
 8005ab0:	61fb      	str	r3, [r7, #28]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <xQueueGiveFromISR+0x64>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <xQueueGiveFromISR+0x68>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <xQueueGiveFromISR+0x6a>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	61bb      	str	r3, [r7, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aee:	f002 f895 	bl	8007c1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005af2:	f3ef 8211 	mrs	r2, BASEPRI
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	617a      	str	r2, [r7, #20]
 8005b0c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d22b      	bcs.n	8005b7a <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d112      	bne.n	8005b64 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	3324      	adds	r3, #36	@ 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f84c 	bl	8006be8 <xTaskRemoveFromEventList>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	b25a      	sxtb	r2, r3
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b74:	2301      	movs	r3, #1
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b78:	e001      	b.n	8005b7e <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3738      	adds	r7, #56	@ 0x38
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	@ 0x38
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	b672      	cpsid	i
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	b662      	cpsie	i
 8005bc4:	623b      	str	r3, [r7, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	e7fd      	b.n	8005bc8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	b672      	cpsid	i
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	b662      	cpsie	i
 8005be8:	61fb      	str	r3, [r7, #28]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bf0:	f001 fa96 	bl	8007120 <xTaskGetSchedulerState>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <xQueueSemaphoreTake+0x6c>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <xQueueSemaphoreTake+0x70>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <xQueueSemaphoreTake+0x72>
 8005c04:	2300      	movs	r3, #0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10d      	bne.n	8005c26 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	b672      	cpsid	i
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	b662      	cpsie	i
 8005c1e:	61bb      	str	r3, [r7, #24]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c26:	f001 ff11 	bl	8007a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d024      	beq.n	8005c80 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	1e5a      	subs	r2, r3, #1
 8005c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c46:	f001 fd75 	bl	8007734 <pvTaskIncrementMutexHeldCount>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00f      	beq.n	8005c78 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 ffc3 	bl	8006be8 <xTaskRemoveFromEventList>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c68:	4b55      	ldr	r3, [pc, #340]	@ (8005dc0 <xQueueSemaphoreTake+0x22c>)
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c78:	f001 ff1e 	bl	8007ab8 <vPortExitCritical>
				return pdPASS;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e09a      	b.n	8005db6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00d      	beq.n	8005ca8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	b672      	cpsid	i
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	b662      	cpsie	i
 8005ca0:	617b      	str	r3, [r7, #20]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ca8:	f001 ff06 	bl	8007ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e082      	b.n	8005db6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fffa 	bl	8006cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cc4:	f001 fef8 	bl	8007ab8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cc8:	f000 fccc 	bl	8006664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ccc:	f001 febe 	bl	8007a4c <vPortEnterCritical>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d103      	bne.n	8005ce6 <xQueueSemaphoreTake+0x152>
 8005cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d103      	bne.n	8005cfc <xQueueSemaphoreTake+0x168>
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cfc:	f001 fedc 	bl	8007ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d00:	463a      	mov	r2, r7
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 ffe9 	bl	8006ce0 <xTaskCheckForTimeOut>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d132      	bne.n	8005d7a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d16:	f000 f929 	bl	8005f6c <prvIsQueueEmpty>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d026      	beq.n	8005d6e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005d28:	f001 fe90 	bl	8007a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fa13 	bl	800715c <xTaskPriorityInherit>
 8005d36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005d38:	f001 febe 	bl	8007ab8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	3324      	adds	r3, #36	@ 0x24
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 ff27 	bl	8006b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d4c:	f000 f8bc 	bl	8005ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d50:	f000 fc96 	bl	8006680 <xTaskResumeAll>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f47f af65 	bne.w	8005c26 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005d5c:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <xQueueSemaphoreTake+0x22c>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	e75b      	b.n	8005c26 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d70:	f000 f8aa 	bl	8005ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d74:	f000 fc84 	bl	8006680 <xTaskResumeAll>
 8005d78:	e755      	b.n	8005c26 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d7c:	f000 f8a4 	bl	8005ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d80:	f000 fc7e 	bl	8006680 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d86:	f000 f8f1 	bl	8005f6c <prvIsQueueEmpty>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f43f af4a 	beq.w	8005c26 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005d98:	f001 fe58 	bl	8007a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d9e:	f000 f811 	bl	8005dc4 <prvGetDisinheritPriorityAfterTimeout>
 8005da2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fae2 	bl	8007374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005db0:	f001 fe82 	bl	8007ab8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3738      	adds	r7, #56	@ 0x38
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1c3 0307 	rsb	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e001      	b.n	8005de6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005de6:	68fb      	ldr	r3, [r7, #12]
	}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d14d      	bne.n	8005eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fa1c 	bl	800725c <xTaskPriorityDisinherit>
 8005e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	e043      	b.n	8005eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d119      	bne.n	8005e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6858      	ldr	r0, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	f002 fc89 	bl	8008756 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d32b      	bcc.n	8005eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	e026      	b.n	8005eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68d8      	ldr	r0, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e70:	461a      	mov	r2, r3
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	f002 fc6f 	bl	8008756 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	425b      	negs	r3, r3
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d207      	bcs.n	8005ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	441a      	add	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d105      	bne.n	8005eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ed0:	f001 fdbc 	bl	8007a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005edc:	e011      	b.n	8005f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3324      	adds	r3, #36	@ 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fe7c 	bl	8006be8 <xTaskRemoveFromEventList>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ef6:	f000 ff5b 	bl	8006db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dce9      	bgt.n	8005ede <prvUnlockQueue+0x16>
 8005f0a:	e000      	b.n	8005f0e <prvUnlockQueue+0x46>
					break;
 8005f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f16:	f001 fdcf 	bl	8007ab8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f1a:	f001 fd97 	bl	8007a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f26:	e011      	b.n	8005f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3310      	adds	r3, #16
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fe57 	bl	8006be8 <xTaskRemoveFromEventList>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f40:	f000 ff36 	bl	8006db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dce9      	bgt.n	8005f28 <prvUnlockQueue+0x60>
 8005f54:	e000      	b.n	8005f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	22ff      	movs	r2, #255	@ 0xff
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f60:	f001 fdaa 	bl	8007ab8 <vPortExitCritical>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f74:	f001 fd6a 	bl	8007a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8a:	f001 fd95 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa0:	f001 fd54 	bl	8007a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d102      	bne.n	8005fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e001      	b.n	8005fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fd7d 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	@ 0x38
 8005fcc:	af04      	add	r7, sp, #16
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <xTaskCreateStatic+0x30>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	b672      	cpsid	i
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	b662      	cpsie	i
 8005ff0:	623b      	str	r3, [r7, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <xTaskCreateStatic+0x52>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	b672      	cpsid	i
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	b662      	cpsie	i
 8006012:	61fb      	str	r3, [r7, #28]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800601a:	2364      	movs	r3, #100	@ 0x64
 800601c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b64      	cmp	r3, #100	@ 0x64
 8006022:	d00d      	beq.n	8006040 <xTaskCreateStatic+0x78>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	b672      	cpsid	i
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	b662      	cpsie	i
 8006038:	61bb      	str	r3, [r7, #24]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006040:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01e      	beq.n	8006086 <xTaskCreateStatic+0xbe>
 8006048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01b      	beq.n	8006086 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006060:	2300      	movs	r3, #0
 8006062:	9303      	str	r3, [sp, #12]
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	9302      	str	r3, [sp, #8]
 8006068:	f107 0314 	add.w	r3, r7, #20
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f850 	bl	800611e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800607e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006080:	f000 f8e6 	bl	8006250 <prvAddNewTaskToReadyList>
 8006084:	e001      	b.n	800608a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800608a:	697b      	ldr	r3, [r7, #20]
	}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	@ 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08c      	sub	sp, #48	@ 0x30
 8006098:	af04      	add	r7, sp, #16
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fdfd 	bl	8007ca8 <pvPortMalloc>
 80060ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00e      	beq.n	80060d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060b6:	2064      	movs	r0, #100	@ 0x64
 80060b8:	f001 fdf6 	bl	8007ca8 <pvPortMalloc>
 80060bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ca:	e005      	b.n	80060d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060cc:	6978      	ldr	r0, [r7, #20]
 80060ce:	f001 feb9 	bl	8007e44 <vPortFree>
 80060d2:	e001      	b.n	80060d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d017      	beq.n	800610e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	2300      	movs	r3, #0
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	9302      	str	r3, [sp, #8]
 80060f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f80e 	bl	800611e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006102:	69f8      	ldr	r0, [r7, #28]
 8006104:	f000 f8a4 	bl	8006250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006108:	2301      	movs	r3, #1
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e002      	b.n	8006114 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295
 8006112:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006114:	69bb      	ldr	r3, [r7, #24]
	}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b088      	sub	sp, #32
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	461a      	mov	r2, r3
 8006136:	21a5      	movs	r1, #165	@ 0xa5
 8006138:	f002 fa8a 	bl	8008650 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006146:	440b      	add	r3, r1
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	b672      	cpsid	i
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	b662      	cpsie	i
 8006174:	617b      	str	r3, [r7, #20]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01f      	beq.n	80061c8 <prvInitialiseNewTask+0xaa>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006188:	2300      	movs	r3, #0
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	e012      	b.n	80061b4 <prvInitialiseNewTask+0x96>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	7819      	ldrb	r1, [r3, #0]
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	3334      	adds	r3, #52	@ 0x34
 800619e:	460a      	mov	r2, r1
 80061a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d9e9      	bls.n	800618e <prvInitialiseNewTask+0x70>
 80061ba:	e000      	b.n	80061be <prvInitialiseNewTask+0xa0>
			{
				break;
 80061bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061c6:	e003      	b.n	80061d0 <prvInitialiseNewTask+0xb2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d901      	bls.n	80061da <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061d6:	2306      	movs	r3, #6
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	2200      	movs	r2, #0
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff f994 	bl	800551e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f98f 	bl	800551e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006204:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	f1c3 0207 	rsb	r2, r3, #7
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	2200      	movs	r2, #0
 800621a:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	2200      	movs	r2, #0
 8006220:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	69b8      	ldr	r0, [r7, #24]
 8006230:	f001 fafa 	bl	8007828 <pxPortInitialiseStack>
 8006234:	4602      	mov	r2, r0
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006258:	f001 fbf8 	bl	8007a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800625c:	4b2c      	ldr	r3, [pc, #176]	@ (8006310 <prvAddNewTaskToReadyList+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	4a2b      	ldr	r2, [pc, #172]	@ (8006310 <prvAddNewTaskToReadyList+0xc0>)
 8006264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006266:	4b2b      	ldr	r3, [pc, #172]	@ (8006314 <prvAddNewTaskToReadyList+0xc4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800626e:	4a29      	ldr	r2, [pc, #164]	@ (8006314 <prvAddNewTaskToReadyList+0xc4>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006274:	4b26      	ldr	r3, [pc, #152]	@ (8006310 <prvAddNewTaskToReadyList+0xc0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d110      	bne.n	800629e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800627c:	f000 fdbc 	bl	8006df8 <prvInitialiseTaskLists>
 8006280:	e00d      	b.n	800629e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006282:	4b25      	ldr	r3, [pc, #148]	@ (8006318 <prvAddNewTaskToReadyList+0xc8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800628a:	4b22      	ldr	r3, [pc, #136]	@ (8006314 <prvAddNewTaskToReadyList+0xc4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	429a      	cmp	r2, r3
 8006296:	d802      	bhi.n	800629e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006298:	4a1e      	ldr	r2, [pc, #120]	@ (8006314 <prvAddNewTaskToReadyList+0xc4>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800629e:	4b1f      	ldr	r3, [pc, #124]	@ (800631c <prvAddNewTaskToReadyList+0xcc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <prvAddNewTaskToReadyList+0xcc>)
 80062a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062a8:	4b1c      	ldr	r3, [pc, #112]	@ (800631c <prvAddNewTaskToReadyList+0xcc>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	2201      	movs	r2, #1
 80062b6:	409a      	lsls	r2, r3
 80062b8:	4b19      	ldr	r3, [pc, #100]	@ (8006320 <prvAddNewTaskToReadyList+0xd0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4313      	orrs	r3, r2
 80062be:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <prvAddNewTaskToReadyList+0xd0>)
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4a15      	ldr	r2, [pc, #84]	@ (8006324 <prvAddNewTaskToReadyList+0xd4>)
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f7ff f92d 	bl	8005538 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062de:	f001 fbeb 	bl	8007ab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006318 <prvAddNewTaskToReadyList+0xc8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <prvAddNewTaskToReadyList+0xc4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d207      	bcs.n	8006308 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <prvAddNewTaskToReadyList+0xd8>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000850 	.word	0x20000850
 8006314:	20000750 	.word	0x20000750
 8006318:	2000085c 	.word	0x2000085c
 800631c:	2000086c 	.word	0x2000086c
 8006320:	20000858 	.word	0x20000858
 8006324:	20000754 	.word	0x20000754
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006334:	f001 fb8a 	bl	8007a4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <vTaskDelete+0x18>
 800633e:	4b3a      	ldr	r3, [pc, #232]	@ (8006428 <vTaskDelete+0xfc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	e000      	b.n	8006346 <vTaskDelete+0x1a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f950 	bl	80055f2 <uxListRemove>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635c:	4933      	ldr	r1, [pc, #204]	@ (800642c <vTaskDelete+0x100>)
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <vTaskDelete+0x58>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	2201      	movs	r2, #1
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	43da      	mvns	r2, r3
 800637a:	4b2d      	ldr	r3, [pc, #180]	@ (8006430 <vTaskDelete+0x104>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4013      	ands	r3, r2
 8006380:	4a2b      	ldr	r2, [pc, #172]	@ (8006430 <vTaskDelete+0x104>)
 8006382:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3318      	adds	r3, #24
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff f92e 	bl	80055f2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006396:	4b27      	ldr	r3, [pc, #156]	@ (8006434 <vTaskDelete+0x108>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a25      	ldr	r2, [pc, #148]	@ (8006434 <vTaskDelete+0x108>)
 800639e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80063a0:	4b21      	ldr	r3, [pc, #132]	@ (8006428 <vTaskDelete+0xfc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d10b      	bne.n	80063c2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4821      	ldr	r0, [pc, #132]	@ (8006438 <vTaskDelete+0x10c>)
 80063b2:	f7ff f8c1 	bl	8005538 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80063b6:	4b21      	ldr	r3, [pc, #132]	@ (800643c <vTaskDelete+0x110>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <vTaskDelete+0x110>)
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	e009      	b.n	80063d6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80063c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006440 <vTaskDelete+0x114>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <vTaskDelete+0x114>)
 80063ca:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fe55 	bl	800707c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80063d2:	f000 fe85 	bl	80070e0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80063d6:	f001 fb6f 	bl	8007ab8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80063da:	4b1a      	ldr	r3, [pc, #104]	@ (8006444 <vTaskDelete+0x118>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01e      	beq.n	8006420 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 80063e2:	4b11      	ldr	r3, [pc, #68]	@ (8006428 <vTaskDelete+0xfc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d119      	bne.n	8006420 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80063ec:	4b16      	ldr	r3, [pc, #88]	@ (8006448 <vTaskDelete+0x11c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <vTaskDelete+0xe4>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	b672      	cpsid	i
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	b662      	cpsie	i
 8006408:	60bb      	str	r3, [r7, #8]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006410:	4b0e      	ldr	r3, [pc, #56]	@ (800644c <vTaskDelete+0x120>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000750 	.word	0x20000750
 800642c:	20000754 	.word	0x20000754
 8006430:	20000858 	.word	0x20000858
 8006434:	2000086c 	.word	0x2000086c
 8006438:	20000824 	.word	0x20000824
 800643c:	20000838 	.word	0x20000838
 8006440:	20000850 	.word	0x20000850
 8006444:	2000085c 	.word	0x2000085c
 8006448:	20000878 	.word	0x20000878
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01a      	beq.n	8006498 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006462:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <vTaskDelay+0x68>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <vTaskDelay+0x36>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	b672      	cpsid	i
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	b662      	cpsie	i
 800647e:	60bb      	str	r3, [r7, #8]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006486:	f000 f8ed 	bl	8006664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800648a:	2100      	movs	r1, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f965 	bl	800775c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006492:	f000 f8f5 	bl	8006680 <xTaskResumeAll>
 8006496:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800649e:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vTaskDelay+0x6c>)
 80064a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000878 	.word	0x20000878
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <eTaskGetState+0x2e>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	b672      	cpsid	i
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	b662      	cpsie	i
 80064e6:	60bb      	str	r3, [r7, #8]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80064ee:	4b24      	ldr	r3, [pc, #144]	@ (8006580 <eTaskGetState+0xc0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d102      	bne.n	80064fe <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80064f8:	2300      	movs	r3, #0
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e03a      	b.n	8006574 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 80064fe:	f001 faa5 	bl	8007a4c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006508:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <eTaskGetState+0xc4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800650e:	4b1e      	ldr	r3, [pc, #120]	@ (8006588 <eTaskGetState+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006514:	f001 fad0 	bl	8007ab8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d003      	beq.n	8006528 <eTaskGetState+0x68>
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d102      	bne.n	800652e <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006528:	2302      	movs	r3, #2
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e022      	b.n	8006574 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4a16      	ldr	r2, [pc, #88]	@ (800658c <eTaskGetState+0xcc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d112      	bne.n	800655c <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	d102      	bne.n	8006550 <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 800654a:	2302      	movs	r3, #2
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e011      	b.n	8006574 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 8006550:	2303      	movs	r3, #3
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e00e      	b.n	8006574 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006556:	2302      	movs	r3, #2
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e00b      	b.n	8006574 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4a0c      	ldr	r2, [pc, #48]	@ (8006590 <eTaskGetState+0xd0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d002      	beq.n	800656a <eTaskGetState+0xaa>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800656a:	2304      	movs	r3, #4
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e001      	b.n	8006574 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006574:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000750 	.word	0x20000750
 8006584:	20000808 	.word	0x20000808
 8006588:	2000080c 	.word	0x2000080c
 800658c:	2000083c 	.word	0x2000083c
 8006590:	20000824 	.word	0x20000824

08006594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	@ 0x28
 8006598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065a2:	463a      	mov	r2, r7
 80065a4:	1d39      	adds	r1, r7, #4
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fa f81e 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	9202      	str	r2, [sp, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	460a      	mov	r2, r1
 80065c2:	4922      	ldr	r1, [pc, #136]	@ (800664c <vTaskStartScheduler+0xb8>)
 80065c4:	4822      	ldr	r0, [pc, #136]	@ (8006650 <vTaskStartScheduler+0xbc>)
 80065c6:	f7ff fcff 	bl	8005fc8 <xTaskCreateStatic>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4a21      	ldr	r2, [pc, #132]	@ (8006654 <vTaskStartScheduler+0xc0>)
 80065ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065d0:	4b20      	ldr	r3, [pc, #128]	@ (8006654 <vTaskStartScheduler+0xc0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065d8:	2301      	movs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e001      	b.n	80065e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d11a      	bne.n	800661e <vTaskStartScheduler+0x8a>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	b672      	cpsid	i
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	b662      	cpsie	i
 80065fc:	613b      	str	r3, [r7, #16]
}
 80065fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006600:	4b15      	ldr	r3, [pc, #84]	@ (8006658 <vTaskStartScheduler+0xc4>)
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006608:	4b14      	ldr	r3, [pc, #80]	@ (800665c <vTaskStartScheduler+0xc8>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800660e:	4b14      	ldr	r3, [pc, #80]	@ (8006660 <vTaskStartScheduler+0xcc>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006614:	f7fa fe34 	bl	8001280 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006618:	f001 f99a 	bl	8007950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800661c:	e011      	b.n	8006642 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d10d      	bne.n	8006642 <vTaskStartScheduler+0xae>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	b672      	cpsid	i
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	b662      	cpsie	i
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <vTaskStartScheduler+0xaa>
}
 8006642:	bf00      	nop
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	080099d0 	.word	0x080099d0
 8006650:	08006dc9 	.word	0x08006dc9
 8006654:	20000874 	.word	0x20000874
 8006658:	20000870 	.word	0x20000870
 800665c:	2000085c 	.word	0x2000085c
 8006660:	20000854 	.word	0x20000854

08006664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006668:	4b04      	ldr	r3, [pc, #16]	@ (800667c <vTaskSuspendAll+0x18>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	4a03      	ldr	r2, [pc, #12]	@ (800667c <vTaskSuspendAll+0x18>)
 8006670:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006672:	bf00      	nop
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000878 	.word	0x20000878

08006680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800668e:	4b43      	ldr	r3, [pc, #268]	@ (800679c <xTaskResumeAll+0x11c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <xTaskResumeAll+0x32>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	b672      	cpsid	i
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	b662      	cpsie	i
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b2:	f001 f9cb 	bl	8007a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066b6:	4b39      	ldr	r3, [pc, #228]	@ (800679c <xTaskResumeAll+0x11c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a37      	ldr	r2, [pc, #220]	@ (800679c <xTaskResumeAll+0x11c>)
 80066be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c0:	4b36      	ldr	r3, [pc, #216]	@ (800679c <xTaskResumeAll+0x11c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d161      	bne.n	800678c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c8:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <xTaskResumeAll+0x120>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d05d      	beq.n	800678c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d0:	e02e      	b.n	8006730 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d2:	4b34      	ldr	r3, [pc, #208]	@ (80067a4 <xTaskResumeAll+0x124>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3318      	adds	r3, #24
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe ff87 	bl	80055f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe ff82 	bl	80055f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	2201      	movs	r2, #1
 80066f4:	409a      	lsls	r2, r3
 80066f6:	4b2c      	ldr	r3, [pc, #176]	@ (80067a8 <xTaskResumeAll+0x128>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	4a2a      	ldr	r2, [pc, #168]	@ (80067a8 <xTaskResumeAll+0x128>)
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4a27      	ldr	r2, [pc, #156]	@ (80067ac <xTaskResumeAll+0x12c>)
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fe ff0e 	bl	8005538 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006720:	4b23      	ldr	r3, [pc, #140]	@ (80067b0 <xTaskResumeAll+0x130>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800672a:	4b22      	ldr	r3, [pc, #136]	@ (80067b4 <xTaskResumeAll+0x134>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006730:	4b1c      	ldr	r3, [pc, #112]	@ (80067a4 <xTaskResumeAll+0x124>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1cc      	bne.n	80066d2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800673e:	f000 fccf 	bl	80070e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006742:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <xTaskResumeAll+0x138>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d010      	beq.n	8006770 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800674e:	f000 f8c7 	bl	80068e0 <xTaskIncrementTick>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006758:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <xTaskResumeAll+0x134>)
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3b01      	subs	r3, #1
 8006762:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f1      	bne.n	800674e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800676a:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <xTaskResumeAll+0x138>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <xTaskResumeAll+0x134>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800677c:	4b0f      	ldr	r3, [pc, #60]	@ (80067bc <xTaskResumeAll+0x13c>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678c:	f001 f994 	bl	8007ab8 <vPortExitCritical>

	return xAlreadyYielded;
 8006790:	68bb      	ldr	r3, [r7, #8]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000878 	.word	0x20000878
 80067a0:	20000850 	.word	0x20000850
 80067a4:	20000810 	.word	0x20000810
 80067a8:	20000858 	.word	0x20000858
 80067ac:	20000754 	.word	0x20000754
 80067b0:	20000750 	.word	0x20000750
 80067b4:	20000864 	.word	0x20000864
 80067b8:	20000860 	.word	0x20000860
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	2307      	movs	r3, #7
 80067d2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80067d4:	f7ff ff46 	bl	8006664 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80067d8:	4b3b      	ldr	r3, [pc, #236]	@ (80068c8 <uxTaskGetSystemState+0x108>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d36a      	bcc.n	80068b8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	461a      	mov	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1898      	adds	r0, r3, r2
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a32      	ldr	r2, [pc, #200]	@ (80068cc <uxTaskGetSystemState+0x10c>)
 8006804:	4413      	add	r3, r2
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	f000 fbc9 	bl	8006fa0 <prvListTasksWithinSingleList>
 800680e:	4602      	mov	r2, r0
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4413      	add	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e2      	bne.n	80067e2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	461a      	mov	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	4a28      	ldr	r2, [pc, #160]	@ (80068d0 <uxTaskGetSystemState+0x110>)
 800682e:	6811      	ldr	r1, [r2, #0]
 8006830:	2202      	movs	r2, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fbb4 	bl	8006fa0 <prvListTasksWithinSingleList>
 8006838:	4602      	mov	r2, r0
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	4a20      	ldr	r2, [pc, #128]	@ (80068d4 <uxTaskGetSystemState+0x114>)
 8006852:	6811      	ldr	r1, [r2, #0]
 8006854:	2202      	movs	r2, #2
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fba2 	bl	8006fa0 <prvListTasksWithinSingleList>
 800685c:	4602      	mov	r2, r0
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	461a      	mov	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	2204      	movs	r2, #4
 8006876:	4918      	ldr	r1, [pc, #96]	@ (80068d8 <uxTaskGetSystemState+0x118>)
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fb91 	bl	8006fa0 <prvListTasksWithinSingleList>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	461a      	mov	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	2203      	movs	r2, #3
 8006898:	4910      	ldr	r1, [pc, #64]	@ (80068dc <uxTaskGetSystemState+0x11c>)
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb80 	bl	8006fa0 <prvListTasksWithinSingleList>
 80068a0:	4602      	mov	r2, r0
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80068ae:	f7fa fd7f 	bl	80013b0 <getRunTimeCounterValue>
 80068b2:	4602      	mov	r2, r0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80068b8:	f7ff fee2 	bl	8006680 <xTaskResumeAll>

		return uxTask;
 80068bc:	697b      	ldr	r3, [r7, #20]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000850 	.word	0x20000850
 80068cc:	20000754 	.word	0x20000754
 80068d0:	20000808 	.word	0x20000808
 80068d4:	2000080c 	.word	0x2000080c
 80068d8:	20000824 	.word	0x20000824
 80068dc:	2000083c 	.word	0x2000083c

080068e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ea:	4b50      	ldr	r3, [pc, #320]	@ (8006a2c <xTaskIncrementTick+0x14c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 808b 	bne.w	8006a0a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006a30 <xTaskIncrementTick+0x150>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068fc:	4a4c      	ldr	r2, [pc, #304]	@ (8006a30 <xTaskIncrementTick+0x150>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d123      	bne.n	8006950 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006908:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <xTaskIncrementTick+0x154>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <xTaskIncrementTick+0x4e>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	603b      	str	r3, [r7, #0]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xTaskIncrementTick+0x4a>
 800692e:	4b41      	ldr	r3, [pc, #260]	@ (8006a34 <xTaskIncrementTick+0x154>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	4b40      	ldr	r3, [pc, #256]	@ (8006a38 <xTaskIncrementTick+0x158>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a3e      	ldr	r2, [pc, #248]	@ (8006a34 <xTaskIncrementTick+0x154>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4a3e      	ldr	r2, [pc, #248]	@ (8006a38 <xTaskIncrementTick+0x158>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4b3e      	ldr	r3, [pc, #248]	@ (8006a3c <xTaskIncrementTick+0x15c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	4a3c      	ldr	r2, [pc, #240]	@ (8006a3c <xTaskIncrementTick+0x15c>)
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	f000 fbc8 	bl	80070e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006950:	4b3b      	ldr	r3, [pc, #236]	@ (8006a40 <xTaskIncrementTick+0x160>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d348      	bcc.n	80069ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800695a:	4b36      	ldr	r3, [pc, #216]	@ (8006a34 <xTaskIncrementTick+0x154>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006964:	4b36      	ldr	r3, [pc, #216]	@ (8006a40 <xTaskIncrementTick+0x160>)
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	601a      	str	r2, [r3, #0]
					break;
 800696c:	e03e      	b.n	80069ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696e:	4b31      	ldr	r3, [pc, #196]	@ (8006a34 <xTaskIncrementTick+0x154>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d203      	bcs.n	800698e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006986:	4a2e      	ldr	r2, [pc, #184]	@ (8006a40 <xTaskIncrementTick+0x160>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800698c:	e02e      	b.n	80069ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	3304      	adds	r3, #4
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fe2d 	bl	80055f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3318      	adds	r3, #24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fe24 	bl	80055f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	2201      	movs	r2, #1
 80069b0:	409a      	lsls	r2, r3
 80069b2:	4b24      	ldr	r3, [pc, #144]	@ (8006a44 <xTaskIncrementTick+0x164>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <xTaskIncrementTick+0x164>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a48 <xTaskIncrementTick+0x168>)
 80069ca:	441a      	add	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe fdb0 	bl	8005538 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a4c <xTaskIncrementTick+0x16c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d3b9      	bcc.n	800695a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80069e6:	2301      	movs	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ea:	e7b6      	b.n	800695a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069ec:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <xTaskIncrementTick+0x16c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f2:	4915      	ldr	r1, [pc, #84]	@ (8006a48 <xTaskIncrementTick+0x168>)
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d907      	bls.n	8006a14 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e004      	b.n	8006a14 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a0a:	4b11      	ldr	r3, [pc, #68]	@ (8006a50 <xTaskIncrementTick+0x170>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	4a0f      	ldr	r2, [pc, #60]	@ (8006a50 <xTaskIncrementTick+0x170>)
 8006a12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <xTaskIncrementTick+0x174>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000878 	.word	0x20000878
 8006a30:	20000854 	.word	0x20000854
 8006a34:	20000808 	.word	0x20000808
 8006a38:	2000080c 	.word	0x2000080c
 8006a3c:	20000868 	.word	0x20000868
 8006a40:	20000870 	.word	0x20000870
 8006a44:	20000858 	.word	0x20000858
 8006a48:	20000754 	.word	0x20000754
 8006a4c:	20000750 	.word	0x20000750
 8006a50:	20000860 	.word	0x20000860
 8006a54:	20000864 	.word	0x20000864

08006a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a5e:	4b47      	ldr	r3, [pc, #284]	@ (8006b7c <vTaskSwitchContext+0x124>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a66:	4b46      	ldr	r3, [pc, #280]	@ (8006b80 <vTaskSwitchContext+0x128>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a6c:	e082      	b.n	8006b74 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 8006a6e:	4b44      	ldr	r3, [pc, #272]	@ (8006b80 <vTaskSwitchContext+0x128>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006a74:	f7fa fc9c 	bl	80013b0 <getRunTimeCounterValue>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	4a42      	ldr	r2, [pc, #264]	@ (8006b84 <vTaskSwitchContext+0x12c>)
 8006a7c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006a7e:	4b41      	ldr	r3, [pc, #260]	@ (8006b84 <vTaskSwitchContext+0x12c>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b41      	ldr	r3, [pc, #260]	@ (8006b88 <vTaskSwitchContext+0x130>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d909      	bls.n	8006a9e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006a8a:	4b40      	ldr	r3, [pc, #256]	@ (8006b8c <vTaskSwitchContext+0x134>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006a90:	4a3c      	ldr	r2, [pc, #240]	@ (8006b84 <vTaskSwitchContext+0x12c>)
 8006a92:	6810      	ldr	r0, [r2, #0]
 8006a94:	4a3c      	ldr	r2, [pc, #240]	@ (8006b88 <vTaskSwitchContext+0x130>)
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	1a82      	subs	r2, r0, r2
 8006a9a:	440a      	add	r2, r1
 8006a9c:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006a9e:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <vTaskSwitchContext+0x12c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a39      	ldr	r2, [pc, #228]	@ (8006b88 <vTaskSwitchContext+0x130>)
 8006aa4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006aa6:	4b39      	ldr	r3, [pc, #228]	@ (8006b8c <vTaskSwitchContext+0x134>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d111      	bne.n	8006ae2 <vTaskSwitchContext+0x8a>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d10b      	bne.n	8006ae2 <vTaskSwitchContext+0x8a>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	3308      	adds	r3, #8
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d105      	bne.n	8006ae2 <vTaskSwitchContext+0x8a>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d008      	beq.n	8006af4 <vTaskSwitchContext+0x9c>
 8006ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b8c <vTaskSwitchContext+0x134>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b29      	ldr	r3, [pc, #164]	@ (8006b8c <vTaskSwitchContext+0x134>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3334      	adds	r3, #52	@ 0x34
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fa fbb4 	bl	800125c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b26      	ldr	r3, [pc, #152]	@ (8006b90 <vTaskSwitchContext+0x138>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	fab3 f383 	clz	r3, r3
 8006b00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	f1c3 031f 	rsb	r3, r3, #31
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	4922      	ldr	r1, [pc, #136]	@ (8006b94 <vTaskSwitchContext+0x13c>)
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <vTaskSwitchContext+0xe2>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	607b      	str	r3, [r7, #4]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <vTaskSwitchContext+0xde>
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4a13      	ldr	r2, [pc, #76]	@ (8006b94 <vTaskSwitchContext+0x13c>)
 8006b46:	4413      	add	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	605a      	str	r2, [r3, #4]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d104      	bne.n	8006b6a <vTaskSwitchContext+0x112>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4a06      	ldr	r2, [pc, #24]	@ (8006b8c <vTaskSwitchContext+0x134>)
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000878 	.word	0x20000878
 8006b80:	20000864 	.word	0x20000864
 8006b84:	20000880 	.word	0x20000880
 8006b88:	2000087c 	.word	0x2000087c
 8006b8c:	20000750 	.word	0x20000750
 8006b90:	20000858 	.word	0x20000858
 8006b94:	20000754 	.word	0x20000754

08006b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10d      	bne.n	8006bc4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	b672      	cpsid	i
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	b662      	cpsie	i
 8006bbc:	60fb      	str	r3, [r7, #12]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc4:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <vTaskPlaceOnEventList+0x4c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3318      	adds	r3, #24
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe fcd7 	bl	8005580 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6838      	ldr	r0, [r7, #0]
 8006bd6:	f000 fdc1 	bl	800775c <prvAddCurrentTaskToDelayedList>
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000750 	.word	0x20000750

08006be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10d      	bne.n	8006c1a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	b672      	cpsid	i
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	b662      	cpsie	i
 8006c12:	60fb      	str	r3, [r7, #12]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fce7 	bl	80055f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c24:	4b1d      	ldr	r3, [pc, #116]	@ (8006c9c <xTaskRemoveFromEventList+0xb4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11c      	bne.n	8006c66 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fcde 	bl	80055f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ca0 <xTaskRemoveFromEventList+0xb8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <xTaskRemoveFromEventList+0xb8>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a13      	ldr	r2, [pc, #76]	@ (8006ca4 <xTaskRemoveFromEventList+0xbc>)
 8006c56:	441a      	add	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fe fc6a 	bl	8005538 <vListInsertEnd>
 8006c64:	e005      	b.n	8006c72 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3318      	adds	r3, #24
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480e      	ldr	r0, [pc, #56]	@ (8006ca8 <xTaskRemoveFromEventList+0xc0>)
 8006c6e:	f7fe fc63 	bl	8005538 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <xTaskRemoveFromEventList+0xc4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d905      	bls.n	8006c8c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c84:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb0 <xTaskRemoveFromEventList+0xc8>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e001      	b.n	8006c90 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000878 	.word	0x20000878
 8006ca0:	20000858 	.word	0x20000858
 8006ca4:	20000754 	.word	0x20000754
 8006ca8:	20000810 	.word	0x20000810
 8006cac:	20000750 	.word	0x20000750
 8006cb0:	20000864 	.word	0x20000864

08006cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <vTaskInternalSetTimeOutState+0x24>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cc4:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <vTaskInternalSetTimeOutState+0x28>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000868 	.word	0x20000868
 8006cdc:	20000854 	.word	0x20000854

08006ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10d      	bne.n	8006d0c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf4:	b672      	cpsid	i
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	b662      	cpsie	i
 8006d04:	613b      	str	r3, [r7, #16]
}
 8006d06:	bf00      	nop
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10d      	bne.n	8006d2e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	b672      	cpsid	i
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	b662      	cpsie	i
 8006d26:	60fb      	str	r3, [r7, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006d2e:	f000 fe8d 	bl	8007a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d32:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <xTaskCheckForTimeOut+0xc8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d102      	bne.n	8006d52 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e023      	b.n	8006d9a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b15      	ldr	r3, [pc, #84]	@ (8006dac <xTaskCheckForTimeOut+0xcc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d007      	beq.n	8006d6e <xTaskCheckForTimeOut+0x8e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d302      	bcc.n	8006d6e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e015      	b.n	8006d9a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d20b      	bcs.n	8006d90 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff95 	bl	8006cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e004      	b.n	8006d9a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d9a:	f000 fe8d 	bl	8007ab8 <vPortExitCritical>

	return xReturn;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000854 	.word	0x20000854
 8006dac:	20000868 	.word	0x20000868

08006db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006db4:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <vTaskMissedYield+0x14>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000864 	.word	0x20000864

08006dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dd0:	f000 f852 	bl	8006e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dd4:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <prvIdleTask+0x28>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d9f9      	bls.n	8006dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ddc:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <prvIdleTask+0x2c>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dec:	e7f0      	b.n	8006dd0 <prvIdleTask+0x8>
 8006dee:	bf00      	nop
 8006df0:	20000754 	.word	0x20000754
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dfe:	2300      	movs	r3, #0
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	e00c      	b.n	8006e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4a12      	ldr	r2, [pc, #72]	@ (8006e58 <prvInitialiseTaskLists+0x60>)
 8006e10:	4413      	add	r3, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fb63 	bl	80054de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b06      	cmp	r3, #6
 8006e22:	d9ef      	bls.n	8006e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e24:	480d      	ldr	r0, [pc, #52]	@ (8006e5c <prvInitialiseTaskLists+0x64>)
 8006e26:	f7fe fb5a 	bl	80054de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e2a:	480d      	ldr	r0, [pc, #52]	@ (8006e60 <prvInitialiseTaskLists+0x68>)
 8006e2c:	f7fe fb57 	bl	80054de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e30:	480c      	ldr	r0, [pc, #48]	@ (8006e64 <prvInitialiseTaskLists+0x6c>)
 8006e32:	f7fe fb54 	bl	80054de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e36:	480c      	ldr	r0, [pc, #48]	@ (8006e68 <prvInitialiseTaskLists+0x70>)
 8006e38:	f7fe fb51 	bl	80054de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e3c:	480b      	ldr	r0, [pc, #44]	@ (8006e6c <prvInitialiseTaskLists+0x74>)
 8006e3e:	f7fe fb4e 	bl	80054de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e42:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <prvInitialiseTaskLists+0x78>)
 8006e44:	4a05      	ldr	r2, [pc, #20]	@ (8006e5c <prvInitialiseTaskLists+0x64>)
 8006e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <prvInitialiseTaskLists+0x7c>)
 8006e4a:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <prvInitialiseTaskLists+0x68>)
 8006e4c:	601a      	str	r2, [r3, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000754 	.word	0x20000754
 8006e5c:	200007e0 	.word	0x200007e0
 8006e60:	200007f4 	.word	0x200007f4
 8006e64:	20000810 	.word	0x20000810
 8006e68:	20000824 	.word	0x20000824
 8006e6c:	2000083c 	.word	0x2000083c
 8006e70:	20000808 	.word	0x20000808
 8006e74:	2000080c 	.word	0x2000080c

08006e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e7e:	e019      	b.n	8006eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e80:	f000 fde4 	bl	8007a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e84:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <prvCheckTasksWaitingTermination+0x50>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fbae 	bl	80055f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <prvCheckTasksWaitingTermination+0x54>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006ecc <prvCheckTasksWaitingTermination+0x54>)
 8006e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <prvCheckTasksWaitingTermination+0x58>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed0 <prvCheckTasksWaitingTermination+0x58>)
 8006ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eaa:	f000 fe05 	bl	8007ab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8e4 	bl	800707c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <prvCheckTasksWaitingTermination+0x58>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e1      	bne.n	8006e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000824 	.word	0x20000824
 8006ecc:	20000850 	.word	0x20000850
 8006ed0:	20000838 	.word	0x20000838

08006ed4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <vTaskGetInfo+0x1a>
 8006ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8006f9c <vTaskGetInfo+0xc8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	e000      	b.n	8006ef0 <vTaskGetInfo+0x1c>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d01a      	beq.n	8006f66 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8006f30:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <vTaskGetInfo+0xc8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d103      	bne.n	8006f42 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	731a      	strb	r2, [r3, #12]
 8006f40:	e018      	b.n	8006f74 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d112      	bne.n	8006f74 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8006f4e:	f7ff fb89 	bl	8006664 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8006f60:	f7ff fb8e 	bl	8006680 <xTaskResumeAll>
 8006f64:	e006      	b.n	8006f74 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8006f66:	6978      	ldr	r0, [r7, #20]
 8006f68:	f7ff faaa 	bl	80064c0 <eTaskGetState>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f860 	bl	8007044 <prvTaskCheckFreeStackSpace>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006f8c:	e002      	b.n	8006f94 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	841a      	strh	r2, [r3, #32]
	}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000750 	.word	0x20000750

08006fa0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	@ 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d03f      	beq.n	800703a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	605a      	str	r2, [r3, #4]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d104      	bne.n	8006fde <prvListTasksWithinSingleList+0x3e>
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d104      	bne.n	800700a <prvListTasksWithinSingleList+0x6a>
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	461a      	mov	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1899      	adds	r1, r3, r2
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2201      	movs	r2, #1
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7ff ff54 	bl	8006ed4 <vTaskGetInfo>
				uxTask++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	429a      	cmp	r2, r3
 8007038:	d1d5      	bne.n	8006fe6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800703c:	4618      	mov	r0, r3
 800703e:	3728      	adds	r7, #40	@ 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007050:	e005      	b.n	800705e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3301      	adds	r3, #1
 8007056:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2ba5      	cmp	r3, #165	@ 0xa5
 8007064:	d0f5      	beq.n	8007052 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	089b      	lsrs	r3, r3, #2
 800706a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	b29b      	uxth	r3, r3
	}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fed6 	bl	8007e44 <vPortFree>
				vPortFree( pxTCB );
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fed3 	bl	8007e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800709e:	e01b      	b.n	80070d8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d103      	bne.n	80070b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 feca 	bl	8007e44 <vPortFree>
	}
 80070b0:	e012      	b.n	80070d8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d00d      	beq.n	80070d8 <prvDeleteTCB+0x5c>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	b672      	cpsid	i
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	b662      	cpsie	i
 80070d0:	60fb      	str	r3, [r7, #12]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <prvDeleteTCB+0x58>
	}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <prvResetNextTaskUnblockTime+0x38>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070f0:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <prvResetNextTaskUnblockTime+0x3c>)
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070f8:	e008      	b.n	800710c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b07      	ldr	r3, [pc, #28]	@ (8007118 <prvResetNextTaskUnblockTime+0x38>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a04      	ldr	r2, [pc, #16]	@ (800711c <prvResetNextTaskUnblockTime+0x3c>)
 800710a:	6013      	str	r3, [r2, #0]
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	20000808 	.word	0x20000808
 800711c:	20000870 	.word	0x20000870

08007120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <xTaskGetSchedulerState+0x34>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800712e:	2301      	movs	r3, #1
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	e008      	b.n	8007146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007134:	4b08      	ldr	r3, [pc, #32]	@ (8007158 <xTaskGetSchedulerState+0x38>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800713c:	2302      	movs	r3, #2
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	e001      	b.n	8007146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007146:	687b      	ldr	r3, [r7, #4]
	}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	2000085c 	.word	0x2000085c
 8007158:	20000878 	.word	0x20000878

0800715c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d069      	beq.n	8007246 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <xTaskPriorityInherit+0xf4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d259      	bcs.n	8007234 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	db06      	blt.n	8007196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	4b31      	ldr	r3, [pc, #196]	@ (8007250 <xTaskPriorityInherit+0xf4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	f1c3 0207 	rsb	r2, r3, #7
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6959      	ldr	r1, [r3, #20]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007254 <xTaskPriorityInherit+0xf8>)
 80071a8:	4413      	add	r3, r2
 80071aa:	4299      	cmp	r1, r3
 80071ac:	d13a      	bne.n	8007224 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fa1d 	bl	80055f2 <uxListRemove>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d115      	bne.n	80071ea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	4924      	ldr	r1, [pc, #144]	@ (8007254 <xTaskPriorityInherit+0xf8>)
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xTaskPriorityInherit+0x8e>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	2201      	movs	r2, #1
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43da      	mvns	r2, r3
 80071e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <xTaskPriorityInherit+0xfc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4013      	ands	r3, r2
 80071e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007258 <xTaskPriorityInherit+0xfc>)
 80071e8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071ea:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <xTaskPriorityInherit+0xf4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	2201      	movs	r2, #1
 80071fa:	409a      	lsls	r2, r3
 80071fc:	4b16      	ldr	r3, [pc, #88]	@ (8007258 <xTaskPriorityInherit+0xfc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4313      	orrs	r3, r2
 8007202:	4a15      	ldr	r2, [pc, #84]	@ (8007258 <xTaskPriorityInherit+0xfc>)
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4a10      	ldr	r2, [pc, #64]	@ (8007254 <xTaskPriorityInherit+0xf8>)
 8007214:	441a      	add	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7fe f98b 	bl	8005538 <vListInsertEnd>
 8007222:	e004      	b.n	800722e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007224:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <xTaskPriorityInherit+0xf4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e008      	b.n	8007246 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007238:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <xTaskPriorityInherit+0xf4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	429a      	cmp	r2, r3
 8007240:	d201      	bcs.n	8007246 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007246:	68fb      	ldr	r3, [r7, #12]
	}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000750 	.word	0x20000750
 8007254:	20000754 	.word	0x20000754
 8007258:	20000858 	.word	0x20000858

0800725c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d074      	beq.n	800735c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007272:	4b3d      	ldr	r3, [pc, #244]	@ (8007368 <xTaskPriorityDisinherit+0x10c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	429a      	cmp	r2, r3
 800727a:	d00d      	beq.n	8007298 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	b672      	cpsid	i
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	b662      	cpsie	i
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	b672      	cpsid	i
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	b662      	cpsie	i
 80072b4:	60bb      	str	r3, [r7, #8]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d044      	beq.n	800735c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d140      	bne.n	800735c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe f987 	bl	80055f2 <uxListRemove>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d115      	bne.n	8007316 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ee:	491f      	ldr	r1, [pc, #124]	@ (800736c <xTaskPriorityDisinherit+0x110>)
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xTaskPriorityDisinherit+0xba>
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	2201      	movs	r2, #1
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	43da      	mvns	r2, r3
 800730c:	4b18      	ldr	r3, [pc, #96]	@ (8007370 <xTaskPriorityDisinherit+0x114>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4013      	ands	r3, r2
 8007312:	4a17      	ldr	r2, [pc, #92]	@ (8007370 <xTaskPriorityDisinherit+0x114>)
 8007314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	f1c3 0207 	rsb	r2, r3, #7
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	2201      	movs	r2, #1
 8007330:	409a      	lsls	r2, r3
 8007332:	4b0f      	ldr	r3, [pc, #60]	@ (8007370 <xTaskPriorityDisinherit+0x114>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4313      	orrs	r3, r2
 8007338:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <xTaskPriorityDisinherit+0x114>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4a08      	ldr	r2, [pc, #32]	@ (800736c <xTaskPriorityDisinherit+0x110>)
 800734a:	441a      	add	r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fe f8f0 	bl	8005538 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800735c:	697b      	ldr	r3, [r7, #20]
	}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000750 	.word	0x20000750
 800736c:	20000754 	.word	0x20000754
 8007370:	20000858 	.word	0x20000858

08007374 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007382:	2301      	movs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8089 	beq.w	80074a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10d      	bne.n	80073b2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	60fb      	str	r3, [r7, #12]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d902      	bls.n	80073c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e002      	b.n	80073c8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d066      	beq.n	80074a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d161      	bne.n	80074a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80073dc:	4b32      	ldr	r3, [pc, #200]	@ (80074a8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d10d      	bne.n	8007402 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	b672      	cpsid	i
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	b662      	cpsie	i
 80073fa:	60bb      	str	r3, [r7, #8]
}
 80073fc:	bf00      	nop
 80073fe:	bf00      	nop
 8007400:	e7fd      	b.n	80073fe <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	db04      	blt.n	8007420 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f1c3 0207 	rsb	r2, r3, #7
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	6959      	ldr	r1, [r3, #20]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007430:	4413      	add	r3, r2
 8007432:	4299      	cmp	r1, r3
 8007434:	d134      	bne.n	80074a0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	3304      	adds	r3, #4
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe f8d9 	bl	80055f2 <uxListRemove>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d115      	bne.n	8007472 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744a:	4918      	ldr	r1, [pc, #96]	@ (80074ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	2201      	movs	r2, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43da      	mvns	r2, r3
 8007468:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4013      	ands	r3, r2
 800746e:	4a10      	ldr	r2, [pc, #64]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007470:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	2201      	movs	r2, #1
 8007478:	409a      	lsls	r2, r3
 800747a:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	4a0b      	ldr	r2, [pc, #44]	@ (80074b0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4a06      	ldr	r2, [pc, #24]	@ (80074ac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007492:	441a      	add	r2, r3
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe f84c 	bl	8005538 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074a0:	bf00      	nop
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000750 	.word	0x20000750
 80074ac:	20000754 	.word	0x20000754
 80074b0:	20000858 	.word	0x20000858

080074b4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f940 	bl	8008746 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7f8 fea2 	bl	8000210 <strlen>
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	e007      	b.n	80074e0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	2220      	movs	r2, #32
 80074d8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b0e      	cmp	r3, #14
 80074e4:	d9f4      	bls.n	80074d0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b089      	sub	sp, #36	@ 0x24
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800750e:	4b45      	ldr	r3, [pc, #276]	@ (8007624 <vTaskList+0x124>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007514:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <vTaskList+0x124>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fbc1 	bl	8007ca8 <pvPortMalloc>
 8007526:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d076      	beq.n	800761c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800752e:	2200      	movs	r2, #0
 8007530:	68f9      	ldr	r1, [r7, #12]
 8007532:	68b8      	ldr	r0, [r7, #8]
 8007534:	f7ff f944 	bl	80067c0 <uxTaskGetSystemState>
 8007538:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	e066      	b.n	800760e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461a      	mov	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4413      	add	r3, r2
 8007550:	7b1b      	ldrb	r3, [r3, #12]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d81b      	bhi.n	800758e <vTaskList+0x8e>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <vTaskList+0x5c>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007571 	.word	0x08007571
 8007560:	08007577 	.word	0x08007577
 8007564:	0800757d 	.word	0x0800757d
 8007568:	08007583 	.word	0x08007583
 800756c:	08007589 	.word	0x08007589
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8007570:	2358      	movs	r3, #88	@ 0x58
 8007572:	74fb      	strb	r3, [r7, #19]
										break;
 8007574:	e00e      	b.n	8007594 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8007576:	2352      	movs	r3, #82	@ 0x52
 8007578:	74fb      	strb	r3, [r7, #19]
										break;
 800757a:	e00b      	b.n	8007594 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800757c:	2342      	movs	r3, #66	@ 0x42
 800757e:	74fb      	strb	r3, [r7, #19]
										break;
 8007580:	e008      	b.n	8007594 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8007582:	2353      	movs	r3, #83	@ 0x53
 8007584:	74fb      	strb	r3, [r7, #19]
										break;
 8007586:	e005      	b.n	8007594 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8007588:	2344      	movs	r3, #68	@ 0x44
 800758a:	74fb      	strb	r3, [r7, #19]
										break;
 800758c:	e002      	b.n	8007594 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800758e:	2300      	movs	r3, #0
 8007590:	74fb      	strb	r3, [r7, #19]
										break;
 8007592:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	461a      	mov	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4413      	add	r3, r2
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ff83 	bl	80074b4 <prvWriteNameToBuffer>
 80075ae:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80075b0:	7cf9      	ldrb	r1, [r7, #19]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	6918      	ldr	r0, [r3, #16]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4413      	add	r3, r2
 80075d4:	8c1b      	ldrh	r3, [r3, #32]
 80075d6:	461c      	mov	r4, r3
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4613      	mov	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	461a      	mov	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4413      	add	r3, r2
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	9400      	str	r4, [sp, #0]
 80075ee:	4603      	mov	r3, r0
 80075f0:	460a      	mov	r2, r1
 80075f2:	490d      	ldr	r1, [pc, #52]	@ (8007628 <vTaskList+0x128>)
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 ff31 	bl	800845c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7f8 fe08 	bl	8000210 <strlen>
 8007600:	4602      	mov	r2, r0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4413      	add	r3, r2
 8007606:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3301      	adds	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	429a      	cmp	r2, r3
 8007614:	d394      	bcc.n	8007540 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007616:	68b8      	ldr	r0, [r7, #8]
 8007618:	f000 fc14 	bl	8007e44 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd90      	pop	{r4, r7, pc}
 8007624:	20000850 	.word	0x20000850
 8007628:	080099d8 	.word	0x080099d8

0800762c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800763a:	4b3a      	ldr	r3, [pc, #232]	@ (8007724 <vTaskGetRunTimeStats+0xf8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007640:	4b38      	ldr	r3, [pc, #224]	@ (8007724 <vTaskGetRunTimeStats+0xf8>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4613      	mov	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb2b 	bl	8007ca8 <pvPortMalloc>
 8007652:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d05f      	beq.n	800771a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800765a:	f107 030c 	add.w	r3, r7, #12
 800765e:	461a      	mov	r2, r3
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	6978      	ldr	r0, [r7, #20]
 8007664:	f7ff f8ac 	bl	80067c0 <uxTaskGetSystemState>
 8007668:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a2e      	ldr	r2, [pc, #184]	@ (8007728 <vTaskGetRunTimeStats+0xfc>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d04b      	beq.n	8007714 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	e044      	b.n	800770c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	461a      	mov	r2, r3
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	fbb2 f3f3 	udiv	r3, r2, r3
 800769a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	4613      	mov	r3, r2
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	461a      	mov	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4413      	add	r3, r2
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff feff 	bl	80074b4 <prvWriteNameToBuffer>
 80076b6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00e      	beq.n	80076dc <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4413      	add	r3, r2
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4916      	ldr	r1, [pc, #88]	@ (800772c <vTaskGetRunTimeStats+0x100>)
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fec1 	bl	800845c <siprintf>
 80076da:	e00d      	b.n	80076f8 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	461a      	mov	r2, r3
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4413      	add	r3, r2
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	461a      	mov	r2, r3
 80076f0:	490f      	ldr	r1, [pc, #60]	@ (8007730 <vTaskGetRunTimeStats+0x104>)
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 feb2 	bl	800845c <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7f8 fd89 	bl	8000210 <strlen>
 80076fe:	4602      	mov	r2, r0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4413      	add	r3, r2
 8007704:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3301      	adds	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3b6      	bcc.n	8007682 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007714:	6978      	ldr	r0, [r7, #20]
 8007716:	f000 fb95 	bl	8007e44 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000850 	.word	0x20000850
 8007728:	51eb851f 	.word	0x51eb851f
 800772c:	080099e8 	.word	0x080099e8
 8007730:	080099f4 	.word	0x080099f4

08007734 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007738:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <pvTaskIncrementMutexHeldCount+0x24>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <pvTaskIncrementMutexHeldCount+0x24>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007746:	3201      	adds	r2, #1
 8007748:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800774a:	4b03      	ldr	r3, [pc, #12]	@ (8007758 <pvTaskIncrementMutexHeldCount+0x24>)
 800774c:	681b      	ldr	r3, [r3, #0]
	}
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	20000750 	.word	0x20000750

0800775c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007766:	4b29      	ldr	r3, [pc, #164]	@ (800780c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3304      	adds	r3, #4
 8007772:	4618      	mov	r0, r3
 8007774:	f7fd ff3d 	bl	80055f2 <uxListRemove>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10b      	bne.n	8007796 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800777e:	4b24      	ldr	r3, [pc, #144]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	2201      	movs	r2, #1
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43da      	mvns	r2, r3
 800778c:	4b21      	ldr	r3, [pc, #132]	@ (8007814 <prvAddCurrentTaskToDelayedList+0xb8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4013      	ands	r3, r2
 8007792:	4a20      	ldr	r2, [pc, #128]	@ (8007814 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007794:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779c:	d10a      	bne.n	80077b4 <prvAddCurrentTaskToDelayedList+0x58>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	481a      	ldr	r0, [pc, #104]	@ (8007818 <prvAddCurrentTaskToDelayedList+0xbc>)
 80077ae:	f7fd fec3 	bl	8005538 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b2:	e026      	b.n	8007802 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4413      	add	r3, r2
 80077ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077bc:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d209      	bcs.n	80077e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077cc:	4b13      	ldr	r3, [pc, #76]	@ (800781c <prvAddCurrentTaskToDelayedList+0xc0>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f7fd fed1 	bl	8005580 <vListInsert>
}
 80077de:	e010      	b.n	8007802 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007820 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fd fec7 	bl	8005580 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d202      	bcs.n	8007802 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077fc:	4a09      	ldr	r2, [pc, #36]	@ (8007824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6013      	str	r3, [r2, #0]
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000854 	.word	0x20000854
 8007810:	20000750 	.word	0x20000750
 8007814:	20000858 	.word	0x20000858
 8007818:	2000083c 	.word	0x2000083c
 800781c:	2000080c 	.word	0x2000080c
 8007820:	20000808 	.word	0x20000808
 8007824:	20000870 	.word	0x20000870

08007828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3b04      	subs	r3, #4
 8007838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3b04      	subs	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f023 0201 	bic.w	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b04      	subs	r3, #4
 8007856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007858:	4a0c      	ldr	r2, [pc, #48]	@ (800788c <pxPortInitialiseStack+0x64>)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b14      	subs	r3, #20
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3b04      	subs	r3, #4
 800786e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f06f 0202 	mvn.w	r2, #2
 8007876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3b20      	subs	r3, #32
 800787c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	08007891 	.word	0x08007891

08007890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800789a:	4b15      	ldr	r3, [pc, #84]	@ (80078f0 <prvTaskExitError+0x60>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d00d      	beq.n	80078c0 <prvTaskExitError+0x30>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a8:	b672      	cpsid	i
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	b662      	cpsie	i
 80078b8:	60fb      	str	r3, [r7, #12]
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	e7fd      	b.n	80078bc <prvTaskExitError+0x2c>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	b672      	cpsid	i
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	b662      	cpsie	i
 80078d4:	60bb      	str	r3, [r7, #8]
}
 80078d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078d8:	bf00      	nop
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0fc      	beq.n	80078da <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000014 	.word	0x20000014
	...

08007900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <pxCurrentTCBConst2>)
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	6808      	ldr	r0, [r1, #0]
 8007906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f380 8809 	msr	PSP, r0
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8811 	msr	BASEPRI, r0
 800791a:	4770      	bx	lr
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst2>:
 8007920:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007928:	4808      	ldr	r0, [pc, #32]	@ (800794c <prvPortStartFirstTask+0x24>)
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f380 8808 	msr	MSP, r0
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8814 	msr	CONTROL, r0
 800793a:	b662      	cpsie	i
 800793c:	b661      	cpsie	f
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	df00      	svc	0
 8007948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800794a:	bf00      	nop
 800794c:	e000ed08 	.word	0xe000ed08

08007950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007956:	4b37      	ldr	r3, [pc, #220]	@ (8007a34 <xPortStartScheduler+0xe4>)
 8007958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	22ff      	movs	r2, #255	@ 0xff
 8007966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a38 <xPortStartScheduler+0xe8>)
 800797c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800797e:	4b2f      	ldr	r3, [pc, #188]	@ (8007a3c <xPortStartScheduler+0xec>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007984:	e009      	b.n	800799a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007986:	4b2d      	ldr	r3, [pc, #180]	@ (8007a3c <xPortStartScheduler+0xec>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a2b      	ldr	r2, [pc, #172]	@ (8007a3c <xPortStartScheduler+0xec>)
 800798e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a2:	2b80      	cmp	r3, #128	@ 0x80
 80079a4:	d0ef      	beq.n	8007986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079a6:	4b25      	ldr	r3, [pc, #148]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00d      	beq.n	80079ce <xPortStartScheduler+0x7e>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	4a19      	ldr	r2, [pc, #100]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d8:	4b18      	ldr	r3, [pc, #96]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079e0:	4a16      	ldr	r2, [pc, #88]	@ (8007a3c <xPortStartScheduler+0xec>)
 80079e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ec:	4b14      	ldr	r3, [pc, #80]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a13      	ldr	r2, [pc, #76]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f8:	4b11      	ldr	r3, [pc, #68]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a10      	ldr	r2, [pc, #64]	@ (8007a40 <xPortStartScheduler+0xf0>)
 80079fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a04:	f000 f8dc 	bl	8007bc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a08:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <xPortStartScheduler+0xf4>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a0e:	f000 f8fb 	bl	8007c08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <xPortStartScheduler+0xf8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a0c      	ldr	r2, [pc, #48]	@ (8007a48 <xPortStartScheduler+0xf8>)
 8007a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a1e:	f7ff ff83 	bl	8007928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a22:	f7ff f819 	bl	8006a58 <vTaskSwitchContext>
	prvTaskExitError();
 8007a26:	f7ff ff33 	bl	8007890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000e400 	.word	0xe000e400
 8007a38:	20000884 	.word	0x20000884
 8007a3c:	20000888 	.word	0x20000888
 8007a40:	e000ed20 	.word	0xe000ed20
 8007a44:	20000014 	.word	0x20000014
 8007a48:	e000ef34 	.word	0xe000ef34

08007a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a56:	b672      	cpsid	i
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	b662      	cpsie	i
 8007a66:	607b      	str	r3, [r7, #4]
}
 8007a68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a6a:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	4a0f      	ldr	r2, [pc, #60]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a74:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <vPortEnterCritical+0x64>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d112      	bne.n	8007aa2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <vPortEnterCritical+0x68>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <vPortEnterCritical+0x56>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	b672      	cpsid	i
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	b662      	cpsie	i
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vPortEnterCritical+0x52>
	}
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000014 	.word	0x20000014
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007abe:	4b13      	ldr	r3, [pc, #76]	@ (8007b0c <vPortExitCritical+0x54>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10d      	bne.n	8007ae2 <vPortExitCritical+0x2a>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	b672      	cpsid	i
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	b662      	cpsie	i
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <vPortExitCritical+0x54>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <vPortExitCritical+0x54>)
 8007aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <vPortExitCritical+0x54>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <vPortExitCritical+0x48>
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	20000014 	.word	0x20000014

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b34:	b672      	cpsid	i
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	b662      	cpsie	i
 8007b44:	f7fe ff88 	bl	8006a58 <vTaskSwitchContext>
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	f380 8811 	msr	BASEPRI, r0
 8007b50:	bc09      	pop	{r0, r3}
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f01e 0f10 	tst.w	lr, #16
 8007b5e:	bf08      	it	eq
 8007b60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b64:	f380 8809 	msr	PSP, r0
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop

08007b70 <pxCurrentTCBConst>:
 8007b70:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	607b      	str	r3, [r7, #4]
}
 8007b94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b96:	f7fe fea3 	bl	80068e0 <xTaskIncrementTick>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <xPortSysTickHandler+0x44>)
 8007ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f383 8811 	msr	BASEPRI, r3
}
 8007bb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <vPortSetupTimerInterrupt+0x34>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bca:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <vPortSetupTimerInterrupt+0x38>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <vPortSetupTimerInterrupt+0x3c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c00 <vPortSetupTimerInterrupt+0x40>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	099b      	lsrs	r3, r3, #6
 8007bdc:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <vPortSetupTimerInterrupt+0x44>)
 8007bde:	3b01      	subs	r3, #1
 8007be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007be2:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <vPortSetupTimerInterrupt+0x34>)
 8007be4:	2207      	movs	r2, #7
 8007be6:	601a      	str	r2, [r3, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	e000e010 	.word	0xe000e010
 8007bf8:	e000e018 	.word	0xe000e018
 8007bfc:	20000008 	.word	0x20000008
 8007c00:	10624dd3 	.word	0x10624dd3
 8007c04:	e000e014 	.word	0xe000e014

08007c08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c18 <vPortEnableVFP+0x10>
 8007c0c:	6801      	ldr	r1, [r0, #0]
 8007c0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c12:	6001      	str	r1, [r0, #0]
 8007c14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c16:	bf00      	nop
 8007c18:	e000ed88 	.word	0xe000ed88

08007c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c22:	f3ef 8305 	mrs	r3, IPSR
 8007c26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d917      	bls.n	8007c5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c98 <vPortValidateInterruptPriority+0x7c>)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c38:	4b18      	ldr	r3, [pc, #96]	@ (8007c9c <vPortValidateInterruptPriority+0x80>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	7afa      	ldrb	r2, [r7, #11]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d20d      	bcs.n	8007c5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	b672      	cpsid	i
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	b662      	cpsie	i
 8007c56:	607b      	str	r3, [r7, #4]
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	e7fd      	b.n	8007c5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <vPortValidateInterruptPriority+0x84>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca4 <vPortValidateInterruptPriority+0x88>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90d      	bls.n	8007c8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	b672      	cpsid	i
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	b662      	cpsie	i
 8007c82:	603b      	str	r3, [r7, #0]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <vPortValidateInterruptPriority+0x6a>
	}
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	e000e3f0 	.word	0xe000e3f0
 8007c9c:	20000884 	.word	0x20000884
 8007ca0:	e000ed0c 	.word	0xe000ed0c
 8007ca4:	20000888 	.word	0x20000888

08007ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	@ 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb4:	f7fe fcd6 	bl	8006664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8007e30 <pvPortMalloc+0x188>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc0:	f000 f920 	bl	8007f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e34 <pvPortMalloc+0x18c>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8094 	bne.w	8007dfa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4413      	add	r3, r2
 8007cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00d      	beq.n	8007d1a <pvPortMalloc+0x72>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	617b      	str	r3, [r7, #20]
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	e7fd      	b.n	8007d16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d06c      	beq.n	8007dfa <pvPortMalloc+0x152>
 8007d20:	4b45      	ldr	r3, [pc, #276]	@ (8007e38 <pvPortMalloc+0x190>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d867      	bhi.n	8007dfa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d2a:	4b44      	ldr	r3, [pc, #272]	@ (8007e3c <pvPortMalloc+0x194>)
 8007d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d2e:	4b43      	ldr	r3, [pc, #268]	@ (8007e3c <pvPortMalloc+0x194>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d34:	e004      	b.n	8007d40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <pvPortMalloc+0xaa>
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f1      	bne.n	8007d36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <pvPortMalloc+0x188>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d04e      	beq.n	8007dfa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	4413      	add	r3, r2
 8007d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad2      	subs	r2, r2, r3
 8007d76:	2308      	movs	r3, #8
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d922      	bls.n	8007dc4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4413      	add	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <pvPortMalloc+0x104>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dbe:	69b8      	ldr	r0, [r7, #24]
 8007dc0:	f000 f902 	bl	8007fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	4a1a      	ldr	r2, [pc, #104]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <pvPortMalloc+0x190>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <pvPortMalloc+0x198>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d203      	bcs.n	8007de6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dde:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <pvPortMalloc+0x190>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a17      	ldr	r2, [pc, #92]	@ (8007e40 <pvPortMalloc+0x198>)
 8007de4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <pvPortMalloc+0x18c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dfa:	f7fe fc41 	bl	8006680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00d      	beq.n	8007e24 <pvPortMalloc+0x17c>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <pvPortMalloc+0x178>
	return pvReturn;
 8007e24:	69fb      	ldr	r3, [r7, #28]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	@ 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20008094 	.word	0x20008094
 8007e34:	200080a0 	.word	0x200080a0
 8007e38:	20008098 	.word	0x20008098
 8007e3c:	2000808c 	.word	0x2000808c
 8007e40:	2000809c 	.word	0x2000809c

08007e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d04e      	beq.n	8007ef4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e56:	2308      	movs	r3, #8
 8007e58:	425b      	negs	r3, r3
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	4b24      	ldr	r3, [pc, #144]	@ (8007efc <vPortFree+0xb8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <vPortFree+0x4a>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	b672      	cpsid	i
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	b662      	cpsie	i
 8007e86:	60fb      	str	r3, [r7, #12]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <vPortFree+0x6e>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	b672      	cpsid	i
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	b662      	cpsie	i
 8007eaa:	60bb      	str	r3, [r7, #8]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b11      	ldr	r3, [pc, #68]	@ (8007efc <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d019      	beq.n	8007ef4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d115      	bne.n	8007ef4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fbc4 	bl	8006664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a06      	ldr	r2, [pc, #24]	@ (8007f00 <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f86c 	bl	8007fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ef0:	f7fe fbc6 	bl	8006680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	200080a0 	.word	0x200080a0
 8007f00:	20008098 	.word	0x20008098

08007f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f0a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8007f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f10:	4b27      	ldr	r3, [pc, #156]	@ (8007fb0 <prvHeapInit+0xac>)
 8007f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3307      	adds	r3, #7
 8007f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb0 <prvHeapInit+0xac>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb4 <prvHeapInit+0xb0>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb4 <prvHeapInit+0xb0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f50:	2208      	movs	r2, #8
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0307 	bic.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f84:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <prvHeapInit+0xb4>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	@ (8007fbc <prvHeapInit+0xb8>)
 8007f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a09      	ldr	r2, [pc, #36]	@ (8007fc0 <prvHeapInit+0xbc>)
 8007f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f9c:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <prvHeapInit+0xc0>)
 8007f9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	2000088c 	.word	0x2000088c
 8007fb4:	2000808c 	.word	0x2000808c
 8007fb8:	20008094 	.word	0x20008094
 8007fbc:	2000809c 	.word	0x2000809c
 8007fc0:	20008098 	.word	0x20008098
 8007fc4:	200080a0 	.word	0x200080a0

08007fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fd0:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <prvInsertBlockIntoFreeList+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <prvInsertBlockIntoFreeList+0x14>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8f7      	bhi.n	8007fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d108      	bne.n	800800a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d118      	bne.n	8008050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d00d      	beq.n	8008046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008046:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <prvInsertBlockIntoFreeList+0xb0>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e003      	b.n	8008058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d002      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000808c 	.word	0x2000808c
 8008078:	20008094 	.word	0x20008094

0800807c <atoi>:
 800807c:	220a      	movs	r2, #10
 800807e:	2100      	movs	r1, #0
 8008080:	f000 b87a 	b.w	8008178 <strtol>

08008084 <_strtol_l.isra.0>:
 8008084:	2b24      	cmp	r3, #36	@ 0x24
 8008086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800808a:	4686      	mov	lr, r0
 800808c:	4690      	mov	r8, r2
 800808e:	d801      	bhi.n	8008094 <_strtol_l.isra.0+0x10>
 8008090:	2b01      	cmp	r3, #1
 8008092:	d106      	bne.n	80080a2 <_strtol_l.isra.0+0x1e>
 8008094:	f000 fb2a 	bl	80086ec <__errno>
 8008098:	2316      	movs	r3, #22
 800809a:	6003      	str	r3, [r0, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	4834      	ldr	r0, [pc, #208]	@ (8008174 <_strtol_l.isra.0+0xf0>)
 80080a4:	460d      	mov	r5, r1
 80080a6:	462a      	mov	r2, r5
 80080a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ac:	5d06      	ldrb	r6, [r0, r4]
 80080ae:	f016 0608 	ands.w	r6, r6, #8
 80080b2:	d1f8      	bne.n	80080a6 <_strtol_l.isra.0+0x22>
 80080b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80080b6:	d110      	bne.n	80080da <_strtol_l.isra.0+0x56>
 80080b8:	782c      	ldrb	r4, [r5, #0]
 80080ba:	2601      	movs	r6, #1
 80080bc:	1c95      	adds	r5, r2, #2
 80080be:	f033 0210 	bics.w	r2, r3, #16
 80080c2:	d115      	bne.n	80080f0 <_strtol_l.isra.0+0x6c>
 80080c4:	2c30      	cmp	r4, #48	@ 0x30
 80080c6:	d10d      	bne.n	80080e4 <_strtol_l.isra.0+0x60>
 80080c8:	782a      	ldrb	r2, [r5, #0]
 80080ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080ce:	2a58      	cmp	r2, #88	@ 0x58
 80080d0:	d108      	bne.n	80080e4 <_strtol_l.isra.0+0x60>
 80080d2:	786c      	ldrb	r4, [r5, #1]
 80080d4:	3502      	adds	r5, #2
 80080d6:	2310      	movs	r3, #16
 80080d8:	e00a      	b.n	80080f0 <_strtol_l.isra.0+0x6c>
 80080da:	2c2b      	cmp	r4, #43	@ 0x2b
 80080dc:	bf04      	itt	eq
 80080de:	782c      	ldrbeq	r4, [r5, #0]
 80080e0:	1c95      	addeq	r5, r2, #2
 80080e2:	e7ec      	b.n	80080be <_strtol_l.isra.0+0x3a>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f6      	bne.n	80080d6 <_strtol_l.isra.0+0x52>
 80080e8:	2c30      	cmp	r4, #48	@ 0x30
 80080ea:	bf14      	ite	ne
 80080ec:	230a      	movne	r3, #10
 80080ee:	2308      	moveq	r3, #8
 80080f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80080f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080f8:	2200      	movs	r2, #0
 80080fa:	fbbc f9f3 	udiv	r9, ip, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	fb03 ca19 	mls	sl, r3, r9, ip
 8008104:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008108:	2f09      	cmp	r7, #9
 800810a:	d80f      	bhi.n	800812c <_strtol_l.isra.0+0xa8>
 800810c:	463c      	mov	r4, r7
 800810e:	42a3      	cmp	r3, r4
 8008110:	dd1b      	ble.n	800814a <_strtol_l.isra.0+0xc6>
 8008112:	1c57      	adds	r7, r2, #1
 8008114:	d007      	beq.n	8008126 <_strtol_l.isra.0+0xa2>
 8008116:	4581      	cmp	r9, r0
 8008118:	d314      	bcc.n	8008144 <_strtol_l.isra.0+0xc0>
 800811a:	d101      	bne.n	8008120 <_strtol_l.isra.0+0x9c>
 800811c:	45a2      	cmp	sl, r4
 800811e:	db11      	blt.n	8008144 <_strtol_l.isra.0+0xc0>
 8008120:	fb00 4003 	mla	r0, r0, r3, r4
 8008124:	2201      	movs	r2, #1
 8008126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800812a:	e7eb      	b.n	8008104 <_strtol_l.isra.0+0x80>
 800812c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008130:	2f19      	cmp	r7, #25
 8008132:	d801      	bhi.n	8008138 <_strtol_l.isra.0+0xb4>
 8008134:	3c37      	subs	r4, #55	@ 0x37
 8008136:	e7ea      	b.n	800810e <_strtol_l.isra.0+0x8a>
 8008138:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800813c:	2f19      	cmp	r7, #25
 800813e:	d804      	bhi.n	800814a <_strtol_l.isra.0+0xc6>
 8008140:	3c57      	subs	r4, #87	@ 0x57
 8008142:	e7e4      	b.n	800810e <_strtol_l.isra.0+0x8a>
 8008144:	f04f 32ff 	mov.w	r2, #4294967295
 8008148:	e7ed      	b.n	8008126 <_strtol_l.isra.0+0xa2>
 800814a:	1c53      	adds	r3, r2, #1
 800814c:	d108      	bne.n	8008160 <_strtol_l.isra.0+0xdc>
 800814e:	2322      	movs	r3, #34	@ 0x22
 8008150:	f8ce 3000 	str.w	r3, [lr]
 8008154:	4660      	mov	r0, ip
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	d0a0      	beq.n	800809e <_strtol_l.isra.0+0x1a>
 800815c:	1e69      	subs	r1, r5, #1
 800815e:	e006      	b.n	800816e <_strtol_l.isra.0+0xea>
 8008160:	b106      	cbz	r6, 8008164 <_strtol_l.isra.0+0xe0>
 8008162:	4240      	negs	r0, r0
 8008164:	f1b8 0f00 	cmp.w	r8, #0
 8008168:	d099      	beq.n	800809e <_strtol_l.isra.0+0x1a>
 800816a:	2a00      	cmp	r2, #0
 800816c:	d1f6      	bne.n	800815c <_strtol_l.isra.0+0xd8>
 800816e:	f8c8 1000 	str.w	r1, [r8]
 8008172:	e794      	b.n	800809e <_strtol_l.isra.0+0x1a>
 8008174:	08009a19 	.word	0x08009a19

08008178 <strtol>:
 8008178:	4613      	mov	r3, r2
 800817a:	460a      	mov	r2, r1
 800817c:	4601      	mov	r1, r0
 800817e:	4802      	ldr	r0, [pc, #8]	@ (8008188 <strtol+0x10>)
 8008180:	6800      	ldr	r0, [r0, #0]
 8008182:	f7ff bf7f 	b.w	8008084 <_strtol_l.isra.0>
 8008186:	bf00      	nop
 8008188:	20000024 	.word	0x20000024

0800818c <std>:
 800818c:	2300      	movs	r3, #0
 800818e:	b510      	push	{r4, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	e9c0 3300 	strd	r3, r3, [r0]
 8008196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800819a:	6083      	str	r3, [r0, #8]
 800819c:	8181      	strh	r1, [r0, #12]
 800819e:	6643      	str	r3, [r0, #100]	@ 0x64
 80081a0:	81c2      	strh	r2, [r0, #14]
 80081a2:	6183      	str	r3, [r0, #24]
 80081a4:	4619      	mov	r1, r3
 80081a6:	2208      	movs	r2, #8
 80081a8:	305c      	adds	r0, #92	@ 0x5c
 80081aa:	f000 fa51 	bl	8008650 <memset>
 80081ae:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <std+0x58>)
 80081b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <std+0x5c>)
 80081b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <std+0x60>)
 80081b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081ba:	4b0d      	ldr	r3, [pc, #52]	@ (80081f0 <std+0x64>)
 80081bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <std+0x68>)
 80081c0:	6224      	str	r4, [r4, #32]
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d006      	beq.n	80081d4 <std+0x48>
 80081c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081ca:	4294      	cmp	r4, r2
 80081cc:	d002      	beq.n	80081d4 <std+0x48>
 80081ce:	33d0      	adds	r3, #208	@ 0xd0
 80081d0:	429c      	cmp	r4, r3
 80081d2:	d105      	bne.n	80081e0 <std+0x54>
 80081d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081dc:	f000 bab0 	b.w	8008740 <__retarget_lock_init_recursive>
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	bf00      	nop
 80081e4:	080084a1 	.word	0x080084a1
 80081e8:	080084c3 	.word	0x080084c3
 80081ec:	080084fb 	.word	0x080084fb
 80081f0:	0800851f 	.word	0x0800851f
 80081f4:	200080a4 	.word	0x200080a4

080081f8 <stdio_exit_handler>:
 80081f8:	4a02      	ldr	r2, [pc, #8]	@ (8008204 <stdio_exit_handler+0xc>)
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <stdio_exit_handler+0x10>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <stdio_exit_handler+0x14>)
 80081fe:	f000 b869 	b.w	80082d4 <_fwalk_sglue>
 8008202:	bf00      	nop
 8008204:	20000018 	.word	0x20000018
 8008208:	080092b9 	.word	0x080092b9
 800820c:	20000028 	.word	0x20000028

08008210 <cleanup_stdio>:
 8008210:	6841      	ldr	r1, [r0, #4]
 8008212:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <cleanup_stdio+0x34>)
 8008214:	4299      	cmp	r1, r3
 8008216:	b510      	push	{r4, lr}
 8008218:	4604      	mov	r4, r0
 800821a:	d001      	beq.n	8008220 <cleanup_stdio+0x10>
 800821c:	f001 f84c 	bl	80092b8 <_fflush_r>
 8008220:	68a1      	ldr	r1, [r4, #8]
 8008222:	4b09      	ldr	r3, [pc, #36]	@ (8008248 <cleanup_stdio+0x38>)
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <cleanup_stdio+0x1e>
 8008228:	4620      	mov	r0, r4
 800822a:	f001 f845 	bl	80092b8 <_fflush_r>
 800822e:	68e1      	ldr	r1, [r4, #12]
 8008230:	4b06      	ldr	r3, [pc, #24]	@ (800824c <cleanup_stdio+0x3c>)
 8008232:	4299      	cmp	r1, r3
 8008234:	d004      	beq.n	8008240 <cleanup_stdio+0x30>
 8008236:	4620      	mov	r0, r4
 8008238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823c:	f001 b83c 	b.w	80092b8 <_fflush_r>
 8008240:	bd10      	pop	{r4, pc}
 8008242:	bf00      	nop
 8008244:	200080a4 	.word	0x200080a4
 8008248:	2000810c 	.word	0x2000810c
 800824c:	20008174 	.word	0x20008174

08008250 <global_stdio_init.part.0>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <global_stdio_init.part.0+0x30>)
 8008254:	4c0b      	ldr	r4, [pc, #44]	@ (8008284 <global_stdio_init.part.0+0x34>)
 8008256:	4a0c      	ldr	r2, [pc, #48]	@ (8008288 <global_stdio_init.part.0+0x38>)
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	4620      	mov	r0, r4
 800825c:	2200      	movs	r2, #0
 800825e:	2104      	movs	r1, #4
 8008260:	f7ff ff94 	bl	800818c <std>
 8008264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008268:	2201      	movs	r2, #1
 800826a:	2109      	movs	r1, #9
 800826c:	f7ff ff8e 	bl	800818c <std>
 8008270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008274:	2202      	movs	r2, #2
 8008276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800827a:	2112      	movs	r1, #18
 800827c:	f7ff bf86 	b.w	800818c <std>
 8008280:	200081dc 	.word	0x200081dc
 8008284:	200080a4 	.word	0x200080a4
 8008288:	080081f9 	.word	0x080081f9

0800828c <__sfp_lock_acquire>:
 800828c:	4801      	ldr	r0, [pc, #4]	@ (8008294 <__sfp_lock_acquire+0x8>)
 800828e:	f000 ba58 	b.w	8008742 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	200081e5 	.word	0x200081e5

08008298 <__sfp_lock_release>:
 8008298:	4801      	ldr	r0, [pc, #4]	@ (80082a0 <__sfp_lock_release+0x8>)
 800829a:	f000 ba53 	b.w	8008744 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	200081e5 	.word	0x200081e5

080082a4 <__sinit>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4604      	mov	r4, r0
 80082a8:	f7ff fff0 	bl	800828c <__sfp_lock_acquire>
 80082ac:	6a23      	ldr	r3, [r4, #32]
 80082ae:	b11b      	cbz	r3, 80082b8 <__sinit+0x14>
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b4:	f7ff bff0 	b.w	8008298 <__sfp_lock_release>
 80082b8:	4b04      	ldr	r3, [pc, #16]	@ (80082cc <__sinit+0x28>)
 80082ba:	6223      	str	r3, [r4, #32]
 80082bc:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <__sinit+0x2c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f5      	bne.n	80082b0 <__sinit+0xc>
 80082c4:	f7ff ffc4 	bl	8008250 <global_stdio_init.part.0>
 80082c8:	e7f2      	b.n	80082b0 <__sinit+0xc>
 80082ca:	bf00      	nop
 80082cc:	08008211 	.word	0x08008211
 80082d0:	200081dc 	.word	0x200081dc

080082d4 <_fwalk_sglue>:
 80082d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	4607      	mov	r7, r0
 80082da:	4688      	mov	r8, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	2600      	movs	r6, #0
 80082e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082e4:	f1b9 0901 	subs.w	r9, r9, #1
 80082e8:	d505      	bpl.n	80082f6 <_fwalk_sglue+0x22>
 80082ea:	6824      	ldr	r4, [r4, #0]
 80082ec:	2c00      	cmp	r4, #0
 80082ee:	d1f7      	bne.n	80082e0 <_fwalk_sglue+0xc>
 80082f0:	4630      	mov	r0, r6
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	89ab      	ldrh	r3, [r5, #12]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d907      	bls.n	800830c <_fwalk_sglue+0x38>
 80082fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008300:	3301      	adds	r3, #1
 8008302:	d003      	beq.n	800830c <_fwalk_sglue+0x38>
 8008304:	4629      	mov	r1, r5
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	4306      	orrs	r6, r0
 800830c:	3568      	adds	r5, #104	@ 0x68
 800830e:	e7e9      	b.n	80082e4 <_fwalk_sglue+0x10>

08008310 <iprintf>:
 8008310:	b40f      	push	{r0, r1, r2, r3}
 8008312:	b507      	push	{r0, r1, r2, lr}
 8008314:	4906      	ldr	r1, [pc, #24]	@ (8008330 <iprintf+0x20>)
 8008316:	ab04      	add	r3, sp, #16
 8008318:	6808      	ldr	r0, [r1, #0]
 800831a:	f853 2b04 	ldr.w	r2, [r3], #4
 800831e:	6881      	ldr	r1, [r0, #8]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	f000 fca1 	bl	8008c68 <_vfiprintf_r>
 8008326:	b003      	add	sp, #12
 8008328:	f85d eb04 	ldr.w	lr, [sp], #4
 800832c:	b004      	add	sp, #16
 800832e:	4770      	bx	lr
 8008330:	20000024 	.word	0x20000024

08008334 <_puts_r>:
 8008334:	6a03      	ldr	r3, [r0, #32]
 8008336:	b570      	push	{r4, r5, r6, lr}
 8008338:	6884      	ldr	r4, [r0, #8]
 800833a:	4605      	mov	r5, r0
 800833c:	460e      	mov	r6, r1
 800833e:	b90b      	cbnz	r3, 8008344 <_puts_r+0x10>
 8008340:	f7ff ffb0 	bl	80082a4 <__sinit>
 8008344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008346:	07db      	lsls	r3, r3, #31
 8008348:	d405      	bmi.n	8008356 <_puts_r+0x22>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	0598      	lsls	r0, r3, #22
 800834e:	d402      	bmi.n	8008356 <_puts_r+0x22>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f000 f9f6 	bl	8008742 <__retarget_lock_acquire_recursive>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	0719      	lsls	r1, r3, #28
 800835a:	d502      	bpl.n	8008362 <_puts_r+0x2e>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d135      	bne.n	80083ce <_puts_r+0x9a>
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f000 f91d 	bl	80085a4 <__swsetup_r>
 800836a:	b380      	cbz	r0, 80083ce <_puts_r+0x9a>
 800836c:	f04f 35ff 	mov.w	r5, #4294967295
 8008370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008372:	07da      	lsls	r2, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x4e>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	059b      	lsls	r3, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x4e>
 800837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837e:	f000 f9e1 	bl	8008744 <__retarget_lock_release_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	2b00      	cmp	r3, #0
 8008388:	da04      	bge.n	8008394 <_puts_r+0x60>
 800838a:	69a2      	ldr	r2, [r4, #24]
 800838c:	429a      	cmp	r2, r3
 800838e:	dc17      	bgt.n	80083c0 <_puts_r+0x8c>
 8008390:	290a      	cmp	r1, #10
 8008392:	d015      	beq.n	80083c0 <_puts_r+0x8c>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	7019      	strb	r1, [r3, #0]
 800839c:	68a3      	ldr	r3, [r4, #8]
 800839e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083a2:	3b01      	subs	r3, #1
 80083a4:	60a3      	str	r3, [r4, #8]
 80083a6:	2900      	cmp	r1, #0
 80083a8:	d1ed      	bne.n	8008386 <_puts_r+0x52>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da11      	bge.n	80083d2 <_puts_r+0x9e>
 80083ae:	4622      	mov	r2, r4
 80083b0:	210a      	movs	r1, #10
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f8b7 	bl	8008526 <__swbuf_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d0d7      	beq.n	800836c <_puts_r+0x38>
 80083bc:	250a      	movs	r5, #10
 80083be:	e7d7      	b.n	8008370 <_puts_r+0x3c>
 80083c0:	4622      	mov	r2, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f8af 	bl	8008526 <__swbuf_r>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d1e7      	bne.n	800839c <_puts_r+0x68>
 80083cc:	e7ce      	b.n	800836c <_puts_r+0x38>
 80083ce:	3e01      	subs	r6, #1
 80083d0:	e7e4      	b.n	800839c <_puts_r+0x68>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	220a      	movs	r2, #10
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e7ee      	b.n	80083bc <_puts_r+0x88>
	...

080083e0 <puts>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	@ (80083ec <puts+0xc>)
 80083e2:	4601      	mov	r1, r0
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f7ff bfa5 	b.w	8008334 <_puts_r>
 80083ea:	bf00      	nop
 80083ec:	20000024 	.word	0x20000024

080083f0 <sniprintf>:
 80083f0:	b40c      	push	{r2, r3}
 80083f2:	b530      	push	{r4, r5, lr}
 80083f4:	4b18      	ldr	r3, [pc, #96]	@ (8008458 <sniprintf+0x68>)
 80083f6:	1e0c      	subs	r4, r1, #0
 80083f8:	681d      	ldr	r5, [r3, #0]
 80083fa:	b09d      	sub	sp, #116	@ 0x74
 80083fc:	da08      	bge.n	8008410 <sniprintf+0x20>
 80083fe:	238b      	movs	r3, #139	@ 0x8b
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	b01d      	add	sp, #116	@ 0x74
 8008408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800840c:	b002      	add	sp, #8
 800840e:	4770      	bx	lr
 8008410:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800841e:	bf14      	ite	ne
 8008420:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008424:	4623      	moveq	r3, r4
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800842e:	9002      	str	r0, [sp, #8]
 8008430:	9006      	str	r0, [sp, #24]
 8008432:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008436:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008438:	ab21      	add	r3, sp, #132	@ 0x84
 800843a:	a902      	add	r1, sp, #8
 800843c:	4628      	mov	r0, r5
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	f000 faec 	bl	8008a1c <_svfiprintf_r>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	bfbc      	itt	lt
 8008448:	238b      	movlt	r3, #139	@ 0x8b
 800844a:	602b      	strlt	r3, [r5, #0]
 800844c:	2c00      	cmp	r4, #0
 800844e:	d0da      	beq.n	8008406 <sniprintf+0x16>
 8008450:	9b02      	ldr	r3, [sp, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e7d6      	b.n	8008406 <sniprintf+0x16>
 8008458:	20000024 	.word	0x20000024

0800845c <siprintf>:
 800845c:	b40e      	push	{r1, r2, r3}
 800845e:	b510      	push	{r4, lr}
 8008460:	b09d      	sub	sp, #116	@ 0x74
 8008462:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008464:	9002      	str	r0, [sp, #8]
 8008466:	9006      	str	r0, [sp, #24]
 8008468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800846c:	480a      	ldr	r0, [pc, #40]	@ (8008498 <siprintf+0x3c>)
 800846e:	9107      	str	r1, [sp, #28]
 8008470:	9104      	str	r1, [sp, #16]
 8008472:	490a      	ldr	r1, [pc, #40]	@ (800849c <siprintf+0x40>)
 8008474:	f853 2b04 	ldr.w	r2, [r3], #4
 8008478:	9105      	str	r1, [sp, #20]
 800847a:	2400      	movs	r4, #0
 800847c:	a902      	add	r1, sp, #8
 800847e:	6800      	ldr	r0, [r0, #0]
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008484:	f000 faca 	bl	8008a1c <_svfiprintf_r>
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	701c      	strb	r4, [r3, #0]
 800848c:	b01d      	add	sp, #116	@ 0x74
 800848e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008492:	b003      	add	sp, #12
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000024 	.word	0x20000024
 800849c:	ffff0208 	.word	0xffff0208

080084a0 <__sread>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a8:	f000 f8fc 	bl	80086a4 <_read_r>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	bfab      	itete	ge
 80084b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084b2:	89a3      	ldrhlt	r3, [r4, #12]
 80084b4:	181b      	addge	r3, r3, r0
 80084b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084ba:	bfac      	ite	ge
 80084bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084be:	81a3      	strhlt	r3, [r4, #12]
 80084c0:	bd10      	pop	{r4, pc}

080084c2 <__swrite>:
 80084c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c6:	461f      	mov	r7, r3
 80084c8:	898b      	ldrh	r3, [r1, #12]
 80084ca:	05db      	lsls	r3, r3, #23
 80084cc:	4605      	mov	r5, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	4616      	mov	r6, r2
 80084d2:	d505      	bpl.n	80084e0 <__swrite+0x1e>
 80084d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d8:	2302      	movs	r3, #2
 80084da:	2200      	movs	r2, #0
 80084dc:	f000 f8d0 	bl	8008680 <_lseek_r>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f6:	f000 b8e7 	b.w	80086c8 <_write_r>

080084fa <__sseek>:
 80084fa:	b510      	push	{r4, lr}
 80084fc:	460c      	mov	r4, r1
 80084fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008502:	f000 f8bd 	bl	8008680 <_lseek_r>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	bf15      	itete	ne
 800850c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800850e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008516:	81a3      	strheq	r3, [r4, #12]
 8008518:	bf18      	it	ne
 800851a:	81a3      	strhne	r3, [r4, #12]
 800851c:	bd10      	pop	{r4, pc}

0800851e <__sclose>:
 800851e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008522:	f000 b89d 	b.w	8008660 <_close_r>

08008526 <__swbuf_r>:
 8008526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008528:	460e      	mov	r6, r1
 800852a:	4614      	mov	r4, r2
 800852c:	4605      	mov	r5, r0
 800852e:	b118      	cbz	r0, 8008538 <__swbuf_r+0x12>
 8008530:	6a03      	ldr	r3, [r0, #32]
 8008532:	b90b      	cbnz	r3, 8008538 <__swbuf_r+0x12>
 8008534:	f7ff feb6 	bl	80082a4 <__sinit>
 8008538:	69a3      	ldr	r3, [r4, #24]
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	071a      	lsls	r2, r3, #28
 8008540:	d501      	bpl.n	8008546 <__swbuf_r+0x20>
 8008542:	6923      	ldr	r3, [r4, #16]
 8008544:	b943      	cbnz	r3, 8008558 <__swbuf_r+0x32>
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 f82b 	bl	80085a4 <__swsetup_r>
 800854e:	b118      	cbz	r0, 8008558 <__swbuf_r+0x32>
 8008550:	f04f 37ff 	mov.w	r7, #4294967295
 8008554:	4638      	mov	r0, r7
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	1a98      	subs	r0, r3, r2
 800855e:	6963      	ldr	r3, [r4, #20]
 8008560:	b2f6      	uxtb	r6, r6
 8008562:	4283      	cmp	r3, r0
 8008564:	4637      	mov	r7, r6
 8008566:	dc05      	bgt.n	8008574 <__swbuf_r+0x4e>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 fea4 	bl	80092b8 <_fflush_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1ed      	bne.n	8008550 <__swbuf_r+0x2a>
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	3b01      	subs	r3, #1
 8008578:	60a3      	str	r3, [r4, #8]
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	6022      	str	r2, [r4, #0]
 8008580:	701e      	strb	r6, [r3, #0]
 8008582:	6962      	ldr	r2, [r4, #20]
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	429a      	cmp	r2, r3
 8008588:	d004      	beq.n	8008594 <__swbuf_r+0x6e>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	07db      	lsls	r3, r3, #31
 800858e:	d5e1      	bpl.n	8008554 <__swbuf_r+0x2e>
 8008590:	2e0a      	cmp	r6, #10
 8008592:	d1df      	bne.n	8008554 <__swbuf_r+0x2e>
 8008594:	4621      	mov	r1, r4
 8008596:	4628      	mov	r0, r5
 8008598:	f000 fe8e 	bl	80092b8 <_fflush_r>
 800859c:	2800      	cmp	r0, #0
 800859e:	d0d9      	beq.n	8008554 <__swbuf_r+0x2e>
 80085a0:	e7d6      	b.n	8008550 <__swbuf_r+0x2a>
	...

080085a4 <__swsetup_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4b29      	ldr	r3, [pc, #164]	@ (800864c <__swsetup_r+0xa8>)
 80085a8:	4605      	mov	r5, r0
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	460c      	mov	r4, r1
 80085ae:	b118      	cbz	r0, 80085b8 <__swsetup_r+0x14>
 80085b0:	6a03      	ldr	r3, [r0, #32]
 80085b2:	b90b      	cbnz	r3, 80085b8 <__swsetup_r+0x14>
 80085b4:	f7ff fe76 	bl	80082a4 <__sinit>
 80085b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085bc:	0719      	lsls	r1, r3, #28
 80085be:	d422      	bmi.n	8008606 <__swsetup_r+0x62>
 80085c0:	06da      	lsls	r2, r3, #27
 80085c2:	d407      	bmi.n	80085d4 <__swsetup_r+0x30>
 80085c4:	2209      	movs	r2, #9
 80085c6:	602a      	str	r2, [r5, #0]
 80085c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	e033      	b.n	800863c <__swsetup_r+0x98>
 80085d4:	0758      	lsls	r0, r3, #29
 80085d6:	d512      	bpl.n	80085fe <__swsetup_r+0x5a>
 80085d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085da:	b141      	cbz	r1, 80085ee <__swsetup_r+0x4a>
 80085dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085e0:	4299      	cmp	r1, r3
 80085e2:	d002      	beq.n	80085ea <__swsetup_r+0x46>
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 f8c5 	bl	8008774 <_free_r>
 80085ea:	2300      	movs	r3, #0
 80085ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	2300      	movs	r3, #0
 80085f8:	6063      	str	r3, [r4, #4]
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	f043 0308 	orr.w	r3, r3, #8
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	6923      	ldr	r3, [r4, #16]
 8008608:	b94b      	cbnz	r3, 800861e <__swsetup_r+0x7a>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008614:	d003      	beq.n	800861e <__swsetup_r+0x7a>
 8008616:	4621      	mov	r1, r4
 8008618:	4628      	mov	r0, r5
 800861a:	f000 fe9b 	bl	8009354 <__smakebuf_r>
 800861e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008622:	f013 0201 	ands.w	r2, r3, #1
 8008626:	d00a      	beq.n	800863e <__swsetup_r+0x9a>
 8008628:	2200      	movs	r2, #0
 800862a:	60a2      	str	r2, [r4, #8]
 800862c:	6962      	ldr	r2, [r4, #20]
 800862e:	4252      	negs	r2, r2
 8008630:	61a2      	str	r2, [r4, #24]
 8008632:	6922      	ldr	r2, [r4, #16]
 8008634:	b942      	cbnz	r2, 8008648 <__swsetup_r+0xa4>
 8008636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800863a:	d1c5      	bne.n	80085c8 <__swsetup_r+0x24>
 800863c:	bd38      	pop	{r3, r4, r5, pc}
 800863e:	0799      	lsls	r1, r3, #30
 8008640:	bf58      	it	pl
 8008642:	6962      	ldrpl	r2, [r4, #20]
 8008644:	60a2      	str	r2, [r4, #8]
 8008646:	e7f4      	b.n	8008632 <__swsetup_r+0x8e>
 8008648:	2000      	movs	r0, #0
 800864a:	e7f7      	b.n	800863c <__swsetup_r+0x98>
 800864c:	20000024 	.word	0x20000024

08008650 <memset>:
 8008650:	4402      	add	r2, r0
 8008652:	4603      	mov	r3, r0
 8008654:	4293      	cmp	r3, r2
 8008656:	d100      	bne.n	800865a <memset+0xa>
 8008658:	4770      	bx	lr
 800865a:	f803 1b01 	strb.w	r1, [r3], #1
 800865e:	e7f9      	b.n	8008654 <memset+0x4>

08008660 <_close_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d06      	ldr	r5, [pc, #24]	@ (800867c <_close_r+0x1c>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 f9fb 	bl	8001a66 <_close>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_close_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_close_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	200081e0 	.word	0x200081e0

08008680 <_lseek_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	@ (80086a0 <_lseek_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7f9 fa10 	bl	8001ab4 <_lseek>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_lseek_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_lseek_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	200081e0 	.word	0x200081e0

080086a4 <_read_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d07      	ldr	r5, [pc, #28]	@ (80086c4 <_read_r+0x20>)
 80086a8:	4604      	mov	r4, r0
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	602a      	str	r2, [r5, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	f7f9 f99e 	bl	80019f4 <_read>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_read_r+0x1e>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_read_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200081e0 	.word	0x200081e0

080086c8 <_write_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	@ (80086e8 <_write_r+0x20>)
 80086cc:	4604      	mov	r4, r0
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	602a      	str	r2, [r5, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7f9 f9a9 	bl	8001a2e <_write>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_write_r+0x1e>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_write_r+0x1e>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	200081e0 	.word	0x200081e0

080086ec <__errno>:
 80086ec:	4b01      	ldr	r3, [pc, #4]	@ (80086f4 <__errno+0x8>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000024 	.word	0x20000024

080086f8 <__libc_init_array>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008730 <__libc_init_array+0x38>)
 80086fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008734 <__libc_init_array+0x3c>)
 80086fe:	1b64      	subs	r4, r4, r5
 8008700:	10a4      	asrs	r4, r4, #2
 8008702:	2600      	movs	r6, #0
 8008704:	42a6      	cmp	r6, r4
 8008706:	d109      	bne.n	800871c <__libc_init_array+0x24>
 8008708:	4d0b      	ldr	r5, [pc, #44]	@ (8008738 <__libc_init_array+0x40>)
 800870a:	4c0c      	ldr	r4, [pc, #48]	@ (800873c <__libc_init_array+0x44>)
 800870c:	f000 fee0 	bl	80094d0 <_init>
 8008710:	1b64      	subs	r4, r4, r5
 8008712:	10a4      	asrs	r4, r4, #2
 8008714:	2600      	movs	r6, #0
 8008716:	42a6      	cmp	r6, r4
 8008718:	d105      	bne.n	8008726 <__libc_init_array+0x2e>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008720:	4798      	blx	r3
 8008722:	3601      	adds	r6, #1
 8008724:	e7ee      	b.n	8008704 <__libc_init_array+0xc>
 8008726:	f855 3b04 	ldr.w	r3, [r5], #4
 800872a:	4798      	blx	r3
 800872c:	3601      	adds	r6, #1
 800872e:	e7f2      	b.n	8008716 <__libc_init_array+0x1e>
 8008730:	08009b54 	.word	0x08009b54
 8008734:	08009b54 	.word	0x08009b54
 8008738:	08009b54 	.word	0x08009b54
 800873c:	08009b58 	.word	0x08009b58

08008740 <__retarget_lock_init_recursive>:
 8008740:	4770      	bx	lr

08008742 <__retarget_lock_acquire_recursive>:
 8008742:	4770      	bx	lr

08008744 <__retarget_lock_release_recursive>:
 8008744:	4770      	bx	lr

08008746 <strcpy>:
 8008746:	4603      	mov	r3, r0
 8008748:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874c:	f803 2b01 	strb.w	r2, [r3], #1
 8008750:	2a00      	cmp	r2, #0
 8008752:	d1f9      	bne.n	8008748 <strcpy+0x2>
 8008754:	4770      	bx	lr

08008756 <memcpy>:
 8008756:	440a      	add	r2, r1
 8008758:	4291      	cmp	r1, r2
 800875a:	f100 33ff 	add.w	r3, r0, #4294967295
 800875e:	d100      	bne.n	8008762 <memcpy+0xc>
 8008760:	4770      	bx	lr
 8008762:	b510      	push	{r4, lr}
 8008764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800876c:	4291      	cmp	r1, r2
 800876e:	d1f9      	bne.n	8008764 <memcpy+0xe>
 8008770:	bd10      	pop	{r4, pc}
	...

08008774 <_free_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4605      	mov	r5, r0
 8008778:	2900      	cmp	r1, #0
 800877a:	d041      	beq.n	8008800 <_free_r+0x8c>
 800877c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008780:	1f0c      	subs	r4, r1, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfb8      	it	lt
 8008786:	18e4      	addlt	r4, r4, r3
 8008788:	f000 f8e0 	bl	800894c <__malloc_lock>
 800878c:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <_free_r+0x90>)
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	b933      	cbnz	r3, 80087a0 <_free_r+0x2c>
 8008792:	6063      	str	r3, [r4, #4]
 8008794:	6014      	str	r4, [r2, #0]
 8008796:	4628      	mov	r0, r5
 8008798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800879c:	f000 b8dc 	b.w	8008958 <__malloc_unlock>
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d908      	bls.n	80087b6 <_free_r+0x42>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	e7ed      	b.n	8008792 <_free_r+0x1e>
 80087b6:	461a      	mov	r2, r3
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b10b      	cbz	r3, 80087c0 <_free_r+0x4c>
 80087bc:	42a3      	cmp	r3, r4
 80087be:	d9fa      	bls.n	80087b6 <_free_r+0x42>
 80087c0:	6811      	ldr	r1, [r2, #0]
 80087c2:	1850      	adds	r0, r2, r1
 80087c4:	42a0      	cmp	r0, r4
 80087c6:	d10b      	bne.n	80087e0 <_free_r+0x6c>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	4401      	add	r1, r0
 80087cc:	1850      	adds	r0, r2, r1
 80087ce:	4283      	cmp	r3, r0
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	d1e0      	bne.n	8008796 <_free_r+0x22>
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	6053      	str	r3, [r2, #4]
 80087da:	4408      	add	r0, r1
 80087dc:	6010      	str	r0, [r2, #0]
 80087de:	e7da      	b.n	8008796 <_free_r+0x22>
 80087e0:	d902      	bls.n	80087e8 <_free_r+0x74>
 80087e2:	230c      	movs	r3, #12
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	e7d6      	b.n	8008796 <_free_r+0x22>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	1821      	adds	r1, r4, r0
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf04      	itt	eq
 80087f0:	6819      	ldreq	r1, [r3, #0]
 80087f2:	685b      	ldreq	r3, [r3, #4]
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	bf04      	itt	eq
 80087f8:	1809      	addeq	r1, r1, r0
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	6054      	str	r4, [r2, #4]
 80087fe:	e7ca      	b.n	8008796 <_free_r+0x22>
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	bf00      	nop
 8008804:	200081ec 	.word	0x200081ec

08008808 <sbrk_aligned>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4e0f      	ldr	r6, [pc, #60]	@ (8008848 <sbrk_aligned+0x40>)
 800880c:	460c      	mov	r4, r1
 800880e:	6831      	ldr	r1, [r6, #0]
 8008810:	4605      	mov	r5, r0
 8008812:	b911      	cbnz	r1, 800881a <sbrk_aligned+0x12>
 8008814:	f000 fe16 	bl	8009444 <_sbrk_r>
 8008818:	6030      	str	r0, [r6, #0]
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f000 fe11 	bl	8009444 <_sbrk_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d103      	bne.n	800882e <sbrk_aligned+0x26>
 8008826:	f04f 34ff 	mov.w	r4, #4294967295
 800882a:	4620      	mov	r0, r4
 800882c:	bd70      	pop	{r4, r5, r6, pc}
 800882e:	1cc4      	adds	r4, r0, #3
 8008830:	f024 0403 	bic.w	r4, r4, #3
 8008834:	42a0      	cmp	r0, r4
 8008836:	d0f8      	beq.n	800882a <sbrk_aligned+0x22>
 8008838:	1a21      	subs	r1, r4, r0
 800883a:	4628      	mov	r0, r5
 800883c:	f000 fe02 	bl	8009444 <_sbrk_r>
 8008840:	3001      	adds	r0, #1
 8008842:	d1f2      	bne.n	800882a <sbrk_aligned+0x22>
 8008844:	e7ef      	b.n	8008826 <sbrk_aligned+0x1e>
 8008846:	bf00      	nop
 8008848:	200081e8 	.word	0x200081e8

0800884c <_malloc_r>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	1ccd      	adds	r5, r1, #3
 8008852:	f025 0503 	bic.w	r5, r5, #3
 8008856:	3508      	adds	r5, #8
 8008858:	2d0c      	cmp	r5, #12
 800885a:	bf38      	it	cc
 800885c:	250c      	movcc	r5, #12
 800885e:	2d00      	cmp	r5, #0
 8008860:	4606      	mov	r6, r0
 8008862:	db01      	blt.n	8008868 <_malloc_r+0x1c>
 8008864:	42a9      	cmp	r1, r5
 8008866:	d904      	bls.n	8008872 <_malloc_r+0x26>
 8008868:	230c      	movs	r3, #12
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	2000      	movs	r0, #0
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008872:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008948 <_malloc_r+0xfc>
 8008876:	f000 f869 	bl	800894c <__malloc_lock>
 800887a:	f8d8 3000 	ldr.w	r3, [r8]
 800887e:	461c      	mov	r4, r3
 8008880:	bb44      	cbnz	r4, 80088d4 <_malloc_r+0x88>
 8008882:	4629      	mov	r1, r5
 8008884:	4630      	mov	r0, r6
 8008886:	f7ff ffbf 	bl	8008808 <sbrk_aligned>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	4604      	mov	r4, r0
 800888e:	d158      	bne.n	8008942 <_malloc_r+0xf6>
 8008890:	f8d8 4000 	ldr.w	r4, [r8]
 8008894:	4627      	mov	r7, r4
 8008896:	2f00      	cmp	r7, #0
 8008898:	d143      	bne.n	8008922 <_malloc_r+0xd6>
 800889a:	2c00      	cmp	r4, #0
 800889c:	d04b      	beq.n	8008936 <_malloc_r+0xea>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	4639      	mov	r1, r7
 80088a2:	4630      	mov	r0, r6
 80088a4:	eb04 0903 	add.w	r9, r4, r3
 80088a8:	f000 fdcc 	bl	8009444 <_sbrk_r>
 80088ac:	4581      	cmp	r9, r0
 80088ae:	d142      	bne.n	8008936 <_malloc_r+0xea>
 80088b0:	6821      	ldr	r1, [r4, #0]
 80088b2:	1a6d      	subs	r5, r5, r1
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ffa6 	bl	8008808 <sbrk_aligned>
 80088bc:	3001      	adds	r0, #1
 80088be:	d03a      	beq.n	8008936 <_malloc_r+0xea>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	442b      	add	r3, r5
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	bb62      	cbnz	r2, 8008928 <_malloc_r+0xdc>
 80088ce:	f8c8 7000 	str.w	r7, [r8]
 80088d2:	e00f      	b.n	80088f4 <_malloc_r+0xa8>
 80088d4:	6822      	ldr	r2, [r4, #0]
 80088d6:	1b52      	subs	r2, r2, r5
 80088d8:	d420      	bmi.n	800891c <_malloc_r+0xd0>
 80088da:	2a0b      	cmp	r2, #11
 80088dc:	d917      	bls.n	800890e <_malloc_r+0xc2>
 80088de:	1961      	adds	r1, r4, r5
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	6025      	str	r5, [r4, #0]
 80088e4:	bf18      	it	ne
 80088e6:	6059      	strne	r1, [r3, #4]
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	bf08      	it	eq
 80088ec:	f8c8 1000 	streq.w	r1, [r8]
 80088f0:	5162      	str	r2, [r4, r5]
 80088f2:	604b      	str	r3, [r1, #4]
 80088f4:	4630      	mov	r0, r6
 80088f6:	f000 f82f 	bl	8008958 <__malloc_unlock>
 80088fa:	f104 000b 	add.w	r0, r4, #11
 80088fe:	1d23      	adds	r3, r4, #4
 8008900:	f020 0007 	bic.w	r0, r0, #7
 8008904:	1ac2      	subs	r2, r0, r3
 8008906:	bf1c      	itt	ne
 8008908:	1a1b      	subne	r3, r3, r0
 800890a:	50a3      	strne	r3, [r4, r2]
 800890c:	e7af      	b.n	800886e <_malloc_r+0x22>
 800890e:	6862      	ldr	r2, [r4, #4]
 8008910:	42a3      	cmp	r3, r4
 8008912:	bf0c      	ite	eq
 8008914:	f8c8 2000 	streq.w	r2, [r8]
 8008918:	605a      	strne	r2, [r3, #4]
 800891a:	e7eb      	b.n	80088f4 <_malloc_r+0xa8>
 800891c:	4623      	mov	r3, r4
 800891e:	6864      	ldr	r4, [r4, #4]
 8008920:	e7ae      	b.n	8008880 <_malloc_r+0x34>
 8008922:	463c      	mov	r4, r7
 8008924:	687f      	ldr	r7, [r7, #4]
 8008926:	e7b6      	b.n	8008896 <_malloc_r+0x4a>
 8008928:	461a      	mov	r2, r3
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	42a3      	cmp	r3, r4
 800892e:	d1fb      	bne.n	8008928 <_malloc_r+0xdc>
 8008930:	2300      	movs	r3, #0
 8008932:	6053      	str	r3, [r2, #4]
 8008934:	e7de      	b.n	80088f4 <_malloc_r+0xa8>
 8008936:	230c      	movs	r3, #12
 8008938:	6033      	str	r3, [r6, #0]
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f80c 	bl	8008958 <__malloc_unlock>
 8008940:	e794      	b.n	800886c <_malloc_r+0x20>
 8008942:	6005      	str	r5, [r0, #0]
 8008944:	e7d6      	b.n	80088f4 <_malloc_r+0xa8>
 8008946:	bf00      	nop
 8008948:	200081ec 	.word	0x200081ec

0800894c <__malloc_lock>:
 800894c:	4801      	ldr	r0, [pc, #4]	@ (8008954 <__malloc_lock+0x8>)
 800894e:	f7ff bef8 	b.w	8008742 <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	200081e4 	.word	0x200081e4

08008958 <__malloc_unlock>:
 8008958:	4801      	ldr	r0, [pc, #4]	@ (8008960 <__malloc_unlock+0x8>)
 800895a:	f7ff bef3 	b.w	8008744 <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	200081e4 	.word	0x200081e4

08008964 <__ssputs_r>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	688e      	ldr	r6, [r1, #8]
 800896a:	461f      	mov	r7, r3
 800896c:	42be      	cmp	r6, r7
 800896e:	680b      	ldr	r3, [r1, #0]
 8008970:	4682      	mov	sl, r0
 8008972:	460c      	mov	r4, r1
 8008974:	4690      	mov	r8, r2
 8008976:	d82d      	bhi.n	80089d4 <__ssputs_r+0x70>
 8008978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800897c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008980:	d026      	beq.n	80089d0 <__ssputs_r+0x6c>
 8008982:	6965      	ldr	r5, [r4, #20]
 8008984:	6909      	ldr	r1, [r1, #16]
 8008986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800898a:	eba3 0901 	sub.w	r9, r3, r1
 800898e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008992:	1c7b      	adds	r3, r7, #1
 8008994:	444b      	add	r3, r9
 8008996:	106d      	asrs	r5, r5, #1
 8008998:	429d      	cmp	r5, r3
 800899a:	bf38      	it	cc
 800899c:	461d      	movcc	r5, r3
 800899e:	0553      	lsls	r3, r2, #21
 80089a0:	d527      	bpl.n	80089f2 <__ssputs_r+0x8e>
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7ff ff52 	bl	800884c <_malloc_r>
 80089a8:	4606      	mov	r6, r0
 80089aa:	b360      	cbz	r0, 8008a06 <__ssputs_r+0xa2>
 80089ac:	6921      	ldr	r1, [r4, #16]
 80089ae:	464a      	mov	r2, r9
 80089b0:	f7ff fed1 	bl	8008756 <memcpy>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	6126      	str	r6, [r4, #16]
 80089c2:	6165      	str	r5, [r4, #20]
 80089c4:	444e      	add	r6, r9
 80089c6:	eba5 0509 	sub.w	r5, r5, r9
 80089ca:	6026      	str	r6, [r4, #0]
 80089cc:	60a5      	str	r5, [r4, #8]
 80089ce:	463e      	mov	r6, r7
 80089d0:	42be      	cmp	r6, r7
 80089d2:	d900      	bls.n	80089d6 <__ssputs_r+0x72>
 80089d4:	463e      	mov	r6, r7
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	4632      	mov	r2, r6
 80089da:	4641      	mov	r1, r8
 80089dc:	f000 fcf6 	bl	80093cc <memmove>
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	1b9b      	subs	r3, r3, r6
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	4433      	add	r3, r6
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	2000      	movs	r0, #0
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	462a      	mov	r2, r5
 80089f4:	f000 fd36 	bl	8009464 <_realloc_r>
 80089f8:	4606      	mov	r6, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1e0      	bne.n	80089c0 <__ssputs_r+0x5c>
 80089fe:	6921      	ldr	r1, [r4, #16]
 8008a00:	4650      	mov	r0, sl
 8008a02:	f7ff feb7 	bl	8008774 <_free_r>
 8008a06:	230c      	movs	r3, #12
 8008a08:	f8ca 3000 	str.w	r3, [sl]
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e7e9      	b.n	80089ee <__ssputs_r+0x8a>
	...

08008a1c <_svfiprintf_r>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	4698      	mov	r8, r3
 8008a22:	898b      	ldrh	r3, [r1, #12]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	b09d      	sub	sp, #116	@ 0x74
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	d510      	bpl.n	8008a52 <_svfiprintf_r+0x36>
 8008a30:	690b      	ldr	r3, [r1, #16]
 8008a32:	b973      	cbnz	r3, 8008a52 <_svfiprintf_r+0x36>
 8008a34:	2140      	movs	r1, #64	@ 0x40
 8008a36:	f7ff ff09 	bl	800884c <_malloc_r>
 8008a3a:	6028      	str	r0, [r5, #0]
 8008a3c:	6128      	str	r0, [r5, #16]
 8008a3e:	b930      	cbnz	r0, 8008a4e <_svfiprintf_r+0x32>
 8008a40:	230c      	movs	r3, #12
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	b01d      	add	sp, #116	@ 0x74
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	2340      	movs	r3, #64	@ 0x40
 8008a50:	616b      	str	r3, [r5, #20]
 8008a52:	2300      	movs	r3, #0
 8008a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a56:	2320      	movs	r3, #32
 8008a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a60:	2330      	movs	r3, #48	@ 0x30
 8008a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c00 <_svfiprintf_r+0x1e4>
 8008a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a6a:	f04f 0901 	mov.w	r9, #1
 8008a6e:	4623      	mov	r3, r4
 8008a70:	469a      	mov	sl, r3
 8008a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a76:	b10a      	cbz	r2, 8008a7c <_svfiprintf_r+0x60>
 8008a78:	2a25      	cmp	r2, #37	@ 0x25
 8008a7a:	d1f9      	bne.n	8008a70 <_svfiprintf_r+0x54>
 8008a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a80:	d00b      	beq.n	8008a9a <_svfiprintf_r+0x7e>
 8008a82:	465b      	mov	r3, fp
 8008a84:	4622      	mov	r2, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ff6b 	bl	8008964 <__ssputs_r>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f000 80a7 	beq.w	8008be2 <_svfiprintf_r+0x1c6>
 8008a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a96:	445a      	add	r2, fp
 8008a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 809f 	beq.w	8008be2 <_svfiprintf_r+0x1c6>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aae:	f10a 0a01 	add.w	sl, sl, #1
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	9307      	str	r3, [sp, #28]
 8008ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008abc:	4654      	mov	r4, sl
 8008abe:	2205      	movs	r2, #5
 8008ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac4:	484e      	ldr	r0, [pc, #312]	@ (8008c00 <_svfiprintf_r+0x1e4>)
 8008ac6:	f7f7 fbab 	bl	8000220 <memchr>
 8008aca:	9a04      	ldr	r2, [sp, #16]
 8008acc:	b9d8      	cbnz	r0, 8008b06 <_svfiprintf_r+0xea>
 8008ace:	06d0      	lsls	r0, r2, #27
 8008ad0:	bf44      	itt	mi
 8008ad2:	2320      	movmi	r3, #32
 8008ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ad8:	0711      	lsls	r1, r2, #28
 8008ada:	bf44      	itt	mi
 8008adc:	232b      	movmi	r3, #43	@ 0x2b
 8008ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae8:	d015      	beq.n	8008b16 <_svfiprintf_r+0xfa>
 8008aea:	9a07      	ldr	r2, [sp, #28]
 8008aec:	4654      	mov	r4, sl
 8008aee:	2000      	movs	r0, #0
 8008af0:	f04f 0c0a 	mov.w	ip, #10
 8008af4:	4621      	mov	r1, r4
 8008af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afa:	3b30      	subs	r3, #48	@ 0x30
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d94b      	bls.n	8008b98 <_svfiprintf_r+0x17c>
 8008b00:	b1b0      	cbz	r0, 8008b30 <_svfiprintf_r+0x114>
 8008b02:	9207      	str	r2, [sp, #28]
 8008b04:	e014      	b.n	8008b30 <_svfiprintf_r+0x114>
 8008b06:	eba0 0308 	sub.w	r3, r0, r8
 8008b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	46a2      	mov	sl, r4
 8008b14:	e7d2      	b.n	8008abc <_svfiprintf_r+0xa0>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	1d19      	adds	r1, r3, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	9103      	str	r1, [sp, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfbb      	ittet	lt
 8008b22:	425b      	neglt	r3, r3
 8008b24:	f042 0202 	orrlt.w	r2, r2, #2
 8008b28:	9307      	strge	r3, [sp, #28]
 8008b2a:	9307      	strlt	r3, [sp, #28]
 8008b2c:	bfb8      	it	lt
 8008b2e:	9204      	strlt	r2, [sp, #16]
 8008b30:	7823      	ldrb	r3, [r4, #0]
 8008b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b34:	d10a      	bne.n	8008b4c <_svfiprintf_r+0x130>
 8008b36:	7863      	ldrb	r3, [r4, #1]
 8008b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3a:	d132      	bne.n	8008ba2 <_svfiprintf_r+0x186>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	9203      	str	r2, [sp, #12]
 8008b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b48:	3402      	adds	r4, #2
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c10 <_svfiprintf_r+0x1f4>
 8008b50:	7821      	ldrb	r1, [r4, #0]
 8008b52:	2203      	movs	r2, #3
 8008b54:	4650      	mov	r0, sl
 8008b56:	f7f7 fb63 	bl	8000220 <memchr>
 8008b5a:	b138      	cbz	r0, 8008b6c <_svfiprintf_r+0x150>
 8008b5c:	9b04      	ldr	r3, [sp, #16]
 8008b5e:	eba0 000a 	sub.w	r0, r0, sl
 8008b62:	2240      	movs	r2, #64	@ 0x40
 8008b64:	4082      	lsls	r2, r0
 8008b66:	4313      	orrs	r3, r2
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b70:	4824      	ldr	r0, [pc, #144]	@ (8008c04 <_svfiprintf_r+0x1e8>)
 8008b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b76:	2206      	movs	r2, #6
 8008b78:	f7f7 fb52 	bl	8000220 <memchr>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d036      	beq.n	8008bee <_svfiprintf_r+0x1d2>
 8008b80:	4b21      	ldr	r3, [pc, #132]	@ (8008c08 <_svfiprintf_r+0x1ec>)
 8008b82:	bb1b      	cbnz	r3, 8008bcc <_svfiprintf_r+0x1b0>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3307      	adds	r3, #7
 8008b88:	f023 0307 	bic.w	r3, r3, #7
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	9303      	str	r3, [sp, #12]
 8008b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b92:	4433      	add	r3, r6
 8008b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b96:	e76a      	b.n	8008a6e <_svfiprintf_r+0x52>
 8008b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	e7a8      	b.n	8008af4 <_svfiprintf_r+0xd8>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb4:	3a30      	subs	r2, #48	@ 0x30
 8008bb6:	2a09      	cmp	r2, #9
 8008bb8:	d903      	bls.n	8008bc2 <_svfiprintf_r+0x1a6>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0c6      	beq.n	8008b4c <_svfiprintf_r+0x130>
 8008bbe:	9105      	str	r1, [sp, #20]
 8008bc0:	e7c4      	b.n	8008b4c <_svfiprintf_r+0x130>
 8008bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e7f0      	b.n	8008bae <_svfiprintf_r+0x192>
 8008bcc:	ab03      	add	r3, sp, #12
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <_svfiprintf_r+0x1f0>)
 8008bd4:	a904      	add	r1, sp, #16
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f3af 8000 	nop.w
 8008bdc:	1c42      	adds	r2, r0, #1
 8008bde:	4606      	mov	r6, r0
 8008be0:	d1d6      	bne.n	8008b90 <_svfiprintf_r+0x174>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	065b      	lsls	r3, r3, #25
 8008be6:	f53f af2d 	bmi.w	8008a44 <_svfiprintf_r+0x28>
 8008bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bec:	e72c      	b.n	8008a48 <_svfiprintf_r+0x2c>
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <_svfiprintf_r+0x1f0>)
 8008bf6:	a904      	add	r1, sp, #16
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f000 f9bb 	bl	8008f74 <_printf_i>
 8008bfe:	e7ed      	b.n	8008bdc <_svfiprintf_r+0x1c0>
 8008c00:	08009b19 	.word	0x08009b19
 8008c04:	08009b23 	.word	0x08009b23
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	08008965 	.word	0x08008965
 8008c10:	08009b1f 	.word	0x08009b1f

08008c14 <__sfputc_r>:
 8008c14:	6893      	ldr	r3, [r2, #8]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	b410      	push	{r4}
 8008c1c:	6093      	str	r3, [r2, #8]
 8008c1e:	da08      	bge.n	8008c32 <__sfputc_r+0x1e>
 8008c20:	6994      	ldr	r4, [r2, #24]
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	db01      	blt.n	8008c2a <__sfputc_r+0x16>
 8008c26:	290a      	cmp	r1, #10
 8008c28:	d103      	bne.n	8008c32 <__sfputc_r+0x1e>
 8008c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2e:	f7ff bc7a 	b.w	8008526 <__swbuf_r>
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	1c58      	adds	r0, r3, #1
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	7019      	strb	r1, [r3, #0]
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <__sfputs_r>:
 8008c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	4614      	mov	r4, r2
 8008c4a:	18d5      	adds	r5, r2, r3
 8008c4c:	42ac      	cmp	r4, r5
 8008c4e:	d101      	bne.n	8008c54 <__sfputs_r+0x12>
 8008c50:	2000      	movs	r0, #0
 8008c52:	e007      	b.n	8008c64 <__sfputs_r+0x22>
 8008c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c58:	463a      	mov	r2, r7
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ffda 	bl	8008c14 <__sfputc_r>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d1f3      	bne.n	8008c4c <__sfputs_r+0xa>
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	b09d      	sub	sp, #116	@ 0x74
 8008c70:	4614      	mov	r4, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f7ff fb12 	bl	80082a4 <__sinit>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7ff fd58 	bl	8008742 <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x34>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b99b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x5c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff fc80 	bl	80085a4 <__swsetup_r>
 8008ca4:	b170      	cbz	r0, 8008cc4 <_vfiprintf_r+0x5c>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d504      	bpl.n	8008cb6 <_vfiprintf_r+0x4e>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	@ 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4f7      	bmi.n	8008cac <_vfiprintf_r+0x44>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cbe:	f7ff fd41 	bl	8008744 <__retarget_lock_release_recursive>
 8008cc2:	e7f3      	b.n	8008cac <_vfiprintf_r+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	2330      	movs	r3, #48	@ 0x30
 8008cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e84 <_vfiprintf_r+0x21c>
 8008cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0x86>
 8008cea:	2a25      	cmp	r2, #37	@ 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x7a>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xa4>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ffa1 	bl	8008c42 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80a7 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 809f 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4853      	ldr	r0, [pc, #332]	@ (8008e84 <_vfiprintf_r+0x21c>)
 8008d38:	f7f7 fa72 	bl	8000220 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x110>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	@ 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x120>
 8008d5c:	9a07      	ldr	r2, [sp, #28]
 8008d5e:	4654      	mov	r4, sl
 8008d60:	2000      	movs	r0, #0
 8008d62:	f04f 0c0a 	mov.w	ip, #10
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	@ 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94b      	bls.n	8008e0a <_vfiprintf_r+0x1a2>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x13a>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x13a>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	46a2      	mov	sl, r4
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xc6>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008da6:	d10a      	bne.n	8008dbe <_vfiprintf_r+0x156>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dac:	d132      	bne.n	8008e14 <_vfiprintf_r+0x1ac>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dba:	3402      	adds	r4, #2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e94 <_vfiprintf_r+0x22c>
 8008dc2:	7821      	ldrb	r1, [r4, #0]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa2a 	bl	8000220 <memchr>
 8008dcc:	b138      	cbz	r0, 8008dde <_vfiprintf_r+0x176>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	eba0 000a 	sub.w	r0, r0, sl
 8008dd4:	2240      	movs	r2, #64	@ 0x40
 8008dd6:	4082      	lsls	r2, r0
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	4829      	ldr	r0, [pc, #164]	@ (8008e88 <_vfiprintf_r+0x220>)
 8008de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008de8:	2206      	movs	r2, #6
 8008dea:	f7f7 fa19 	bl	8000220 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d03f      	beq.n	8008e72 <_vfiprintf_r+0x20a>
 8008df2:	4b26      	ldr	r3, [pc, #152]	@ (8008e8c <_vfiprintf_r+0x224>)
 8008df4:	bb1b      	cbnz	r3, 8008e3e <_vfiprintf_r+0x1d6>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	443b      	add	r3, r7
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	e76a      	b.n	8008ce0 <_vfiprintf_r+0x78>
 8008e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7a8      	b.n	8008d66 <_vfiprintf_r+0xfe>
 8008e14:	2300      	movs	r3, #0
 8008e16:	3401      	adds	r4, #1
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f04f 0c0a 	mov.w	ip, #10
 8008e20:	4620      	mov	r0, r4
 8008e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e26:	3a30      	subs	r2, #48	@ 0x30
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	d903      	bls.n	8008e34 <_vfiprintf_r+0x1cc>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c6      	beq.n	8008dbe <_vfiprintf_r+0x156>
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	e7c4      	b.n	8008dbe <_vfiprintf_r+0x156>
 8008e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7f0      	b.n	8008e20 <_vfiprintf_r+0x1b8>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4b12      	ldr	r3, [pc, #72]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f3af 8000 	nop.w
 8008e4e:	4607      	mov	r7, r0
 8008e50:	1c78      	adds	r0, r7, #1
 8008e52:	d1d6      	bne.n	8008e02 <_vfiprintf_r+0x19a>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7ff fc6f 	bl	8008744 <__retarget_lock_release_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	065b      	lsls	r3, r3, #25
 8008e6a:	f53f af1f 	bmi.w	8008cac <_vfiprintf_r+0x44>
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	e71e      	b.n	8008cb0 <_vfiprintf_r+0x48>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f879 	bl	8008f74 <_printf_i>
 8008e82:	e7e4      	b.n	8008e4e <_vfiprintf_r+0x1e6>
 8008e84:	08009b19 	.word	0x08009b19
 8008e88:	08009b23 	.word	0x08009b23
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	08008c43 	.word	0x08008c43
 8008e94:	08009b1f 	.word	0x08009b1f

08008e98 <_printf_common>:
 8008e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	688a      	ldr	r2, [r1, #8]
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	bfb8      	it	lt
 8008eac:	4613      	movlt	r3, r2
 8008eae:	6033      	str	r3, [r6, #0]
 8008eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b10a      	cbz	r2, 8008ebe <_printf_common+0x26>
 8008eba:	3301      	adds	r3, #1
 8008ebc:	6033      	str	r3, [r6, #0]
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	0699      	lsls	r1, r3, #26
 8008ec2:	bf42      	ittt	mi
 8008ec4:	6833      	ldrmi	r3, [r6, #0]
 8008ec6:	3302      	addmi	r3, #2
 8008ec8:	6033      	strmi	r3, [r6, #0]
 8008eca:	6825      	ldr	r5, [r4, #0]
 8008ecc:	f015 0506 	ands.w	r5, r5, #6
 8008ed0:	d106      	bne.n	8008ee0 <_printf_common+0x48>
 8008ed2:	f104 0a19 	add.w	sl, r4, #25
 8008ed6:	68e3      	ldr	r3, [r4, #12]
 8008ed8:	6832      	ldr	r2, [r6, #0]
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dc26      	bgt.n	8008f2e <_printf_common+0x96>
 8008ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	3b00      	subs	r3, #0
 8008ee8:	bf18      	it	ne
 8008eea:	2301      	movne	r3, #1
 8008eec:	0692      	lsls	r2, r2, #26
 8008eee:	d42b      	bmi.n	8008f48 <_printf_common+0xb0>
 8008ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ef4:	4641      	mov	r1, r8
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c8      	blx	r9
 8008efa:	3001      	adds	r0, #1
 8008efc:	d01e      	beq.n	8008f3c <_printf_common+0xa4>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	f003 0306 	and.w	r3, r3, #6
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	bf02      	ittt	eq
 8008f0a:	68e5      	ldreq	r5, [r4, #12]
 8008f0c:	6833      	ldreq	r3, [r6, #0]
 8008f0e:	1aed      	subeq	r5, r5, r3
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	bf0c      	ite	eq
 8008f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f18:	2500      	movne	r5, #0
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	bfc4      	itt	gt
 8008f1e:	1a9b      	subgt	r3, r3, r2
 8008f20:	18ed      	addgt	r5, r5, r3
 8008f22:	2600      	movs	r6, #0
 8008f24:	341a      	adds	r4, #26
 8008f26:	42b5      	cmp	r5, r6
 8008f28:	d11a      	bne.n	8008f60 <_printf_common+0xc8>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e008      	b.n	8008f40 <_printf_common+0xa8>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4652      	mov	r2, sl
 8008f32:	4641      	mov	r1, r8
 8008f34:	4638      	mov	r0, r7
 8008f36:	47c8      	blx	r9
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d103      	bne.n	8008f44 <_printf_common+0xac>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f44:	3501      	adds	r5, #1
 8008f46:	e7c6      	b.n	8008ed6 <_printf_common+0x3e>
 8008f48:	18e1      	adds	r1, r4, r3
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	2030      	movs	r0, #48	@ 0x30
 8008f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f52:	4422      	add	r2, r4
 8008f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	e7c7      	b.n	8008ef0 <_printf_common+0x58>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4622      	mov	r2, r4
 8008f64:	4641      	mov	r1, r8
 8008f66:	4638      	mov	r0, r7
 8008f68:	47c8      	blx	r9
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0e6      	beq.n	8008f3c <_printf_common+0xa4>
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7d9      	b.n	8008f26 <_printf_common+0x8e>
	...

08008f74 <_printf_i>:
 8008f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	7e0f      	ldrb	r7, [r1, #24]
 8008f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f7c:	2f78      	cmp	r7, #120	@ 0x78
 8008f7e:	4691      	mov	r9, r2
 8008f80:	4680      	mov	r8, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	469a      	mov	sl, r3
 8008f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f8a:	d807      	bhi.n	8008f9c <_printf_i+0x28>
 8008f8c:	2f62      	cmp	r7, #98	@ 0x62
 8008f8e:	d80a      	bhi.n	8008fa6 <_printf_i+0x32>
 8008f90:	2f00      	cmp	r7, #0
 8008f92:	f000 80d1 	beq.w	8009138 <_printf_i+0x1c4>
 8008f96:	2f58      	cmp	r7, #88	@ 0x58
 8008f98:	f000 80b8 	beq.w	800910c <_printf_i+0x198>
 8008f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fa4:	e03a      	b.n	800901c <_printf_i+0xa8>
 8008fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008faa:	2b15      	cmp	r3, #21
 8008fac:	d8f6      	bhi.n	8008f9c <_printf_i+0x28>
 8008fae:	a101      	add	r1, pc, #4	@ (adr r1, 8008fb4 <_printf_i+0x40>)
 8008fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fb4:	0800900d 	.word	0x0800900d
 8008fb8:	08009021 	.word	0x08009021
 8008fbc:	08008f9d 	.word	0x08008f9d
 8008fc0:	08008f9d 	.word	0x08008f9d
 8008fc4:	08008f9d 	.word	0x08008f9d
 8008fc8:	08008f9d 	.word	0x08008f9d
 8008fcc:	08009021 	.word	0x08009021
 8008fd0:	08008f9d 	.word	0x08008f9d
 8008fd4:	08008f9d 	.word	0x08008f9d
 8008fd8:	08008f9d 	.word	0x08008f9d
 8008fdc:	08008f9d 	.word	0x08008f9d
 8008fe0:	0800911f 	.word	0x0800911f
 8008fe4:	0800904b 	.word	0x0800904b
 8008fe8:	080090d9 	.word	0x080090d9
 8008fec:	08008f9d 	.word	0x08008f9d
 8008ff0:	08008f9d 	.word	0x08008f9d
 8008ff4:	08009141 	.word	0x08009141
 8008ff8:	08008f9d 	.word	0x08008f9d
 8008ffc:	0800904b 	.word	0x0800904b
 8009000:	08008f9d 	.word	0x08008f9d
 8009004:	08008f9d 	.word	0x08008f9d
 8009008:	080090e1 	.word	0x080090e1
 800900c:	6833      	ldr	r3, [r6, #0]
 800900e:	1d1a      	adds	r2, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6032      	str	r2, [r6, #0]
 8009014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800901c:	2301      	movs	r3, #1
 800901e:	e09c      	b.n	800915a <_printf_i+0x1e6>
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	1d19      	adds	r1, r3, #4
 8009026:	6031      	str	r1, [r6, #0]
 8009028:	0606      	lsls	r6, r0, #24
 800902a:	d501      	bpl.n	8009030 <_printf_i+0xbc>
 800902c:	681d      	ldr	r5, [r3, #0]
 800902e:	e003      	b.n	8009038 <_printf_i+0xc4>
 8009030:	0645      	lsls	r5, r0, #25
 8009032:	d5fb      	bpl.n	800902c <_printf_i+0xb8>
 8009034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009038:	2d00      	cmp	r5, #0
 800903a:	da03      	bge.n	8009044 <_printf_i+0xd0>
 800903c:	232d      	movs	r3, #45	@ 0x2d
 800903e:	426d      	negs	r5, r5
 8009040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009044:	4858      	ldr	r0, [pc, #352]	@ (80091a8 <_printf_i+0x234>)
 8009046:	230a      	movs	r3, #10
 8009048:	e011      	b.n	800906e <_printf_i+0xfa>
 800904a:	6821      	ldr	r1, [r4, #0]
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	0608      	lsls	r0, r1, #24
 8009050:	f853 5b04 	ldr.w	r5, [r3], #4
 8009054:	d402      	bmi.n	800905c <_printf_i+0xe8>
 8009056:	0649      	lsls	r1, r1, #25
 8009058:	bf48      	it	mi
 800905a:	b2ad      	uxthmi	r5, r5
 800905c:	2f6f      	cmp	r7, #111	@ 0x6f
 800905e:	4852      	ldr	r0, [pc, #328]	@ (80091a8 <_printf_i+0x234>)
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	bf14      	ite	ne
 8009064:	230a      	movne	r3, #10
 8009066:	2308      	moveq	r3, #8
 8009068:	2100      	movs	r1, #0
 800906a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800906e:	6866      	ldr	r6, [r4, #4]
 8009070:	60a6      	str	r6, [r4, #8]
 8009072:	2e00      	cmp	r6, #0
 8009074:	db05      	blt.n	8009082 <_printf_i+0x10e>
 8009076:	6821      	ldr	r1, [r4, #0]
 8009078:	432e      	orrs	r6, r5
 800907a:	f021 0104 	bic.w	r1, r1, #4
 800907e:	6021      	str	r1, [r4, #0]
 8009080:	d04b      	beq.n	800911a <_printf_i+0x1a6>
 8009082:	4616      	mov	r6, r2
 8009084:	fbb5 f1f3 	udiv	r1, r5, r3
 8009088:	fb03 5711 	mls	r7, r3, r1, r5
 800908c:	5dc7      	ldrb	r7, [r0, r7]
 800908e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009092:	462f      	mov	r7, r5
 8009094:	42bb      	cmp	r3, r7
 8009096:	460d      	mov	r5, r1
 8009098:	d9f4      	bls.n	8009084 <_printf_i+0x110>
 800909a:	2b08      	cmp	r3, #8
 800909c:	d10b      	bne.n	80090b6 <_printf_i+0x142>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	07df      	lsls	r7, r3, #31
 80090a2:	d508      	bpl.n	80090b6 <_printf_i+0x142>
 80090a4:	6923      	ldr	r3, [r4, #16]
 80090a6:	6861      	ldr	r1, [r4, #4]
 80090a8:	4299      	cmp	r1, r3
 80090aa:	bfde      	ittt	le
 80090ac:	2330      	movle	r3, #48	@ 0x30
 80090ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b6:	1b92      	subs	r2, r2, r6
 80090b8:	6122      	str	r2, [r4, #16]
 80090ba:	f8cd a000 	str.w	sl, [sp]
 80090be:	464b      	mov	r3, r9
 80090c0:	aa03      	add	r2, sp, #12
 80090c2:	4621      	mov	r1, r4
 80090c4:	4640      	mov	r0, r8
 80090c6:	f7ff fee7 	bl	8008e98 <_printf_common>
 80090ca:	3001      	adds	r0, #1
 80090cc:	d14a      	bne.n	8009164 <_printf_i+0x1f0>
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	b004      	add	sp, #16
 80090d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	f043 0320 	orr.w	r3, r3, #32
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	4832      	ldr	r0, [pc, #200]	@ (80091ac <_printf_i+0x238>)
 80090e2:	2778      	movs	r7, #120	@ 0x78
 80090e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	6831      	ldr	r1, [r6, #0]
 80090ec:	061f      	lsls	r7, r3, #24
 80090ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80090f2:	d402      	bmi.n	80090fa <_printf_i+0x186>
 80090f4:	065f      	lsls	r7, r3, #25
 80090f6:	bf48      	it	mi
 80090f8:	b2ad      	uxthmi	r5, r5
 80090fa:	6031      	str	r1, [r6, #0]
 80090fc:	07d9      	lsls	r1, r3, #31
 80090fe:	bf44      	itt	mi
 8009100:	f043 0320 	orrmi.w	r3, r3, #32
 8009104:	6023      	strmi	r3, [r4, #0]
 8009106:	b11d      	cbz	r5, 8009110 <_printf_i+0x19c>
 8009108:	2310      	movs	r3, #16
 800910a:	e7ad      	b.n	8009068 <_printf_i+0xf4>
 800910c:	4826      	ldr	r0, [pc, #152]	@ (80091a8 <_printf_i+0x234>)
 800910e:	e7e9      	b.n	80090e4 <_printf_i+0x170>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	f023 0320 	bic.w	r3, r3, #32
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	e7f6      	b.n	8009108 <_printf_i+0x194>
 800911a:	4616      	mov	r6, r2
 800911c:	e7bd      	b.n	800909a <_printf_i+0x126>
 800911e:	6833      	ldr	r3, [r6, #0]
 8009120:	6825      	ldr	r5, [r4, #0]
 8009122:	6961      	ldr	r1, [r4, #20]
 8009124:	1d18      	adds	r0, r3, #4
 8009126:	6030      	str	r0, [r6, #0]
 8009128:	062e      	lsls	r6, r5, #24
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	d501      	bpl.n	8009132 <_printf_i+0x1be>
 800912e:	6019      	str	r1, [r3, #0]
 8009130:	e002      	b.n	8009138 <_printf_i+0x1c4>
 8009132:	0668      	lsls	r0, r5, #25
 8009134:	d5fb      	bpl.n	800912e <_printf_i+0x1ba>
 8009136:	8019      	strh	r1, [r3, #0]
 8009138:	2300      	movs	r3, #0
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	4616      	mov	r6, r2
 800913e:	e7bc      	b.n	80090ba <_printf_i+0x146>
 8009140:	6833      	ldr	r3, [r6, #0]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	6032      	str	r2, [r6, #0]
 8009146:	681e      	ldr	r6, [r3, #0]
 8009148:	6862      	ldr	r2, [r4, #4]
 800914a:	2100      	movs	r1, #0
 800914c:	4630      	mov	r0, r6
 800914e:	f7f7 f867 	bl	8000220 <memchr>
 8009152:	b108      	cbz	r0, 8009158 <_printf_i+0x1e4>
 8009154:	1b80      	subs	r0, r0, r6
 8009156:	6060      	str	r0, [r4, #4]
 8009158:	6863      	ldr	r3, [r4, #4]
 800915a:	6123      	str	r3, [r4, #16]
 800915c:	2300      	movs	r3, #0
 800915e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009162:	e7aa      	b.n	80090ba <_printf_i+0x146>
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	4632      	mov	r2, r6
 8009168:	4649      	mov	r1, r9
 800916a:	4640      	mov	r0, r8
 800916c:	47d0      	blx	sl
 800916e:	3001      	adds	r0, #1
 8009170:	d0ad      	beq.n	80090ce <_printf_i+0x15a>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	079b      	lsls	r3, r3, #30
 8009176:	d413      	bmi.n	80091a0 <_printf_i+0x22c>
 8009178:	68e0      	ldr	r0, [r4, #12]
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	4298      	cmp	r0, r3
 800917e:	bfb8      	it	lt
 8009180:	4618      	movlt	r0, r3
 8009182:	e7a6      	b.n	80090d2 <_printf_i+0x15e>
 8009184:	2301      	movs	r3, #1
 8009186:	4632      	mov	r2, r6
 8009188:	4649      	mov	r1, r9
 800918a:	4640      	mov	r0, r8
 800918c:	47d0      	blx	sl
 800918e:	3001      	adds	r0, #1
 8009190:	d09d      	beq.n	80090ce <_printf_i+0x15a>
 8009192:	3501      	adds	r5, #1
 8009194:	68e3      	ldr	r3, [r4, #12]
 8009196:	9903      	ldr	r1, [sp, #12]
 8009198:	1a5b      	subs	r3, r3, r1
 800919a:	42ab      	cmp	r3, r5
 800919c:	dcf2      	bgt.n	8009184 <_printf_i+0x210>
 800919e:	e7eb      	b.n	8009178 <_printf_i+0x204>
 80091a0:	2500      	movs	r5, #0
 80091a2:	f104 0619 	add.w	r6, r4, #25
 80091a6:	e7f5      	b.n	8009194 <_printf_i+0x220>
 80091a8:	08009b2a 	.word	0x08009b2a
 80091ac:	08009b3b 	.word	0x08009b3b

080091b0 <__sflush_r>:
 80091b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	0716      	lsls	r6, r2, #28
 80091ba:	4605      	mov	r5, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	d454      	bmi.n	800926a <__sflush_r+0xba>
 80091c0:	684b      	ldr	r3, [r1, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc02      	bgt.n	80091cc <__sflush_r+0x1c>
 80091c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd48      	ble.n	800925e <__sflush_r+0xae>
 80091cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ce:	2e00      	cmp	r6, #0
 80091d0:	d045      	beq.n	800925e <__sflush_r+0xae>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091d8:	682f      	ldr	r7, [r5, #0]
 80091da:	6a21      	ldr	r1, [r4, #32]
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	d030      	beq.n	8009242 <__sflush_r+0x92>
 80091e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	0759      	lsls	r1, r3, #29
 80091e6:	d505      	bpl.n	80091f4 <__sflush_r+0x44>
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091ee:	b10b      	cbz	r3, 80091f4 <__sflush_r+0x44>
 80091f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091f8:	6a21      	ldr	r1, [r4, #32]
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b0      	blx	r6
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	d106      	bne.n	8009212 <__sflush_r+0x62>
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	291d      	cmp	r1, #29
 8009208:	d82b      	bhi.n	8009262 <__sflush_r+0xb2>
 800920a:	4a2a      	ldr	r2, [pc, #168]	@ (80092b4 <__sflush_r+0x104>)
 800920c:	40ca      	lsrs	r2, r1
 800920e:	07d6      	lsls	r6, r2, #31
 8009210:	d527      	bpl.n	8009262 <__sflush_r+0xb2>
 8009212:	2200      	movs	r2, #0
 8009214:	6062      	str	r2, [r4, #4]
 8009216:	04d9      	lsls	r1, r3, #19
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	6022      	str	r2, [r4, #0]
 800921c:	d504      	bpl.n	8009228 <__sflush_r+0x78>
 800921e:	1c42      	adds	r2, r0, #1
 8009220:	d101      	bne.n	8009226 <__sflush_r+0x76>
 8009222:	682b      	ldr	r3, [r5, #0]
 8009224:	b903      	cbnz	r3, 8009228 <__sflush_r+0x78>
 8009226:	6560      	str	r0, [r4, #84]	@ 0x54
 8009228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800922a:	602f      	str	r7, [r5, #0]
 800922c:	b1b9      	cbz	r1, 800925e <__sflush_r+0xae>
 800922e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009232:	4299      	cmp	r1, r3
 8009234:	d002      	beq.n	800923c <__sflush_r+0x8c>
 8009236:	4628      	mov	r0, r5
 8009238:	f7ff fa9c 	bl	8008774 <_free_r>
 800923c:	2300      	movs	r3, #0
 800923e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009240:	e00d      	b.n	800925e <__sflush_r+0xae>
 8009242:	2301      	movs	r3, #1
 8009244:	4628      	mov	r0, r5
 8009246:	47b0      	blx	r6
 8009248:	4602      	mov	r2, r0
 800924a:	1c50      	adds	r0, r2, #1
 800924c:	d1c9      	bne.n	80091e2 <__sflush_r+0x32>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0c6      	beq.n	80091e2 <__sflush_r+0x32>
 8009254:	2b1d      	cmp	r3, #29
 8009256:	d001      	beq.n	800925c <__sflush_r+0xac>
 8009258:	2b16      	cmp	r3, #22
 800925a:	d11e      	bne.n	800929a <__sflush_r+0xea>
 800925c:	602f      	str	r7, [r5, #0]
 800925e:	2000      	movs	r0, #0
 8009260:	e022      	b.n	80092a8 <__sflush_r+0xf8>
 8009262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009266:	b21b      	sxth	r3, r3
 8009268:	e01b      	b.n	80092a2 <__sflush_r+0xf2>
 800926a:	690f      	ldr	r7, [r1, #16]
 800926c:	2f00      	cmp	r7, #0
 800926e:	d0f6      	beq.n	800925e <__sflush_r+0xae>
 8009270:	0793      	lsls	r3, r2, #30
 8009272:	680e      	ldr	r6, [r1, #0]
 8009274:	bf08      	it	eq
 8009276:	694b      	ldreq	r3, [r1, #20]
 8009278:	600f      	str	r7, [r1, #0]
 800927a:	bf18      	it	ne
 800927c:	2300      	movne	r3, #0
 800927e:	eba6 0807 	sub.w	r8, r6, r7
 8009282:	608b      	str	r3, [r1, #8]
 8009284:	f1b8 0f00 	cmp.w	r8, #0
 8009288:	dde9      	ble.n	800925e <__sflush_r+0xae>
 800928a:	6a21      	ldr	r1, [r4, #32]
 800928c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800928e:	4643      	mov	r3, r8
 8009290:	463a      	mov	r2, r7
 8009292:	4628      	mov	r0, r5
 8009294:	47b0      	blx	r6
 8009296:	2800      	cmp	r0, #0
 8009298:	dc08      	bgt.n	80092ac <__sflush_r+0xfc>
 800929a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	4407      	add	r7, r0
 80092ae:	eba8 0800 	sub.w	r8, r8, r0
 80092b2:	e7e7      	b.n	8009284 <__sflush_r+0xd4>
 80092b4:	20400001 	.word	0x20400001

080092b8 <_fflush_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b913      	cbnz	r3, 80092c8 <_fflush_r+0x10>
 80092c2:	2500      	movs	r5, #0
 80092c4:	4628      	mov	r0, r5
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	b118      	cbz	r0, 80092d2 <_fflush_r+0x1a>
 80092ca:	6a03      	ldr	r3, [r0, #32]
 80092cc:	b90b      	cbnz	r3, 80092d2 <_fflush_r+0x1a>
 80092ce:	f7fe ffe9 	bl	80082a4 <__sinit>
 80092d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f3      	beq.n	80092c2 <_fflush_r+0xa>
 80092da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092dc:	07d0      	lsls	r0, r2, #31
 80092de:	d404      	bmi.n	80092ea <_fflush_r+0x32>
 80092e0:	0599      	lsls	r1, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_fflush_r+0x32>
 80092e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e6:	f7ff fa2c 	bl	8008742 <__retarget_lock_acquire_recursive>
 80092ea:	4628      	mov	r0, r5
 80092ec:	4621      	mov	r1, r4
 80092ee:	f7ff ff5f 	bl	80091b0 <__sflush_r>
 80092f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092f4:	07da      	lsls	r2, r3, #31
 80092f6:	4605      	mov	r5, r0
 80092f8:	d4e4      	bmi.n	80092c4 <_fflush_r+0xc>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	059b      	lsls	r3, r3, #22
 80092fe:	d4e1      	bmi.n	80092c4 <_fflush_r+0xc>
 8009300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009302:	f7ff fa1f 	bl	8008744 <__retarget_lock_release_recursive>
 8009306:	e7dd      	b.n	80092c4 <_fflush_r+0xc>

08009308 <__swhatbuf_r>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	2900      	cmp	r1, #0
 8009312:	b096      	sub	sp, #88	@ 0x58
 8009314:	4615      	mov	r5, r2
 8009316:	461e      	mov	r6, r3
 8009318:	da0d      	bge.n	8009336 <__swhatbuf_r+0x2e>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009320:	f04f 0100 	mov.w	r1, #0
 8009324:	bf14      	ite	ne
 8009326:	2340      	movne	r3, #64	@ 0x40
 8009328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800932c:	2000      	movs	r0, #0
 800932e:	6031      	str	r1, [r6, #0]
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	b016      	add	sp, #88	@ 0x58
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	466a      	mov	r2, sp
 8009338:	f000 f862 	bl	8009400 <_fstat_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	dbec      	blt.n	800931a <__swhatbuf_r+0x12>
 8009340:	9901      	ldr	r1, [sp, #4]
 8009342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800934a:	4259      	negs	r1, r3
 800934c:	4159      	adcs	r1, r3
 800934e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009352:	e7eb      	b.n	800932c <__swhatbuf_r+0x24>

08009354 <__smakebuf_r>:
 8009354:	898b      	ldrh	r3, [r1, #12]
 8009356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009358:	079d      	lsls	r5, r3, #30
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	d507      	bpl.n	8009370 <__smakebuf_r+0x1c>
 8009360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	2301      	movs	r3, #1
 800936a:	6163      	str	r3, [r4, #20]
 800936c:	b003      	add	sp, #12
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009370:	ab01      	add	r3, sp, #4
 8009372:	466a      	mov	r2, sp
 8009374:	f7ff ffc8 	bl	8009308 <__swhatbuf_r>
 8009378:	9f00      	ldr	r7, [sp, #0]
 800937a:	4605      	mov	r5, r0
 800937c:	4639      	mov	r1, r7
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff fa64 	bl	800884c <_malloc_r>
 8009384:	b948      	cbnz	r0, 800939a <__smakebuf_r+0x46>
 8009386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938a:	059a      	lsls	r2, r3, #22
 800938c:	d4ee      	bmi.n	800936c <__smakebuf_r+0x18>
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	f043 0302 	orr.w	r3, r3, #2
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	e7e2      	b.n	8009360 <__smakebuf_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	6020      	str	r0, [r4, #0]
 800939e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093aa:	b15b      	cbz	r3, 80093c4 <__smakebuf_r+0x70>
 80093ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 f837 	bl	8009424 <_isatty_r>
 80093b6:	b128      	cbz	r0, 80093c4 <__smakebuf_r+0x70>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	431d      	orrs	r5, r3
 80093c8:	81a5      	strh	r5, [r4, #12]
 80093ca:	e7cf      	b.n	800936c <__smakebuf_r+0x18>

080093cc <memmove>:
 80093cc:	4288      	cmp	r0, r1
 80093ce:	b510      	push	{r4, lr}
 80093d0:	eb01 0402 	add.w	r4, r1, r2
 80093d4:	d902      	bls.n	80093dc <memmove+0x10>
 80093d6:	4284      	cmp	r4, r0
 80093d8:	4623      	mov	r3, r4
 80093da:	d807      	bhi.n	80093ec <memmove+0x20>
 80093dc:	1e43      	subs	r3, r0, #1
 80093de:	42a1      	cmp	r1, r4
 80093e0:	d008      	beq.n	80093f4 <memmove+0x28>
 80093e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ea:	e7f8      	b.n	80093de <memmove+0x12>
 80093ec:	4402      	add	r2, r0
 80093ee:	4601      	mov	r1, r0
 80093f0:	428a      	cmp	r2, r1
 80093f2:	d100      	bne.n	80093f6 <memmove+0x2a>
 80093f4:	bd10      	pop	{r4, pc}
 80093f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093fe:	e7f7      	b.n	80093f0 <memmove+0x24>

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	@ (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f8 fb36 	bl	8001a7e <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	200081e0 	.word	0x200081e0

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	@ (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f8 fb35 	bl	8001a9e <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	200081e0 	.word	0x200081e0

08009444 <_sbrk_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	@ (8009460 <_sbrk_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f8 fb3e 	bl	8001ad0 <_sbrk>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_sbrk_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_sbrk_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	200081e0 	.word	0x200081e0

08009464 <_realloc_r>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	4607      	mov	r7, r0
 800946a:	4614      	mov	r4, r2
 800946c:	460d      	mov	r5, r1
 800946e:	b921      	cbnz	r1, 800947a <_realloc_r+0x16>
 8009470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	4611      	mov	r1, r2
 8009476:	f7ff b9e9 	b.w	800884c <_malloc_r>
 800947a:	b92a      	cbnz	r2, 8009488 <_realloc_r+0x24>
 800947c:	f7ff f97a 	bl	8008774 <_free_r>
 8009480:	4625      	mov	r5, r4
 8009482:	4628      	mov	r0, r5
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	f000 f81a 	bl	80094c0 <_malloc_usable_size_r>
 800948c:	4284      	cmp	r4, r0
 800948e:	4606      	mov	r6, r0
 8009490:	d802      	bhi.n	8009498 <_realloc_r+0x34>
 8009492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009496:	d8f4      	bhi.n	8009482 <_realloc_r+0x1e>
 8009498:	4621      	mov	r1, r4
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff f9d6 	bl	800884c <_malloc_r>
 80094a0:	4680      	mov	r8, r0
 80094a2:	b908      	cbnz	r0, 80094a8 <_realloc_r+0x44>
 80094a4:	4645      	mov	r5, r8
 80094a6:	e7ec      	b.n	8009482 <_realloc_r+0x1e>
 80094a8:	42b4      	cmp	r4, r6
 80094aa:	4622      	mov	r2, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	bf28      	it	cs
 80094b0:	4632      	movcs	r2, r6
 80094b2:	f7ff f950 	bl	8008756 <memcpy>
 80094b6:	4629      	mov	r1, r5
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7ff f95b 	bl	8008774 <_free_r>
 80094be:	e7f1      	b.n	80094a4 <_realloc_r+0x40>

080094c0 <_malloc_usable_size_r>:
 80094c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c4:	1f18      	subs	r0, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfbc      	itt	lt
 80094ca:	580b      	ldrlt	r3, [r1, r0]
 80094cc:	18c0      	addlt	r0, r0, r3
 80094ce:	4770      	bx	lr

080094d0 <_init>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr

080094dc <_fini>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr
