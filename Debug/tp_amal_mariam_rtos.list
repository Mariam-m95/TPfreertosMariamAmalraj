
tp_amal_mariam_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800700c  0800700c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007014  08007014  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800701c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044fc  2000006c  08007088  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  08007088  00009568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110f6  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  0001a192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9c  00000000  00000000  0001e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028aa2  00000000  00000000  0001eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c8f  00000000  00000000  000475a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f264c  00000000  00000000  0005a235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  0014c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00150840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c58 	.word	0x08006c58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006c58 	.word	0x08006c58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <drv_uart1_receive>:

#include "usart.h"
#include "gpio.h"

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <drv_uart1_receive+0x24>)
 80005b6:	f002 ff60 	bl	800347a <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000644 	.word	0x20000644

080005c8 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80005d4:	887a      	ldrh	r2, [r7, #2]
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <drv_uart1_transmit+0x24>)
 80005de:	f002 fec3 	bl	8003368 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000644 	.word	0x20000644

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	@ (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c
 8000620:	200000e0 	.word	0x200000e0

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_FREERTOS_Init+0x30>)
 800062c:	1d3c      	adds	r4, r7, #4
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f003 ff62 	bl	800450a <osThreadCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a03      	ldr	r2, [pc, #12]	@ (8000658 <MX_FREERTOS_Init+0x34>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bdb0      	pop	{r4, r5, r7, pc}
 8000654:	08006c7c 	.word	0x08006c7c
 8000658:	20000088 	.word	0x20000088

0800065c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f003 ff9c 	bl	80045a2 <osDelay>
 800066a:	e7fb      	b.n	8000664 <StartDefaultTask+0x8>

0800066c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b090      	sub	sp, #64	@ 0x40
 8000670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4bad      	ldr	r3, [pc, #692]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4aac      	ldr	r2, [pc, #688]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4baa      	ldr	r3, [pc, #680]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0310 	and.w	r3, r3, #16
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4ba7      	ldr	r3, [pc, #668]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4aa6      	ldr	r2, [pc, #664]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4ba4      	ldr	r3, [pc, #656]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4ba1      	ldr	r3, [pc, #644]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4aa0      	ldr	r2, [pc, #640]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b9e      	ldr	r3, [pc, #632]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
 80006c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	4b9b      	ldr	r3, [pc, #620]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a9a      	ldr	r2, [pc, #616]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b98      	ldr	r3, [pc, #608]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b95      	ldr	r3, [pc, #596]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a94      	ldr	r2, [pc, #592]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b92      	ldr	r3, [pc, #584]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b8f      	ldr	r3, [pc, #572]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a8e      	ldr	r2, [pc, #568]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b8c      	ldr	r3, [pc, #560]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000712:	4b89      	ldr	r3, [pc, #548]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a88      	ldr	r2, [pc, #544]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000718:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b86      	ldr	r3, [pc, #536]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800072a:	4b83      	ldr	r3, [pc, #524]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a82      	ldr	r2, [pc, #520]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b80      	ldr	r3, [pc, #512]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000742:	4b7d      	ldr	r3, [pc, #500]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a7c      	ldr	r2, [pc, #496]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b7a      	ldr	r3, [pc, #488]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b77      	ldr	r3, [pc, #476]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a76      	ldr	r2, [pc, #472]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b74      	ldr	r3, [pc, #464]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b71      	ldr	r3, [pc, #452]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a70      	ldr	r2, [pc, #448]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b6e      	ldr	r3, [pc, #440]	@ (8000938 <MX_GPIO_Init+0x2cc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	486b      	ldr	r0, [pc, #428]	@ (800093c <MX_GPIO_Init+0x2d0>)
 8000790:	f001 fc9e 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f241 010e 	movw	r1, #4110	@ 0x100e
 800079a:	4869      	ldr	r0, [pc, #420]	@ (8000940 <MX_GPIO_Init+0x2d4>)
 800079c:	f001 fc98 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	4867      	ldr	r0, [pc, #412]	@ (8000944 <MX_GPIO_Init+0x2d8>)
 80007a6:	f001 fc93 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b0:	4865      	ldr	r0, [pc, #404]	@ (8000948 <MX_GPIO_Init+0x2dc>)
 80007b2:	f001 fc8d 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	21c8      	movs	r1, #200	@ 0xc8
 80007ba:	4864      	ldr	r0, [pc, #400]	@ (800094c <MX_GPIO_Init+0x2e0>)
 80007bc:	f001 fc88 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007c0:	2310      	movs	r3, #16
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007d0:	230e      	movs	r3, #14
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d8:	4619      	mov	r1, r3
 80007da:	485d      	ldr	r0, [pc, #372]	@ (8000950 <MX_GPIO_Init+0x2e4>)
 80007dc:	f001 facc 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f0:	4619      	mov	r1, r3
 80007f2:	4857      	ldr	r0, [pc, #348]	@ (8000950 <MX_GPIO_Init+0x2e4>)
 80007f4:	f001 fac0 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007f8:	2304      	movs	r3, #4
 80007fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000808:	2309      	movs	r3, #9
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000810:	4619      	mov	r1, r3
 8000812:	484f      	ldr	r0, [pc, #316]	@ (8000950 <MX_GPIO_Init+0x2e4>)
 8000814:	f001 fab0 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000818:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	4845      	ldr	r0, [pc, #276]	@ (800094c <MX_GPIO_Init+0x2e0>)
 8000836:	f001 fa9f 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800083a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084c:	230c      	movs	r3, #12
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000854:	4619      	mov	r1, r3
 8000856:	483e      	ldr	r0, [pc, #248]	@ (8000950 <MX_GPIO_Init+0x2e4>)
 8000858:	f001 fa8e 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800085c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000862:	2312      	movs	r3, #18
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086e:	2304      	movs	r3, #4
 8000870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	4836      	ldr	r0, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x2e8>)
 800087a:	f001 fa7d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800087e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000890:	230a      	movs	r3, #10
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000898:	4619      	mov	r1, r3
 800089a:	482e      	ldr	r0, [pc, #184]	@ (8000954 <MX_GPIO_Init+0x2e8>)
 800089c:	f001 fa6c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008b0:	2302      	movs	r3, #2
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	@ (8000954 <MX_GPIO_Init+0x2e8>)
 80008bc:	f001 fa5c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008d0:	2308      	movs	r3, #8
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d8:	4619      	mov	r1, r3
 80008da:	4818      	ldr	r0, [pc, #96]	@ (800093c <MX_GPIO_Init+0x2d0>)
 80008dc:	f001 fa4c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008e0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008f2:	230c      	movs	r3, #12
 80008f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008fa:	4619      	mov	r1, r3
 80008fc:	4816      	ldr	r0, [pc, #88]	@ (8000958 <MX_GPIO_Init+0x2ec>)
 80008fe:	f001 fa3b 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000914:	2301      	movs	r3, #1
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091c:	4619      	mov	r1, r3
 800091e:	480f      	ldr	r0, [pc, #60]	@ (800095c <MX_GPIO_Init+0x2f0>)
 8000920:	f001 fa2a 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000924:	2360      	movs	r3, #96	@ 0x60
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000934:	230d      	movs	r3, #13
 8000936:	e013      	b.n	8000960 <MX_GPIO_Init+0x2f4>
 8000938:	40023800 	.word	0x40023800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40022000 	.word	0x40022000
 8000944:	40022800 	.word	0x40022800
 8000948:	40021c00 	.word	0x40021c00
 800094c:	40021800 	.word	0x40021800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020400 	.word	0x40020400
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000
 8000960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000966:	4619      	mov	r1, r3
 8000968:	48bc      	ldr	r0, [pc, #752]	@ (8000c5c <MX_GPIO_Init+0x5f0>)
 800096a:	f001 fa05 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800097e:	230a      	movs	r3, #10
 8000980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	48b5      	ldr	r0, [pc, #724]	@ (8000c60 <MX_GPIO_Init+0x5f4>)
 800098a:	f001 f9f5 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800098e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a0:	230c      	movs	r3, #12
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a8:	4619      	mov	r1, r3
 80009aa:	48ae      	ldr	r0, [pc, #696]	@ (8000c64 <MX_GPIO_Init+0x5f8>)
 80009ac:	f001 f9e4 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009b0:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c2:	230e      	movs	r3, #14
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ca:	4619      	mov	r1, r3
 80009cc:	48a6      	ldr	r0, [pc, #664]	@ (8000c68 <MX_GPIO_Init+0x5fc>)
 80009ce:	f001 f9d3 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	48a0      	ldr	r0, [pc, #640]	@ (8000c68 <MX_GPIO_Init+0x5fc>)
 80009e8:	f001 f9c6 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	489a      	ldr	r0, [pc, #616]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000a02:	f001 f9b9 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a06:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4892      	ldr	r0, [pc, #584]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000a24:	f001 f9a8 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a28:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	488a      	ldr	r0, [pc, #552]	@ (8000c70 <MX_GPIO_Init+0x604>)
 8000a46:	f001 f997 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a4a:	23f0      	movs	r3, #240	@ 0xf0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a62:	4619      	mov	r1, r3
 8000a64:	4883      	ldr	r0, [pc, #524]	@ (8000c74 <MX_GPIO_Init+0x608>)
 8000a66:	f001 f987 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a6a:	23f7      	movs	r3, #247	@ 0xf7
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a82:	4619      	mov	r1, r3
 8000a84:	487c      	ldr	r0, [pc, #496]	@ (8000c78 <MX_GPIO_Init+0x60c>)
 8000a86:	f001 f977 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	486f      	ldr	r0, [pc, #444]	@ (8000c64 <MX_GPIO_Init+0x5f8>)
 8000aa8:	f001 f966 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000abe:	230a      	movs	r3, #10
 8000ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4866      	ldr	r0, [pc, #408]	@ (8000c64 <MX_GPIO_Init+0x5f8>)
 8000aca:	f001 f955 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ace:	2320      	movs	r3, #32
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4861      	ldr	r0, [pc, #388]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000ae6:	f001 f947 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000aea:	2308      	movs	r3, #8
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000afa:	230d      	movs	r3, #13
 8000afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b02:	4619      	mov	r1, r3
 8000b04:	4859      	ldr	r0, [pc, #356]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000b06:	f001 f937 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000b0a:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	4854      	ldr	r0, [pc, #336]	@ (8000c74 <MX_GPIO_Init+0x608>)
 8000b24:	f001 f928 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	484f      	ldr	r0, [pc, #316]	@ (8000c7c <MX_GPIO_Init+0x610>)
 8000b3e:	f001 f91b 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4848      	ldr	r0, [pc, #288]	@ (8000c80 <MX_GPIO_Init+0x614>)
 8000b60:	f001 f90a 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b64:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b76:	230e      	movs	r3, #14
 8000b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483c      	ldr	r0, [pc, #240]	@ (8000c74 <MX_GPIO_Init+0x608>)
 8000b82:	f001 f8f9 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b86:	2308      	movs	r3, #8
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4836      	ldr	r0, [pc, #216]	@ (8000c78 <MX_GPIO_Init+0x60c>)
 8000b9e:	f001 f8eb 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bb4:	230d      	movs	r3, #13
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4829      	ldr	r0, [pc, #164]	@ (8000c64 <MX_GPIO_Init+0x5f8>)
 8000bc0:	f001 f8da 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4825      	ldr	r0, [pc, #148]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000bd8:	f001 f8ce 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bec:	230c      	movs	r3, #12
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481d      	ldr	r0, [pc, #116]	@ (8000c6c <MX_GPIO_Init+0x600>)
 8000bf8:	f001 f8be 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bfc:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	@ (8000c84 <MX_GPIO_Init+0x618>)
 8000c12:	f001 f8b1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <MX_GPIO_Init+0x618>)
 8000c30:	f001 f8a2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c34:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c46:	230d      	movs	r3, #13
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <MX_GPIO_Init+0x618>)
 8000c52:	f001 f891 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e016      	b.n	8000c88 <MX_GPIO_Init+0x61c>
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40021800 	.word	0x40021800
 8000c68:	40022400 	.word	0x40022400
 8000c6c:	40020c00 	.word	0x40020c00
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40022000 	.word	0x40022000
 8000c78:	40022800 	.word	0x40022800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40021400 	.word	0x40021400
 8000c84:	40021c00 	.word	0x40021c00
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	48a4      	ldr	r0, [pc, #656]	@ (8000f34 <MX_GPIO_Init+0x8c8>)
 8000ca2:	f001 f869 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000ca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	489e      	ldr	r0, [pc, #632]	@ (8000f34 <MX_GPIO_Init+0x8c8>)
 8000cbc:	f001 f85c 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4896      	ldr	r0, [pc, #600]	@ (8000f38 <MX_GPIO_Init+0x8cc>)
 8000cde:	f001 f84b 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	488e      	ldr	r0, [pc, #568]	@ (8000f34 <MX_GPIO_Init+0x8c8>)
 8000cfa:	f001 f83d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cfe:	23c0      	movs	r3, #192	@ 0xc0
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4888      	ldr	r0, [pc, #544]	@ (8000f3c <MX_GPIO_Init+0x8d0>)
 8000d1a:	f001 f82d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d2e:	230a      	movs	r3, #10
 8000d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4881      	ldr	r0, [pc, #516]	@ (8000f40 <MX_GPIO_Init+0x8d4>)
 8000d3a:	f001 f81d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d3e:	2328      	movs	r3, #40	@ 0x28
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4879      	ldr	r0, [pc, #484]	@ (8000f40 <MX_GPIO_Init+0x8d4>)
 8000d5a:	f001 f80d 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d5e:	23c8      	movs	r3, #200	@ 0xc8
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4873      	ldr	r0, [pc, #460]	@ (8000f44 <MX_GPIO_Init+0x8d8>)
 8000d76:	f000 ffff 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d7a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d80:	2303      	movs	r3, #3
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	486e      	ldr	r0, [pc, #440]	@ (8000f48 <MX_GPIO_Init+0x8dc>)
 8000d90:	f000 fff2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d94:	2308      	movs	r3, #8
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da4:	230c      	movs	r3, #12
 8000da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	4863      	ldr	r0, [pc, #396]	@ (8000f3c <MX_GPIO_Init+0x8d0>)
 8000db0:	f000 ffe2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000db4:	2305      	movs	r3, #5
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	485b      	ldr	r0, [pc, #364]	@ (8000f3c <MX_GPIO_Init+0x8d0>)
 8000dd0:	f000 ffd2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dd4:	2332      	movs	r3, #50	@ 0x32
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4853      	ldr	r0, [pc, #332]	@ (8000f3c <MX_GPIO_Init+0x8d0>)
 8000df0:	f000 ffc2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df4:	2304      	movs	r3, #4
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e04:	2309      	movs	r3, #9
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	484f      	ldr	r0, [pc, #316]	@ (8000f4c <MX_GPIO_Init+0x8e0>)
 8000e10:	f000 ffb2 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e14:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e26:	2309      	movs	r3, #9
 8000e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4847      	ldr	r0, [pc, #284]	@ (8000f50 <MX_GPIO_Init+0x8e4>)
 8000e32:	f000 ffa1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e36:	2304      	movs	r3, #4
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e46:	4619      	mov	r1, r3
 8000e48:	483e      	ldr	r0, [pc, #248]	@ (8000f44 <MX_GPIO_Init+0x8d8>)
 8000e4a:	f000 ff95 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e4e:	2386      	movs	r3, #134	@ 0x86
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5e:	230b      	movs	r3, #11
 8000e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	4833      	ldr	r0, [pc, #204]	@ (8000f38 <MX_GPIO_Init+0x8cc>)
 8000e6a:	f000 ff85 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	482d      	ldr	r0, [pc, #180]	@ (8000f38 <MX_GPIO_Init+0x8cc>)
 8000e82:	f000 ff79 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e86:	2350      	movs	r3, #80	@ 0x50
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e96:	230d      	movs	r3, #13
 8000e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4825      	ldr	r0, [pc, #148]	@ (8000f38 <MX_GPIO_Init+0x8cc>)
 8000ea2:	f000 ff69 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ea6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <MX_GPIO_Init+0x8d4>)
 8000ec4:	f000 ff58 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ec8:	2328      	movs	r3, #40	@ 0x28
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4815      	ldr	r0, [pc, #84]	@ (8000f38 <MX_GPIO_Init+0x8cc>)
 8000ee4:	f000 ff48 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ee8:	2340      	movs	r3, #64	@ 0x40
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <MX_GPIO_Init+0x8d4>)
 8000f04:	f000 ff38 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f08:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f22:	4619      	mov	r1, r3
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <MX_GPIO_Init+0x8e0>)
 8000f26:	f000 ff27 	bl	8001d78 <HAL_GPIO_Init>

}
 8000f2a:	bf00      	nop
 8000f2c:	3740      	adds	r7, #64	@ 0x40
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40021c00 	.word	0x40021c00
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021400 	.word	0x40021400
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f5c:	1d39      	adds	r1, r7, #4
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <__io_putchar+0x20>)
 8000f66:	f002 f9ff 	bl	8003368 <HAL_UART_Transmit>
	return ch;
 8000f6a:	687b      	ldr	r3, [r7, #4]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000644 	.word	0x20000644

08000f78 <fonction>:
		vTaskDelay(pdMS_TO_TICKS(delay));
	}
}

int fonction(int argc, char ** argv)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000f82:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <fonction+0x1c>)
 8000f84:	f004 ff5c 	bl	8005e40 <puts>

	return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08006d70 	.word	0x08006d70

08000f98 <led_task>:

void led_task(void *pvParameters){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint32_t period = (uint32_t) pvParameters;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000fa4:	f003 ff42 	bl	8004e2c <xTaskGetTickCount>
 8000fa8:	60b8      	str	r0, [r7, #8]
	for (;;) {
		if (period == 0) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <led_task+0x24>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, GPIO_PIN_RESET); // LED éteinte
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <led_task+0x48>)
 8000fb6:	f001 f88b 	bl	80020d0 <HAL_GPIO_WritePin>
 8000fba:	e7f6      	b.n	8000faa <led_task+0x12>
		} else {
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <led_task+0x48>)
 8000fc0:	f001 f89f 	bl	8002102 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(period));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <led_task+0x4c>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	099b      	lsrs	r3, r3, #6
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fddc 	bl	8004b94 <vTaskDelay>
		if (period == 0) {
 8000fdc:	e7e5      	b.n	8000faa <led_task+0x12>
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <sh_led>:
		}
	}
}

int sh_led(int argc, char ** argv)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	dc10      	bgt.n	800101a <sh_led+0x32>
		int size;
		size = snprintf(h_shell.print_buffer, BUFFER_SIZE, "Mettre le temps en ms\r\n");
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80010ac <sh_led+0xc4>)
 8000ffa:	2128      	movs	r1, #40	@ 0x28
 8000ffc:	482c      	ldr	r0, [pc, #176]	@ (80010b0 <sh_led+0xc8>)
 8000ffe:	f004 ff27 	bl	8005e50 <sniprintf>
 8001002:	60f8      	str	r0, [r7, #12]
		h_shell.drv.transmit(h_shell.print_buffer, size);
 8001004:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <sh_led+0xcc>)
 8001006:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	b292      	uxth	r2, r2
 800100e:	4611      	mov	r1, r2
 8001010:	4827      	ldr	r0, [pc, #156]	@ (80010b0 <sh_led+0xc8>)
 8001012:	4798      	blx	r3
		return -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	e043      	b.n	80010a2 <sh_led+0xba>
	}

	uint32_t period = atoi(argv[2]);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3308      	adds	r3, #8
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fd6d 	bl	8005b00 <atoi>
 8001026:	4603      	mov	r3, r0
 8001028:	61fb      	str	r3, [r7, #28]

	if (xLedTaskHandle != NULL) {
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <sh_led+0xd0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <sh_led+0x5a>
		vTaskDelete(xLedTaskHandle);
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <sh_led+0xd0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fd1a 	bl	8004a70 <vTaskDelete>
		xLedTaskHandle = NULL;
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <sh_led+0xd0>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
	}

	BaseType_t ret = xTaskCreate(led_task, "LED_Task", STACK_SIZE, (void *) period, 1, &xLedTaskHandle);
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	4a1c      	ldr	r2, [pc, #112]	@ (80010b8 <sh_led+0xd0>)
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001050:	491a      	ldr	r1, [pc, #104]	@ (80010bc <sh_led+0xd4>)
 8001052:	481b      	ldr	r0, [pc, #108]	@ (80010c0 <sh_led+0xd8>)
 8001054:	f003 fbd3 	bl	80047fe <xTaskCreate>
 8001058:	61b8      	str	r0, [r7, #24]
	if (ret != pdPASS) {
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d010      	beq.n	8001082 <sh_led+0x9a>
		int size;
		size = snprintf(h_shell.print_buffer, BUFFER_SIZE, "Error: Failed to create LED task\r\n");
 8001060:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <sh_led+0xdc>)
 8001062:	2128      	movs	r1, #40	@ 0x28
 8001064:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <sh_led+0xc8>)
 8001066:	f004 fef3 	bl	8005e50 <sniprintf>
 800106a:	6138      	str	r0, [r7, #16]
		h_shell.drv.transmit(h_shell.print_buffer, size);
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <sh_led+0xcc>)
 800106e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	b292      	uxth	r2, r2
 8001076:	4611      	mov	r1, r2
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <sh_led+0xc8>)
 800107a:	4798      	blx	r3
		return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e00f      	b.n	80010a2 <sh_led+0xba>
	}

	int size;
	size = snprintf(h_shell.print_buffer, BUFFER_SIZE, "LED blinking with period %d ms\r\n", period);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <sh_led+0xe0>)
 8001086:	2128      	movs	r1, #40	@ 0x28
 8001088:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <sh_led+0xc8>)
 800108a:	f004 fee1 	bl	8005e50 <sniprintf>
 800108e:	6178      	str	r0, [r7, #20]
	h_shell.drv.transmit(h_shell.print_buffer, size);
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <sh_led+0xcc>)
 8001092:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	b292      	uxth	r2, r2
 800109a:	4611      	mov	r1, r2
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <sh_led+0xc8>)
 800109e:	4798      	blx	r3
	return 0;
 80010a0:	2300      	movs	r3, #0


}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08006d8c 	.word	0x08006d8c
 80010b0:	200005e4 	.word	0x200005e4
 80010b4:	200002e0 	.word	0x200002e0
 80010b8:	2000063c 	.word	0x2000063c
 80010bc:	08006da4 	.word	0x08006da4
 80010c0:	08000f99 	.word	0x08000f99
 80010c4:	08006db0 	.word	0x08006db0
 80010c8:	08006dd4 	.word	0x08006dd4

080010cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010d0:	f000 fc51 	bl	8001976 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010d4:	f000 f832 	bl	800113c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010d8:	f7ff fac8 	bl	800066c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80010dc:	f000 fb68 	bl	80017b0 <MX_USART1_UART_Init>
	//	configASSERT(pdPASS == ret);


	//vTaskStartScheduler();

	h_shell.drv.receive = drv_uart1_receive;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <main+0x54>)
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <main+0x58>)
 80010e4:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.transmit = drv_uart1_transmit;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <main+0x54>)
 80010ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001128 <main+0x5c>)
 80010ec:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

	shell_init(&h_shell);
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <main+0x54>)
 80010f2:	f000 f8d5 	bl	80012a0 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <main+0x60>)
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <main+0x64>)
 80010fa:	2166      	movs	r1, #102	@ 0x66
 80010fc:	4808      	ldr	r0, [pc, #32]	@ (8001120 <main+0x54>)
 80010fe:	f000 f911 	bl	8001324 <shell_add>
	shell_add(&h_shell, 'l', sh_led, "LED blink with period in ms");
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <main+0x68>)
 8001104:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <main+0x6c>)
 8001106:	216c      	movs	r1, #108	@ 0x6c
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <main+0x54>)
 800110a:	f000 f90b 	bl	8001324 <shell_add>
	shell_run(&h_shell);
 800110e:	4804      	ldr	r0, [pc, #16]	@ (8001120 <main+0x54>)
 8001110:	f000 f9b4 	bl	800147c <shell_run>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001114:	f7ff fa86 	bl	8000624 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001118:	f003 f9f0 	bl	80044fc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <main+0x50>
 8001120:	200002e0 	.word	0x200002e0
 8001124:	080005a1 	.word	0x080005a1
 8001128:	080005c9 	.word	0x080005c9
 800112c:	08006df8 	.word	0x08006df8
 8001130:	08000f79 	.word	0x08000f79
 8001134:	08006e10 	.word	0x08006e10
 8001138:	08000fe9 	.word	0x08000fe9

0800113c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	@ 0x50
 8001140:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	@ 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 ff8c 	bl	8006068 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a29      	ldr	r2, [pc, #164]	@ (800120c <SystemClock_Config+0xd0>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <SystemClock_Config+0xd0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <SystemClock_Config+0xd4>)
 800117e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <SystemClock_Config+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011a4:	2308      	movs	r3, #8
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 80011a8:	23d8      	movs	r3, #216	@ 0xd8
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 f80d 	bl	80021d8 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80011c4:	f000 f826 	bl	8001214 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c8:	f000 ffb6 	bl	8002138 <HAL_PWREx_EnableOverDrive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80011d2:	f000 f81f 	bl	8001214 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2107      	movs	r1, #7
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fa93 	bl	8002720 <HAL_RCC_ClockConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001200:	f000 f808 	bl	8001214 <Error_Handler>
	}
}
 8001204:	bf00      	nop
 8001206:	3750      	adds	r7, #80	@ 0x50
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <sh_help>:

#include "shell.h"

#include <stdio.h>

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e029      	b.n	8001286 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3304      	adds	r3, #4
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461c      	mov	r4, r3
 800124c:	68f9      	ldr	r1, [r7, #12]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	330c      	adds	r3, #12
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4623      	mov	r3, r4
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <sh_help+0x7c>)
 8001264:	2128      	movs	r1, #40	@ 0x28
 8001266:	f004 fdf3 	bl	8005e50 <sniprintf>
 800126a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	b289      	uxth	r1, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbd0      	blt.n	8001232 <sh_help+0x12>
	}

	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	08006e2c 	.word	0x08006e2c

080012a0 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	int size = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <shell_init+0x74>)
 80012ba:	2128      	movs	r1, #40	@ 0x28
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fdc7 	bl	8005e50 <sniprintf>
 80012c2:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80012d0:	68f9      	ldr	r1, [r7, #12]
 80012d2:	b289      	uxth	r1, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <shell_init+0x78>)
 80012e0:	2128      	movs	r1, #40	@ 0x28
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fdb4 	bl	8005e50 <sniprintf>
 80012e8:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80012f6:	68f9      	ldr	r1, [r7, #12]
 80012f8:	b289      	uxth	r1, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <shell_init+0x7c>)
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <shell_init+0x80>)
 8001302:	2168      	movs	r1, #104	@ 0x68
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f80d 	bl	8001324 <shell_add>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08006e38 	.word	0x08006e38
 8001318:	08006e60 	.word	0x08006e60
 800131c:	08006e84 	.word	0x08006e84
 8001320:	08001221 	.word	0x08001221

08001324 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	460b      	mov	r3, r1
 8001332:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b3f      	cmp	r3, #63	@ 0x3f
 800133a:	dc27      	bgt.n	800138c <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	7afa      	ldrb	r2, [r7, #11]
 8001350:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3308      	adds	r3, #8
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	330c      	adds	r3, #12
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]
		return 0;
 8001388:	2300      	movs	r3, #0
 800138a:	e001      	b.n	8001390 <shell_add+0x6c>
	}

	return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	@ 0x40
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013b2:	e041      	b.n	8001438 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	3304      	adds	r3, #4
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d131      	bne.n	8001432 <shell_exec+0x96>
			argc = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80013da:	e013      	b.n	8001404 <shell_exec+0x68>
				if(*p == ' ') {
 80013dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d10c      	bne.n	80013fe <shell_exec+0x62>
					*p = '\0';
 80013e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80013ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80013f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f2:	3201      	adds	r2, #1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3340      	adds	r3, #64	@ 0x40
 80013f8:	443b      	add	r3, r7
 80013fa:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80013fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001400:	3301      	adds	r3, #1
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
 8001404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <shell_exec+0x76>
 800140c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800140e:	2b07      	cmp	r3, #7
 8001410:	dde4      	ble.n	80013dc <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3308      	adds	r3, #8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	e01d      	b.n	800146e <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8001432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001434:	3301      	adds	r3, #1
 8001436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800143e:	429a      	cmp	r2, r3
 8001440:	dbb8      	blt.n	80013b4 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <shell_exec+0xdc>)
 800144e:	2128      	movs	r1, #40	@ 0x28
 8001450:	f004 fcfe 	bl	8005e50 <sniprintf>
 8001454:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001464:	b289      	uxth	r1, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4798      	blx	r3
	return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146e:	4618      	mov	r0, r3
 8001470:	3740      	adds	r7, #64	@ 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	08006e8c 	.word	0x08006e8c

0800147c <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001492:	2102      	movs	r1, #2
 8001494:	483a      	ldr	r0, [pc, #232]	@ (8001580 <shell_run+0x104>)
 8001496:	4798      	blx	r3
		reading = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]

		while(reading) {
 800149c:	e064      	b.n	8001568 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80014a4:	f107 020b 	add.w	r2, r7, #11
 80014a8:	2101      	movs	r1, #1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4798      	blx	r3
			int size;

			switch (c) {
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d036      	beq.n	8001522 <shell_run+0xa6>
 80014b4:	2b0d      	cmp	r3, #13
 80014b6:	d141      	bne.n	800153c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80014be:	4a31      	ldr	r2, [pc, #196]	@ (8001584 <shell_run+0x108>)
 80014c0:	2128      	movs	r1, #40	@ 0x28
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fcc4 	bl	8005e50 <sniprintf>
 80014c8:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80014d6:	68f9      	ldr	r1, [r7, #12]
 80014d8:	b289      	uxth	r1, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	613a      	str	r2, [r7, #16]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <shell_run+0x10c>)
 80014fc:	2128      	movs	r1, #40	@ 0x28
 80014fe:	f004 fca7 	bl	8005e50 <sniprintf>
 8001502:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8001510:	68f9      	ldr	r1, [r7, #12]
 8001512:	b289      	uxth	r1, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4798      	blx	r3
				reading = 0;        //exit read loop
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
				break;
 8001520:	e022      	b.n	8001568 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd1e      	ble.n	8001566 <shell_run+0xea>
					pos--;          //remove it in buffer
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	3b01      	subs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001534:	2103      	movs	r1, #3
 8001536:	4815      	ldr	r0, [pc, #84]	@ (800158c <shell_run+0x110>)
 8001538:	4798      	blx	r3
				}
				break;
 800153a:	e014      	b.n	8001566 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b27      	cmp	r3, #39	@ 0x27
 8001540:	dc12      	bgt.n	8001568 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8001548:	f107 020b 	add.w	r2, r7, #11
 800154c:	2101      	movs	r1, #1
 800154e:	4610      	mov	r0, r2
 8001550:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	613a      	str	r2, [r7, #16]
 8001558:	7af9      	ldrb	r1, [r7, #11]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	460a      	mov	r2, r1
 8001560:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8001564:	e000      	b.n	8001568 <shell_run+0xec>
				break;
 8001566:	bf00      	nop
		while(reading) {
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d197      	bne.n	800149e <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff10 	bl	800139c <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800157c:	e786      	b.n	800148c <shell_run+0x10>
 800157e:	bf00      	nop
 8001580:	08006ebc 	.word	0x08006ebc
 8001584:	08006ea4 	.word	0x08006ea4
 8001588:	08006ea8 	.word	0x08006ea8
 800158c:	08006eb8 	.word	0x08006eb8

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_MspInit+0x4c>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210f      	movs	r1, #15
 80015ca:	f06f 0001 	mvn.w	r0, #1
 80015ce:	f000 fb0a 	bl	8001be6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 f9e9 	bl	80019f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800161e:	f003 fe07 	bl	8005230 <xTaskGetSchedulerState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d001      	beq.n	800162c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001628:	f004 f82e 	bl	8005688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <USART1_IRQHandler+0x10>)
 8001636:	f001 ffe9 	bl	800360c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000644 	.word	0x20000644

08001644 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
  }

  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e009      	b.n	80016a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fc5b 	bl	8000f54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf1      	blt.n	8001690 <_write+0x12>
  }
  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_close>:

int _close(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016de:	605a      	str	r2, [r3, #4]
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f004 fcd8 	bl	8006104 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20050000 	.word	0x20050000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000640 	.word	0x20000640
 8001788:	20004568 	.word	0x20004568

0800178c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	@ (800180c <MX_USART1_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_USART1_UART_Init+0x58>)
 80017f4:	f001 fd6a 	bl	80032cc <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f7ff fd09 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000644 	.word	0x20000644
 800180c:	40011000 	.word	0x40011000

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0ac      	sub	sp, #176	@ 0xb0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	2284      	movs	r2, #132	@ 0x84
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fc19 	bl	8006068 <memset>
  if(uartHandle->Instance==USART1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a36      	ldr	r2, [pc, #216]	@ (8001914 <HAL_UART_MspInit+0x104>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d164      	bne.n	800190a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001840:	2340      	movs	r3, #64	@ 0x40
 8001842:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001844:	2300      	movs	r3, #0
 8001846:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	4618      	mov	r0, r3
 800184e:	f001 f94d 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001858:	f7ff fcdc 	bl	8001214 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_UART_MspInit+0x108>)
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <HAL_UART_MspInit+0x108>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6453      	str	r3, [r2, #68]	@ 0x44
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_UART_MspInit+0x108>)
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_UART_MspInit+0x108>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <HAL_UART_MspInit+0x108>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <HAL_UART_MspInit+0x108>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <HAL_UART_MspInit+0x108>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	4a21      	ldr	r2, [pc, #132]	@ (8001918 <HAL_UART_MspInit+0x108>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6313      	str	r3, [r2, #48]	@ 0x30
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <HAL_UART_MspInit+0x108>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018bc:	2307      	movs	r3, #7
 80018be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c6:	4619      	mov	r1, r3
 80018c8:	4814      	ldr	r0, [pc, #80]	@ (800191c <HAL_UART_MspInit+0x10c>)
 80018ca:	f000 fa55 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018f2:	4619      	mov	r1, r3
 80018f4:	480a      	ldr	r0, [pc, #40]	@ (8001920 <HAL_UART_MspInit+0x110>)
 80018f6:	f000 fa3f 	bl	8001d78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2105      	movs	r1, #5
 80018fe:	2025      	movs	r0, #37	@ 0x25
 8001900:	f000 f971 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001904:	2025      	movs	r0, #37	@ 0x25
 8001906:	f000 f98a 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	37b0      	adds	r7, #176	@ 0xb0
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40011000 	.word	0x40011000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020400 	.word	0x40020400
 8001920:	40020000 	.word	0x40020000

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800195c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001928:	f7ff ff30 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	@ (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	@ (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001952:	f004 fbdd 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fbb9 	bl	80010cc <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800195c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001968:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 800196c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001970:	20004568 	.word	0x20004568

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>

08001976 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197a:	2003      	movs	r0, #3
 800197c:	f000 f928 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001980:	200f      	movs	r0, #15
 8001982:	f000 f805 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001986:	f7ff fe03 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f943 	bl	8001c3a <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 f90b 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	200006cc 	.word	0x200006cc

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200006cc 	.word	0x200006cc

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff feda 	bl	8001a18 <HAL_GetTick>
 8001c64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d008      	beq.n	8001c84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2280      	movs	r2, #128	@ 0x80
 8001c76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e052      	b.n	8001d2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0216 	bic.w	r2, r2, #22
 8001c92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <HAL_DMA_Abort+0x62>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	e013      	b.n	8001cfe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd6:	f7ff fe9f 	bl	8001a18 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d90c      	bls.n	8001cfe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e015      	b.n	8001d2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e4      	bne.n	8001cd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	223f      	movs	r2, #63	@ 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e00c      	b.n	8001d6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2205      	movs	r2, #5
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e175      	b.n	8002084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8164 	bne.w	800207e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x56>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80be 	beq.w	800207e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b66      	ldr	r3, [pc, #408]	@ (800209c <HAL_GPIO_Init+0x324>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	4a65      	ldr	r2, [pc, #404]	@ (800209c <HAL_GPIO_Init+0x324>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0e:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_GPIO_Init+0x324>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f1a:	4a61      	ldr	r2, [pc, #388]	@ (80020a0 <HAL_GPIO_Init+0x328>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d037      	beq.n	8001fb6 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a57      	ldr	r2, [pc, #348]	@ (80020a8 <HAL_GPIO_Init+0x330>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_GPIO_Init+0x334>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a55      	ldr	r2, [pc, #340]	@ (80020b0 <HAL_GPIO_Init+0x338>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a54      	ldr	r2, [pc, #336]	@ (80020b4 <HAL_GPIO_Init+0x33c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	@ (80020b8 <HAL_GPIO_Init+0x340>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_GPIO_Init+0x344>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	@ (80020c0 <HAL_GPIO_Init+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	@ (80020c4 <HAL_GPIO_Init+0x34c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	@ (80020c8 <HAL_GPIO_Init+0x350>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f8e:	2309      	movs	r3, #9
 8001f90:	e012      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f92:	230a      	movs	r3, #10
 8001f94:	e010      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00e      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00c      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	e00a      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x240>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	@ (80020a0 <HAL_GPIO_Init+0x328>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a34      	ldr	r2, [pc, #208]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a29      	ldr	r2, [pc, #164]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_GPIO_Init+0x354>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <HAL_GPIO_Init+0x354>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <HAL_GPIO_Init+0x354>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f ae86 	bls.w	8001d98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022400 	.word	0x40022400
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a22      	ldr	r2, [pc, #136]	@ (80021d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002166:	f7ff fc57 	bl	8001a18 <HAL_GetTick>
 800216a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800216c:	e009      	b.n	8002182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800216e:	f7ff fc53 	bl	8001a18 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800217c:	d901      	bls.n	8002182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e022      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218e:	d1ee      	bne.n	800216e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0f      	ldr	r2, [pc, #60]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff fc3c 	bl	8001a18 <HAL_GetTick>
 80021a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a2:	e009      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021a4:	f7ff fc38 	bl	8001a18 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021b2:	d901      	bls.n	80021b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e007      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021c4:	d1ee      	bne.n	80021a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e291      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021fc:	4b96      	ldr	r3, [pc, #600]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b04      	cmp	r3, #4
 8002206:	d00c      	beq.n	8002222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002208:	4b93      	ldr	r3, [pc, #588]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d112      	bne.n	800223a <HAL_RCC_OscConfig+0x62>
 8002214:	4b90      	ldr	r3, [pc, #576]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800221c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002220:	d10b      	bne.n	800223a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	4b8d      	ldr	r3, [pc, #564]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06c      	beq.n	8002308 <HAL_RCC_OscConfig+0x130>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d168      	bne.n	8002308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e26b      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x7a>
 8002244:	4b84      	ldr	r3, [pc, #528]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a83      	ldr	r2, [pc, #524]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800224a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	e02e      	b.n	80022b0 <HAL_RCC_OscConfig+0xd8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x9c>
 800225a:	4b7f      	ldr	r3, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b7c      	ldr	r3, [pc, #496]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7b      	ldr	r2, [pc, #492]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800226c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xd8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0xc0>
 800227e:	4b76      	ldr	r3, [pc, #472]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a75      	ldr	r2, [pc, #468]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b73      	ldr	r3, [pc, #460]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a72      	ldr	r2, [pc, #456]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xd8>
 8002298:	4b6f      	ldr	r3, [pc, #444]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6e      	ldr	r2, [pc, #440]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fbae 	bl	8001a18 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fbaa 	bl	8001a18 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e21f      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b61      	ldr	r3, [pc, #388]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb9a 	bl	8001a18 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fb96 	bl	8001a18 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e20b      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x110>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d069      	beq.n	80023ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002316:	4b50      	ldr	r3, [pc, #320]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x190>
 800232e:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x17a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1df      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	493d      	ldr	r1, [pc, #244]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e040      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d023      	beq.n	80023b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b39      	ldr	r3, [pc, #228]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fb4c 	bl	8001a18 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fb48 	bl	8001a18 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1bd      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4929      	ldr	r1, [pc, #164]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb28 	bl	8001a18 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023cc:	f7ff fb24 	bl	8001a18 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e199      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d038      	beq.n	8002468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002402:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7ff fb05 	bl	8001a18 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7ff fb01 	bl	8001a18 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e176      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x23a>
 8002430:	e01a      	b.n	8002468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_RCC_OscConfig+0x280>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7ff faeb 	bl	8001a18 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002446:	f7ff fae7 	bl	8001a18 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d903      	bls.n	800245c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e15c      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
 8002458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	4b91      	ldr	r3, [pc, #580]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80a4 	beq.w	80025be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b8b      	ldr	r3, [pc, #556]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a87      	ldr	r2, [pc, #540]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b85      	ldr	r3, [pc, #532]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024aa:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7e      	ldr	r2, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff faaf 	bl	8001a18 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff faab 	bl	8001a18 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	@ 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e120      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d0:	4b75      	ldr	r3, [pc, #468]	@ (80026a8 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x31a>
 80024e4:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	4a6e      	ldr	r2, [pc, #440]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f0:	e02d      	b.n	800254e <HAL_RCC_OscConfig+0x376>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x33c>
 80024fa:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	4a69      	ldr	r2, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	@ 0x70
 8002506:	4b67      	ldr	r3, [pc, #412]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	4a66      	ldr	r2, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6713      	str	r3, [r2, #112]	@ 0x70
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x376>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x35e>
 800251c:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	4a60      	ldr	r2, [pc, #384]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6713      	str	r3, [r2, #112]	@ 0x70
 8002528:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	4a5d      	ldr	r2, [pc, #372]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	@ 0x70
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x376>
 8002536:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a5a      	ldr	r2, [pc, #360]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
 8002542:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	4a57      	ldr	r2, [pc, #348]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff fa5f 	bl	8001a18 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff fa5b 	bl	8001a18 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ce      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b4b      	ldr	r3, [pc, #300]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x386>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7ff fa49 	bl	8001a18 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff fa45 	bl	8001a18 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b3c      	ldr	r3, [pc, #240]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a3b      	ldr	r2, [pc, #236]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a4 	beq.w	8002710 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d06b      	beq.n	80026ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d149      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a30      	ldr	r2, [pc, #192]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa16 	bl	8001a18 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff fa12 	bl	8001a18 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e087      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	4313      	orrs	r3, r2
 8002634:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800263a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f9e6 	bl	8001a18 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff f9e2 	bl	8001a18 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e057      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x478>
 800266e:	e04f      	b.n	8002710 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0b      	ldr	r2, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f9cc 	bl	8001a18 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7ff f9c8 	bl	8001a18 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e03d      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x4ac>
 80026a2:	e035      	b.n	8002710 <HAL_RCC_OscConfig+0x538>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x544>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d028      	beq.n	800270c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d121      	bne.n	800270c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d0      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b67      	ldr	r3, [pc, #412]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 020f 	bic.w	r2, r3, #15
 800274e:	4965      	ldr	r1, [pc, #404]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d040      	beq.n	8002844 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d115      	bne.n	8002802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e2:	4b41      	ldr	r3, [pc, #260]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e073      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	4b3d      	ldr	r3, [pc, #244]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06b      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b39      	ldr	r3, [pc, #228]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4936      	ldr	r1, [pc, #216]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002814:	f7ff f900 	bl	8001a18 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7ff f8fc 	bl	8001a18 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e053      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b2d      	ldr	r3, [pc, #180]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d210      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 020f 	bic.w	r2, r3, #15
 800285a:	4922      	ldr	r1, [pc, #136]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	@ (80028ec <HAL_RCC_ClockConfig+0x1cc>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1d0>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_ClockConfig+0x1d4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f85c 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08006ec0 	.word	0x08006ec0
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b090      	sub	sp, #64	@ 0x40
 80028fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002910:	4b59      	ldr	r3, [pc, #356]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d00d      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x40>
 800291c:	2b08      	cmp	r3, #8
 800291e:	f200 80a1 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x34>
 8002926:	2b04      	cmp	r3, #4
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x3a>
 800292a:	e09b      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b53      	ldr	r3, [pc, #332]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002930:	e09b      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002932:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002934:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002936:	e098      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b4f      	ldr	r3, [pc, #316]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002940:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002942:	4b4d      	ldr	r3, [pc, #308]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d028      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	2200      	movs	r2, #0
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	627a      	str	r2, [r7, #36]	@ 0x24
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002960:	2100      	movs	r1, #0
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002964:	fb03 f201 	mul.w	r2, r3, r1
 8002968:	2300      	movs	r3, #0
 800296a:	fb00 f303 	mul.w	r3, r0, r3
 800296e:	4413      	add	r3, r2
 8002970:	4a43      	ldr	r2, [pc, #268]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002972:	fba0 1202 	umull	r1, r2, r0, r2
 8002976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002978:	460a      	mov	r2, r1
 800297a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800297c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800297e:	4413      	add	r3, r2
 8002980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002984:	2200      	movs	r2, #0
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	61fa      	str	r2, [r7, #28]
 800298a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002992:	f7fd fc8d 	bl	80002b0 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4613      	mov	r3, r2
 800299c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800299e:	e053      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	617a      	str	r2, [r7, #20]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029b2:	f04f 0b00 	mov.w	fp, #0
 80029b6:	4652      	mov	r2, sl
 80029b8:	465b      	mov	r3, fp
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ebb2 080a 	subs.w	r8, r2, sl
 80029d2:	eb63 090b 	sbc.w	r9, r3, fp
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ea:	ebb2 0408 	subs.w	r4, r2, r8
 80029ee:	eb63 0509 	sbc.w	r5, r3, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	00eb      	lsls	r3, r5, #3
 80029fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a00:	00e2      	lsls	r2, r4, #3
 8002a02:	4614      	mov	r4, r2
 8002a04:	461d      	mov	r5, r3
 8002a06:	eb14 030a 	adds.w	r3, r4, sl
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	eb45 030b 	adc.w	r3, r5, fp
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	028b      	lsls	r3, r1, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a28:	4621      	mov	r1, r4
 8002a2a:	028a      	lsls	r2, r1, #10
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3c:	f7fd fc38 	bl	80002b0 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3740      	adds	r7, #64	@ 0x40
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	017d7840 	.word	0x017d7840

08002a84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08006ed0 	.word	0x08006ed0

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08006ed0 	.word	0x08006ed0

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b14:	4b69      	ldr	r3, [pc, #420]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a68      	ldr	r2, [pc, #416]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	4b66      	ldr	r3, [pc, #408]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	4964      	ldr	r1, [pc, #400]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d017      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b46:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	4959      	ldr	r1, [pc, #356]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b82:	4b4e      	ldr	r3, [pc, #312]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	494a      	ldr	r1, [pc, #296]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 808b 	beq.w	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a39      	ldr	r2, [pc, #228]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bdc:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be8:	4b35      	ldr	r3, [pc, #212]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a34      	ldr	r2, [pc, #208]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf4:	f7fe ff10 	bl	8001a18 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe ff0c 	bl	8001a18 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e357      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d035      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d02e      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c42:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d114      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fed4 	bl	8001a18 <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe fed0 	bl	8001a18 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e319      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	4901      	ldr	r1, [pc, #4]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	0ffffcff 	.word	0x0ffffcff
 8002cc8:	4baa      	ldr	r3, [pc, #680]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4aa9      	ldr	r2, [pc, #676]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	4ba7      	ldr	r3, [pc, #668]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	49a4      	ldr	r1, [pc, #656]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cf2:	4ba0      	ldr	r3, [pc, #640]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf8:	4a9e      	ldr	r2, [pc, #632]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d02:	4b9c      	ldr	r3, [pc, #624]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	4999      	ldr	r1, [pc, #612]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d20:	4b94      	ldr	r3, [pc, #592]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d2e:	4991      	ldr	r1, [pc, #580]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d42:	4b8c      	ldr	r3, [pc, #560]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d50:	4988      	ldr	r1, [pc, #544]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d64:	4b83      	ldr	r3, [pc, #524]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d72:	4980      	ldr	r1, [pc, #512]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d86:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4977      	ldr	r1, [pc, #476]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da8:	4b72      	ldr	r3, [pc, #456]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	496f      	ldr	r1, [pc, #444]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dca:	4b6a      	ldr	r3, [pc, #424]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f023 020c 	bic.w	r2, r3, #12
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd8:	4966      	ldr	r1, [pc, #408]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dec:	4b61      	ldr	r3, [pc, #388]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	495e      	ldr	r1, [pc, #376]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0e:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e14:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1c:	4955      	ldr	r1, [pc, #340]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	494d      	ldr	r1, [pc, #308]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e52:	4b48      	ldr	r3, [pc, #288]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	4944      	ldr	r1, [pc, #272]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e74:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	493c      	ldr	r1, [pc, #240]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e96:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea4:	4933      	ldr	r1, [pc, #204]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ec6:	492b      	ldr	r1, [pc, #172]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eda:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee8:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f28:	4912      	ldr	r1, [pc, #72]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f4c:	4909      	ldr	r1, [pc, #36]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d006      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80d9 	beq.w	800311a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f68:	4b02      	ldr	r3, [pc, #8]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a01      	ldr	r2, [pc, #4]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f72:	e001      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fe fd4d 	bl	8001a18 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f82:	f7fe fd49 	bl	8001a18 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	@ 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e194      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f94:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb4:	4b64      	ldr	r3, [pc, #400]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fc2:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc8:	0e1b      	lsrs	r3, r3, #24
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	019a      	lsls	r2, r3, #6
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	071b      	lsls	r3, r3, #28
 8002fe8:	4957      	ldr	r1, [pc, #348]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02e      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301a:	d129      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301c:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003022:	0c1b      	lsrs	r3, r3, #16
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800302a:	4b47      	ldr	r3, [pc, #284]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003030:	0f1b      	lsrs	r3, r3, #28
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	019a      	lsls	r2, r3, #6
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	071b      	lsls	r3, r3, #28
 8003050:	493d      	ldr	r1, [pc, #244]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003058:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305e:	f023 021f 	bic.w	r2, r3, #31
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	3b01      	subs	r3, #1
 8003068:	4937      	ldr	r1, [pc, #220]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01d      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800307c:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003082:	0e1b      	lsrs	r3, r3, #24
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800308a:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003090:	0f1b      	lsrs	r3, r3, #28
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	019a      	lsls	r2, r3, #6
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	071b      	lsls	r3, r3, #28
 80030b0:	4925      	ldr	r1, [pc, #148]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d011      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	019a      	lsls	r2, r3, #6
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	071b      	lsls	r3, r3, #28
 80030e0:	4919      	ldr	r1, [pc, #100]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030e8:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe fc90 	bl	8001a18 <HAL_GetTick>
 80030f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030fc:	f7fe fc8c 	bl	8001a18 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	@ 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0d7      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	f040 80cd 	bne.w	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a08      	ldr	r2, [pc, #32]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312e:	f7fe fc73 	bl	8001a18 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003136:	f7fe fc6f 	bl	8001a18 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	@ 0x64
 8003142:	d903      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0ba      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314c:	4b5e      	ldr	r3, [pc, #376]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003158:	d0ed      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02e      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d12a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003190:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003196:	0f1b      	lsrs	r3, r3, #28
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	019a      	lsls	r2, r3, #6
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	4944      	ldr	r1, [pc, #272]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031be:	4b42      	ldr	r3, [pc, #264]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	493d      	ldr	r1, [pc, #244]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d022      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ec:	d11d      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ee:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	0f1b      	lsrs	r3, r3, #28
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4929      	ldr	r1, [pc, #164]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	0e1b      	lsrs	r3, r3, #24
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003244:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	019a      	lsls	r2, r3, #6
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	4917      	ldr	r1, [pc, #92]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003278:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	4911      	ldr	r1, [pc, #68]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003288:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0e      	ldr	r2, [pc, #56]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fe fbc0 	bl	8001a18 <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800329c:	f7fe fbbc 	bl	8001a18 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e007      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ba:	d1ef      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e040      	b.n	8003360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe fa8e 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	@ 0x24
 80032f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fed0 	bl	80040b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fc69 	bl	8003bf0 <UART_SetConfig>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e01b      	b.n	8003360 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 ff4f 	bl	80041fc <UART_CheckIdleState>
 800335e:	4603      	mov	r3, r0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800337c:	2b20      	cmp	r3, #32
 800337e:	d177      	bne.n	8003470 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_UART_Transmit+0x24>
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e070      	b.n	8003472 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	@ 0x21
 800339c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fe fb3b 	bl	8001a18 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033bc:	d108      	bne.n	80033d0 <HAL_UART_Transmit+0x68>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e003      	b.n	80033d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d8:	e02f      	b.n	800343a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 ff60 	bl	80042aa <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e03b      	b.n	8003472 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10b      	bne.n	8003418 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	3302      	adds	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e007      	b.n	8003428 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1c9      	bne.n	80033da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	@ 0x40
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 ff2a 	bl	80042aa <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e005      	b.n	8003472 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08a      	sub	sp, #40	@ 0x28
 800347e:	af02      	add	r7, sp, #8
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003490:	2b20      	cmp	r3, #32
 8003492:	f040 80b5 	bne.w	8003600 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_UART_Receive+0x28>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0ad      	b.n	8003602 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2222      	movs	r2, #34	@ 0x22
 80034b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034bc:	f7fe faac 	bl	8001a18 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034da:	d10e      	bne.n	80034fa <HAL_UART_Receive+0x80>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_UART_Receive+0x76>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034ee:	e02d      	b.n	800354c <HAL_UART_Receive+0xd2>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	22ff      	movs	r2, #255	@ 0xff
 80034f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034f8:	e028      	b.n	800354c <HAL_UART_Receive+0xd2>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_UART_Receive+0xa4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Receive+0x9a>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22ff      	movs	r2, #255	@ 0xff
 800350e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003512:	e01b      	b.n	800354c <HAL_UART_Receive+0xd2>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	227f      	movs	r2, #127	@ 0x7f
 8003518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800351c:	e016      	b.n	800354c <HAL_UART_Receive+0xd2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003526:	d10d      	bne.n	8003544 <HAL_UART_Receive+0xca>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_UART_Receive+0xc0>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	227f      	movs	r2, #127	@ 0x7f
 8003534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003538:	e008      	b.n	800354c <HAL_UART_Receive+0xd2>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	223f      	movs	r2, #63	@ 0x3f
 800353e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003542:	e003      	b.n	800354c <HAL_UART_Receive+0xd2>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003552:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355c:	d108      	bne.n	8003570 <HAL_UART_Receive+0xf6>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e003      	b.n	8003578 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003578:	e036      	b.n	80035e8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2120      	movs	r1, #32
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fe90 	bl	80042aa <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e032      	b.n	8003602 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	8a7b      	ldrh	r3, [r7, #18]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	3302      	adds	r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e00c      	b.n	80035d6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	8a7b      	ldrh	r3, [r7, #18]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4013      	ands	r3, r2
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1c2      	bne.n	800357a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0ba      	sub	sp, #232	@ 0xe8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800363a:	4013      	ands	r3, r2
 800363c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00f      	beq.n	8003674 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8297 	beq.w	8003b98 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
      }
      return;
 8003672:	e291      	b.n	8003b98 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8117 	beq.w	80038ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800367e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800368a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800368e:	4b85      	ldr	r3, [pc, #532]	@ (80038a4 <HAL_UART_IRQHandler+0x298>)
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 810a 	beq.w	80038ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d011      	beq.n	80036c8 <HAL_UART_IRQHandler+0xbc>
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d011      	beq.n	80036f8 <HAL_UART_IRQHandler+0xec>
 80036d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2202      	movs	r2, #2
 80036e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ee:	f043 0204 	orr.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d011      	beq.n	8003728 <HAL_UART_IRQHandler+0x11c>
 8003704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2204      	movs	r2, #4
 8003716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d017      	beq.n	8003764 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2208      	movs	r2, #8
 8003752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375a:	f043 0208 	orr.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <HAL_UART_IRQHandler+0x18a>
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00c      	beq.n	8003796 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 81fd 	beq.w	8003b9c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d04f      	beq.n	800388e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fdc8 	bl	8004384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d141      	bne.n	8003886 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3308      	adds	r3, #8
 8003808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800381c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3308      	adds	r3, #8
 800382a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800382e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800383a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1d9      	bne.n	8003802 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003852:	2b00      	cmp	r3, #0
 8003854:	d013      	beq.n	800387e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	4a13      	ldr	r2, [pc, #76]	@ (80038a8 <HAL_UART_IRQHandler+0x29c>)
 800385c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fa65 	bl	8001d32 <HAL_DMA_Abort_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	e00f      	b.n	800389e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9a0 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	e00b      	b.n	800389e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f99c 	bl	8003bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	e007      	b.n	800389e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f998 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800389c:	e17e      	b.n	8003b9c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	bf00      	nop
    return;
 80038a0:	e17c      	b.n	8003b9c <HAL_UART_IRQHandler+0x590>
 80038a2:	bf00      	nop
 80038a4:	04000120 	.word	0x04000120
 80038a8:	0800444d 	.word	0x0800444d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	f040 814c 	bne.w	8003b4e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8145 	beq.w	8003b4e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 813e 	beq.w	8003b4e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2210      	movs	r2, #16
 80038d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	f040 80b6 	bne.w	8003a56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8150 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800390a:	429a      	cmp	r2, r3
 800390c:	f080 8148 	bcs.w	8003ba0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003924:	f000 8086 	beq.w	8003a34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800393c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800395e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800396a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1da      	bne.n	8003928 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3308      	adds	r3, #8
 8003978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3308      	adds	r3, #8
 8003992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800399a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800399e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e1      	bne.n	8003972 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3308      	adds	r3, #8
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3308      	adds	r3, #8
 80039ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e3      	bne.n	80039ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a04:	f023 0310 	bic.w	r3, r3, #16
 8003a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e4      	bne.n	80039f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe f90f 	bl	8001c52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8c2 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a54:	e0a4      	b.n	8003ba0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8096 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8091 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e4      	bne.n	8003a82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3308      	adds	r3, #8
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003adc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e3      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f023 0310 	bic.w	r3, r3, #16
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	617b      	str	r3, [r7, #20]
   return(result);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e4      	bne.n	8003b04 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f846 	bl	8003bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b4c:	e02a      	b.n	8003ba4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01c      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
    }
    return;
 8003b76:	e017      	b.n	8003ba8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_UART_IRQHandler+0x59e>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fc71 	bl	8004478 <UART_EndTransmit_IT>
    return;
 8003b96:	e008      	b.n	8003baa <HAL_UART_IRQHandler+0x59e>
      return;
 8003b98:	bf00      	nop
 8003b9a:	e006      	b.n	8003baa <HAL_UART_IRQHandler+0x59e>
    return;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <HAL_UART_IRQHandler+0x59e>
      return;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_UART_IRQHandler+0x59e>
      return;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_UART_IRQHandler+0x59e>
    return;
 8003ba8:	bf00      	nop
  }

}
 8003baa:	37e8      	adds	r7, #232	@ 0xe8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4ba6      	ldr	r3, [pc, #664]	@ (8003eb4 <UART_SetConfig+0x2c4>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6979      	ldr	r1, [r7, #20]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a94      	ldr	r2, [pc, #592]	@ (8003eb8 <UART_SetConfig+0x2c8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d120      	bne.n	8003cae <UART_SetConfig+0xbe>
 8003c6c:	4b93      	ldr	r3, [pc, #588]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d816      	bhi.n	8003ca8 <UART_SetConfig+0xb8>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <UART_SetConfig+0x90>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003c9d 	.word	0x08003c9d
 8003c88:	08003c97 	.word	0x08003c97
 8003c8c:	08003ca3 	.word	0x08003ca3
 8003c90:	2301      	movs	r3, #1
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e150      	b.n	8003f38 <UART_SetConfig+0x348>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e14d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e14a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e147      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e144      	b.n	8003f38 <UART_SetConfig+0x348>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a83      	ldr	r2, [pc, #524]	@ (8003ec0 <UART_SetConfig+0x2d0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d132      	bne.n	8003d1e <UART_SetConfig+0x12e>
 8003cb8:	4b80      	ldr	r3, [pc, #512]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d828      	bhi.n	8003d18 <UART_SetConfig+0x128>
 8003cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <UART_SetConfig+0xdc>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d19 	.word	0x08003d19
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003d19 	.word	0x08003d19
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d07 	.word	0x08003d07
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d19 	.word	0x08003d19
 8003cfc:	08003d13 	.word	0x08003d13
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e118      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d06:	2302      	movs	r3, #2
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e115      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e112      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d12:	2308      	movs	r3, #8
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e10f      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e10c      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d120      	bne.n	8003d6a <UART_SetConfig+0x17a>
 8003d28:	4b64      	ldr	r3, [pc, #400]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d32:	2b30      	cmp	r3, #48	@ 0x30
 8003d34:	d013      	beq.n	8003d5e <UART_SetConfig+0x16e>
 8003d36:	2b30      	cmp	r3, #48	@ 0x30
 8003d38:	d814      	bhi.n	8003d64 <UART_SetConfig+0x174>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d009      	beq.n	8003d52 <UART_SetConfig+0x162>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d810      	bhi.n	8003d64 <UART_SetConfig+0x174>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x15c>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d006      	beq.n	8003d58 <UART_SetConfig+0x168>
 8003d4a:	e00b      	b.n	8003d64 <UART_SetConfig+0x174>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0f2      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0ef      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e0ec      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e0e9      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e0e6      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a56      	ldr	r2, [pc, #344]	@ (8003ec8 <UART_SetConfig+0x2d8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d120      	bne.n	8003db6 <UART_SetConfig+0x1c6>
 8003d74:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d80:	d013      	beq.n	8003daa <UART_SetConfig+0x1ba>
 8003d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d84:	d814      	bhi.n	8003db0 <UART_SetConfig+0x1c0>
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d009      	beq.n	8003d9e <UART_SetConfig+0x1ae>
 8003d8a:	2b80      	cmp	r3, #128	@ 0x80
 8003d8c:	d810      	bhi.n	8003db0 <UART_SetConfig+0x1c0>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <UART_SetConfig+0x1a8>
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d006      	beq.n	8003da4 <UART_SetConfig+0x1b4>
 8003d96:	e00b      	b.n	8003db0 <UART_SetConfig+0x1c0>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0cc      	b.n	8003f38 <UART_SetConfig+0x348>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e0c9      	b.n	8003f38 <UART_SetConfig+0x348>
 8003da4:	2304      	movs	r3, #4
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e0c6      	b.n	8003f38 <UART_SetConfig+0x348>
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e0c3      	b.n	8003f38 <UART_SetConfig+0x348>
 8003db0:	2310      	movs	r3, #16
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e0c0      	b.n	8003f38 <UART_SetConfig+0x348>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a44      	ldr	r2, [pc, #272]	@ (8003ecc <UART_SetConfig+0x2dc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d125      	bne.n	8003e0c <UART_SetConfig+0x21c>
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dce:	d017      	beq.n	8003e00 <UART_SetConfig+0x210>
 8003dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd4:	d817      	bhi.n	8003e06 <UART_SetConfig+0x216>
 8003dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dda:	d00b      	beq.n	8003df4 <UART_SetConfig+0x204>
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de0:	d811      	bhi.n	8003e06 <UART_SetConfig+0x216>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <UART_SetConfig+0x1fe>
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d006      	beq.n	8003dfa <UART_SetConfig+0x20a>
 8003dec:	e00b      	b.n	8003e06 <UART_SetConfig+0x216>
 8003dee:	2300      	movs	r3, #0
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e0a1      	b.n	8003f38 <UART_SetConfig+0x348>
 8003df4:	2302      	movs	r3, #2
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e09e      	b.n	8003f38 <UART_SetConfig+0x348>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e09b      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e00:	2308      	movs	r3, #8
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e098      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e06:	2310      	movs	r3, #16
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e095      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed0 <UART_SetConfig+0x2e0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d125      	bne.n	8003e62 <UART_SetConfig+0x272>
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e24:	d017      	beq.n	8003e56 <UART_SetConfig+0x266>
 8003e26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2a:	d817      	bhi.n	8003e5c <UART_SetConfig+0x26c>
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e30:	d00b      	beq.n	8003e4a <UART_SetConfig+0x25a>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e36:	d811      	bhi.n	8003e5c <UART_SetConfig+0x26c>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <UART_SetConfig+0x254>
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e40:	d006      	beq.n	8003e50 <UART_SetConfig+0x260>
 8003e42:	e00b      	b.n	8003e5c <UART_SetConfig+0x26c>
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e076      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e073      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e50:	2304      	movs	r3, #4
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e070      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e56:	2308      	movs	r3, #8
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e06d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e06a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed4 <UART_SetConfig+0x2e4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d138      	bne.n	8003ede <UART_SetConfig+0x2ee>
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e7a:	d017      	beq.n	8003eac <UART_SetConfig+0x2bc>
 8003e7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e80:	d82a      	bhi.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e86:	d00b      	beq.n	8003ea0 <UART_SetConfig+0x2b0>
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8c:	d824      	bhi.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <UART_SetConfig+0x2aa>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e96:	d006      	beq.n	8003ea6 <UART_SetConfig+0x2b6>
 8003e98:	e01e      	b.n	8003ed8 <UART_SetConfig+0x2e8>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e04b      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e048      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e045      	b.n	8003f38 <UART_SetConfig+0x348>
 8003eac:	2308      	movs	r3, #8
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e042      	b.n	8003f38 <UART_SetConfig+0x348>
 8003eb2:	bf00      	nop
 8003eb4:	efff69f3 	.word	0xefff69f3
 8003eb8:	40011000 	.word	0x40011000
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40004400 	.word	0x40004400
 8003ec4:	40004800 	.word	0x40004800
 8003ec8:	40004c00 	.word	0x40004c00
 8003ecc:	40005000 	.word	0x40005000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40007800 	.word	0x40007800
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e02c      	b.n	8003f38 <UART_SetConfig+0x348>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a72      	ldr	r2, [pc, #456]	@ (80040ac <UART_SetConfig+0x4bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d125      	bne.n	8003f34 <UART_SetConfig+0x344>
 8003ee8:	4b71      	ldr	r3, [pc, #452]	@ (80040b0 <UART_SetConfig+0x4c0>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ef6:	d017      	beq.n	8003f28 <UART_SetConfig+0x338>
 8003ef8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003efc:	d817      	bhi.n	8003f2e <UART_SetConfig+0x33e>
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f02:	d00b      	beq.n	8003f1c <UART_SetConfig+0x32c>
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f08:	d811      	bhi.n	8003f2e <UART_SetConfig+0x33e>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <UART_SetConfig+0x326>
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f12:	d006      	beq.n	8003f22 <UART_SetConfig+0x332>
 8003f14:	e00b      	b.n	8003f2e <UART_SetConfig+0x33e>
 8003f16:	2300      	movs	r3, #0
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e00d      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e00a      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f22:	2304      	movs	r3, #4
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e007      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f2e:	2310      	movs	r3, #16
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e001      	b.n	8003f38 <UART_SetConfig+0x348>
 8003f34:	2310      	movs	r3, #16
 8003f36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f40:	d15b      	bne.n	8003ffa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d828      	bhi.n	8003f9a <UART_SetConfig+0x3aa>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <UART_SetConfig+0x360>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f9b 	.word	0x08003f9b
 8003f68:	08003f9b 	.word	0x08003f9b
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	08003f93 	.word	0x08003f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7fe fd92 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003f78:	61b8      	str	r0, [r7, #24]
        break;
 8003f7a:	e013      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7fe fda2 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f84:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <UART_SetConfig+0x4c4>)
 8003f86:	61bb      	str	r3, [r7, #24]
        break;
 8003f88:	e00c      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe fcb5 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 8003f8e:	61b8      	str	r0, [r7, #24]
        break;
 8003f90:	e008      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f96:	61bb      	str	r3, [r7, #24]
        break;
 8003f98:	e004      	b.n	8003fa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d074      	beq.n	8004094 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	005a      	lsls	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d916      	bls.n	8003ff4 <UART_SetConfig+0x404>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fcc:	d212      	bcs.n	8003ff4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f023 030f 	bic.w	r3, r3, #15
 8003fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	89fa      	ldrh	r2, [r7, #14]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	e04f      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77bb      	strb	r3, [r7, #30]
 8003ff8:	e04c      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d828      	bhi.n	8004052 <UART_SetConfig+0x462>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <UART_SetConfig+0x418>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004035 	.word	0x08004035
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004053 	.word	0x08004053
 8004018:	08004043 	.word	0x08004043
 800401c:	08004053 	.word	0x08004053
 8004020:	08004053 	.word	0x08004053
 8004024:	08004053 	.word	0x08004053
 8004028:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe fd36 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8004030:	61b8      	str	r0, [r7, #24]
        break;
 8004032:	e013      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fd46 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e00f      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <UART_SetConfig+0x4c4>)
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e00c      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe fc59 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 8004046:	61b8      	str	r0, [r7, #24]
        break;
 8004048:	e008      	b.n	800405c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404e:	61bb      	str	r3, [r7, #24]
        break;
 8004050:	e004      	b.n	800405c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	77bb      	strb	r3, [r7, #30]
        break;
 800405a:	bf00      	nop
    }

    if (pclk != 0U)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085a      	lsrs	r2, r3, #1
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d909      	bls.n	8004090 <UART_SetConfig+0x4a0>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004082:	d205      	bcs.n	8004090 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	e001      	b.n	8004094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40007c00 	.word	0x40007c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b6:	d10a      	bne.n	80041ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08c      	sub	sp, #48	@ 0x30
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd fc04 	bl	8001a18 <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d12e      	bne.n	800427e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2200      	movs	r2, #0
 800422a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f83b 	bl	80042aa <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d021      	beq.n	800427e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	60fb      	str	r3, [r7, #12]
   return(result);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	69b9      	ldr	r1, [r7, #24]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	617b      	str	r3, [r7, #20]
   return(result);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e6      	bne.n	800423a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e011      	b.n	80042a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	@ 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ba:	e04f      	b.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d04b      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fd fba8 	bl	8001a18 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <UART_WaitOnFlagUntilTimeout+0x30>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04e      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d037      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b80      	cmp	r3, #128	@ 0x80
 80042f0:	d034      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d031      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b08      	cmp	r3, #8
 8004304:	d110      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2208      	movs	r2, #8
 800430c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f838 	bl	8004384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2208      	movs	r2, #8
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d111      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f81e 	bl	8004384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e00f      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d0a0      	beq.n	80042bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b095      	sub	sp, #84	@ 0x54
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d118      	bne.n	800442c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60bb      	str	r3, [r7, #8]
   return(result);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	613b      	str	r3, [r7, #16]
   return(result);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004440:	bf00      	nop
 8004442:	3754      	adds	r7, #84	@ 0x54
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff fbaa 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	60bb      	str	r3, [r7, #8]
   return(result);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	613b      	str	r3, [r7, #16]
   return(result);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fb76 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c4:	bf00      	nop
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044de:	2b84      	cmp	r3, #132	@ 0x84
 80044e0:	d005      	beq.n	80044ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	3303      	adds	r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004500:	f000 fb80 	bl	8004c04 <vTaskStartScheduler>
  
  return osOK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	bd80      	pop	{r7, pc}

0800450a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800450a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450c:	b089      	sub	sp, #36	@ 0x24
 800450e:	af04      	add	r7, sp, #16
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <osThreadCreate+0x54>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01c      	beq.n	800455e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685c      	ldr	r4, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691e      	ldr	r6, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffc8 	bl	80044cc <makeFreeRtosPriority>
 800453c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004546:	9202      	str	r2, [sp, #8]
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	9100      	str	r1, [sp, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4632      	mov	r2, r6
 8004550:	4629      	mov	r1, r5
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f8ed 	bl	8004732 <xTaskCreateStatic>
 8004558:	4603      	mov	r3, r0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e01c      	b.n	8004598 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685c      	ldr	r4, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ffaa 	bl	80044cc <makeFreeRtosPriority>
 8004578:	4602      	mov	r2, r0
 800457a:	f107 030c 	add.w	r3, r7, #12
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	9200      	str	r2, [sp, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	4632      	mov	r2, r6
 8004586:	4629      	mov	r1, r5
 8004588:	4620      	mov	r0, r4
 800458a:	f000 f938 	bl	80047fe <xTaskCreate>
 800458e:	4603      	mov	r3, r0
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <osDelay+0x16>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	e000      	b.n	80045ba <osDelay+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 faea 	bl	8004b94 <vTaskDelay>
  
  return osOK;
 80045c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 0208 	add.w	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f04f 32ff 	mov.w	r2, #4294967295
 80045e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0208 	add.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f103 0208 	add.w	r2, r3, #8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d103      	bne.n	800468c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e00c      	b.n	80046a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3308      	adds	r3, #8
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e002      	b.n	800469a <vListInsert+0x2e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d2f6      	bcs.n	8004694 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6892      	ldr	r2, [r2, #8]
 80046f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6852      	ldr	r2, [r2, #4]
 80046fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d103      	bne.n	8004712 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004732:	b580      	push	{r7, lr}
 8004734:	b08e      	sub	sp, #56	@ 0x38
 8004736:	af04      	add	r7, sp, #16
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <xTaskCreateStatic+0x52>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	b672      	cpsid	i
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	b662      	cpsie	i
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004784:	2354      	movs	r3, #84	@ 0x54
 8004786:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b54      	cmp	r3, #84	@ 0x54
 800478c:	d00d      	beq.n	80047aa <xTaskCreateStatic+0x78>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	b672      	cpsid	i
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	b662      	cpsie	i
 80047a2:	61bb      	str	r3, [r7, #24]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01e      	beq.n	80047f0 <xTaskCreateStatic+0xbe>
 80047b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01b      	beq.n	80047f0 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ca:	2300      	movs	r3, #0
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f850 	bl	8004888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047ea:	f000 f8d7 	bl	800499c <prvAddNewTaskToReadyList>
 80047ee:	e001      	b.n	80047f4 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047f4:	697b      	ldr	r3, [r7, #20]
	}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3728      	adds	r7, #40	@ 0x28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08c      	sub	sp, #48	@ 0x30
 8004802:	af04      	add	r7, sp, #16
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 ff8a 	bl	800572c <pvPortMalloc>
 8004818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004820:	2054      	movs	r0, #84	@ 0x54
 8004822:	f000 ff83 	bl	800572c <pvPortMalloc>
 8004826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
 8004834:	e005      	b.n	8004842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f001 f846 	bl	80058c8 <vPortFree>
 800483c:	e001      	b.n	8004842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	2300      	movs	r3, #0
 8004854:	9303      	str	r3, [sp, #12]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f80e 	bl	8004888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800486c:	69f8      	ldr	r0, [r7, #28]
 800486e:	f000 f895 	bl	800499c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e002      	b.n	800487e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800487e:	69bb      	ldr	r3, [r7, #24]
	}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80048a0:	440b      	add	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	b672      	cpsid	i
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	b662      	cpsie	i
 80048ce:	617b      	str	r3, [r7, #20]
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	e7fd      	b.n	80048d2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01f      	beq.n	800491c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e012      	b.n	8004908 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	7819      	ldrb	r1, [r3, #0]
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	3334      	adds	r3, #52	@ 0x34
 80048f2:	460a      	mov	r2, r1
 80048f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d9e9      	bls.n	80048e2 <prvInitialiseNewTask+0x5a>
 800490e:	e000      	b.n	8004912 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004910:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800491a:	e003      	b.n	8004924 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	2b06      	cmp	r3, #6
 8004928:	d901      	bls.n	800492e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800492a:	2306      	movs	r3, #6
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	3304      	adds	r3, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fe60 	bl	800460a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	3318      	adds	r3, #24
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fe5b 	bl	800460a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	f1c3 0207 	rsb	r2, r3, #7
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2200      	movs	r2, #0
 800496e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	69b8      	ldr	r0, [r7, #24]
 800497e:	f000 fcdb 	bl	8005338 <pxPortInitialiseStack>
 8004982:	4602      	mov	r2, r0
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800498e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004992:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004994:	bf00      	nop
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a4:	f000 fdda 	bl	800555c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a54 <prvAddNewTaskToReadyList+0xb8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	4a29      	ldr	r2, [pc, #164]	@ (8004a54 <prvAddNewTaskToReadyList+0xb8>)
 80049b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049b2:	4b29      	ldr	r3, [pc, #164]	@ (8004a58 <prvAddNewTaskToReadyList+0xbc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049ba:	4a27      	ldr	r2, [pc, #156]	@ (8004a58 <prvAddNewTaskToReadyList+0xbc>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049c0:	4b24      	ldr	r3, [pc, #144]	@ (8004a54 <prvAddNewTaskToReadyList+0xb8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d110      	bne.n	80049ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049c8:	f000 fb72 	bl	80050b0 <prvInitialiseTaskLists>
 80049cc:	e00d      	b.n	80049ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ce:	4b23      	ldr	r3, [pc, #140]	@ (8004a5c <prvAddNewTaskToReadyList+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <prvAddNewTaskToReadyList+0xbc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d802      	bhi.n	80049ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <prvAddNewTaskToReadyList+0xbc>)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004a60 <prvAddNewTaskToReadyList+0xc4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <prvAddNewTaskToReadyList+0xc4>)
 80049f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	2201      	movs	r2, #1
 80049fa:	409a      	lsls	r2, r3
 80049fc:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <prvAddNewTaskToReadyList+0xc8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <prvAddNewTaskToReadyList+0xc8>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a15      	ldr	r2, [pc, #84]	@ (8004a68 <prvAddNewTaskToReadyList+0xcc>)
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7ff fe01 	bl	8004624 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a22:	f000 fdd1 	bl	80055c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <prvAddNewTaskToReadyList+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00e      	beq.n	8004a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <prvAddNewTaskToReadyList+0xbc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d207      	bcs.n	8004a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <prvAddNewTaskToReadyList+0xd0>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200007d0 	.word	0x200007d0
 8004a58:	200006d0 	.word	0x200006d0
 8004a5c:	200007dc 	.word	0x200007dc
 8004a60:	200007ec 	.word	0x200007ec
 8004a64:	200007d8 	.word	0x200007d8
 8004a68:	200006d4 	.word	0x200006d4
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004a78:	f000 fd70 	bl	800555c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <vTaskDelete+0x18>
 8004a82:	4b3a      	ldr	r3, [pc, #232]	@ (8004b6c <vTaskDelete+0xfc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	e000      	b.n	8004a8a <vTaskDelete+0x1a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fe24 	bl	80046de <uxListRemove>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4933      	ldr	r1, [pc, #204]	@ (8004b70 <vTaskDelete+0x100>)
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <vTaskDelete+0x58>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43da      	mvns	r2, r3
 8004abe:	4b2d      	ldr	r3, [pc, #180]	@ (8004b74 <vTaskDelete+0x104>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b74 <vTaskDelete+0x104>)
 8004ac6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3318      	adds	r3, #24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fe02 	bl	80046de <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004ada:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <vTaskDelete+0x108>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <vTaskDelete+0x108>)
 8004ae2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <vTaskDelete+0xfc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d10b      	bne.n	8004b06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4821      	ldr	r0, [pc, #132]	@ (8004b7c <vTaskDelete+0x10c>)
 8004af6:	f7ff fd95 	bl	8004624 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004afa:	4b21      	ldr	r3, [pc, #132]	@ (8004b80 <vTaskDelete+0x110>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <vTaskDelete+0x110>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e009      	b.n	8004b1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <vTaskDelete+0x114>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <vTaskDelete+0x114>)
 8004b0e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fb3b 	bl	800518c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004b16:	f000 fb6b 	bl	80051f0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004b1a:	f000 fd55 	bl	80055c8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <vTaskDelete+0x118>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01e      	beq.n	8004b64 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8004b26:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <vTaskDelete+0xfc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d119      	bne.n	8004b64 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004b30:	4b16      	ldr	r3, [pc, #88]	@ (8004b8c <vTaskDelete+0x11c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <vTaskDelete+0xe4>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	b672      	cpsid	i
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	b662      	cpsie	i
 8004b4c:	60bb      	str	r3, [r7, #8]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8004b54:	4b0e      	ldr	r3, [pc, #56]	@ (8004b90 <vTaskDelete+0x120>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200006d0 	.word	0x200006d0
 8004b70:	200006d4 	.word	0x200006d4
 8004b74:	200007d8 	.word	0x200007d8
 8004b78:	200007ec 	.word	0x200007ec
 8004b7c:	200007a4 	.word	0x200007a4
 8004b80:	200007b8 	.word	0x200007b8
 8004b84:	200007d0 	.word	0x200007d0
 8004b88:	200007dc 	.word	0x200007dc
 8004b8c:	200007f8 	.word	0x200007f8
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01a      	beq.n	8004bdc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <vTaskDelay+0x68>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <vTaskDelay+0x36>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	b672      	cpsid	i
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	b662      	cpsie	i
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004bca:	f000 f881 	bl	8004cd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bce:	2100      	movs	r1, #0
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fb4b 	bl	800526c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd6:	f000 f889 	bl	8004cec <xTaskResumeAll>
 8004bda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <vTaskDelay+0x6c>)
 8004be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200007f8 	.word	0x200007f8
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	@ 0x28
 8004c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c12:	463a      	mov	r2, r7
 8004c14:	1d39      	adds	r1, r7, #4
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fce8 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	460a      	mov	r2, r1
 8004c32:	4921      	ldr	r1, [pc, #132]	@ (8004cb8 <vTaskStartScheduler+0xb4>)
 8004c34:	4821      	ldr	r0, [pc, #132]	@ (8004cbc <vTaskStartScheduler+0xb8>)
 8004c36:	f7ff fd7c 	bl	8004732 <xTaskCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a20      	ldr	r2, [pc, #128]	@ (8004cc0 <vTaskStartScheduler+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c40:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <vTaskStartScheduler+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e001      	b.n	8004c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d118      	bne.n	8004c8a <vTaskStartScheduler+0x86>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	b672      	cpsid	i
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	b662      	cpsie	i
 8004c6c:	613b      	str	r3, [r7, #16]
}
 8004c6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c70:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <vTaskStartScheduler+0xc0>)
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c78:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <vTaskStartScheduler+0xc4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <vTaskStartScheduler+0xc8>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c84:	f000 fbec 	bl	8005460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c88:	e011      	b.n	8004cae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d10d      	bne.n	8004cae <vTaskStartScheduler+0xaa>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	b672      	cpsid	i
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	b662      	cpsie	i
 8004ca6:	60fb      	str	r3, [r7, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <vTaskStartScheduler+0xa6>
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08006eb0 	.word	0x08006eb0
 8004cbc:	08005081 	.word	0x08005081
 8004cc0:	200007f4 	.word	0x200007f4
 8004cc4:	200007f0 	.word	0x200007f0
 8004cc8:	200007dc 	.word	0x200007dc
 8004ccc:	200007d4 	.word	0x200007d4

08004cd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cd4:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <vTaskSuspendAll+0x18>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	4a03      	ldr	r2, [pc, #12]	@ (8004ce8 <vTaskSuspendAll+0x18>)
 8004cdc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004cde:	bf00      	nop
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	200007f8 	.word	0x200007f8

08004cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cfa:	4b43      	ldr	r3, [pc, #268]	@ (8004e08 <xTaskResumeAll+0x11c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <xTaskResumeAll+0x32>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	b672      	cpsid	i
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	b662      	cpsie	i
 8004d16:	603b      	str	r3, [r7, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d1e:	f000 fc1d 	bl	800555c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d22:	4b39      	ldr	r3, [pc, #228]	@ (8004e08 <xTaskResumeAll+0x11c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	4a37      	ldr	r2, [pc, #220]	@ (8004e08 <xTaskResumeAll+0x11c>)
 8004d2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2c:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <xTaskResumeAll+0x11c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d161      	bne.n	8004df8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d34:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <xTaskResumeAll+0x120>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05d      	beq.n	8004df8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d3c:	e02e      	b.n	8004d9c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3e:	4b34      	ldr	r3, [pc, #208]	@ (8004e10 <xTaskResumeAll+0x124>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3318      	adds	r3, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fcc7 	bl	80046de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fcc2 	bl	80046de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b2c      	ldr	r3, [pc, #176]	@ (8004e14 <xTaskResumeAll+0x128>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	4a2a      	ldr	r2, [pc, #168]	@ (8004e14 <xTaskResumeAll+0x128>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a27      	ldr	r2, [pc, #156]	@ (8004e18 <xTaskResumeAll+0x12c>)
 8004d7a:	441a      	add	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7ff fc4e 	bl	8004624 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8c:	4b23      	ldr	r3, [pc, #140]	@ (8004e1c <xTaskResumeAll+0x130>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004d96:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <xTaskResumeAll+0x134>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <xTaskResumeAll+0x124>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1cc      	bne.n	8004d3e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004daa:	f000 fa21 	bl	80051f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004dae:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <xTaskResumeAll+0x138>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dba:	f000 f847 	bl	8004e4c <xTaskIncrementTick>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004dc4:	4b16      	ldr	r3, [pc, #88]	@ (8004e20 <xTaskResumeAll+0x134>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f1      	bne.n	8004dba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <xTaskResumeAll+0x138>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ddc:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <xTaskResumeAll+0x134>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004de8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <xTaskResumeAll+0x13c>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004df8:	f000 fbe6 	bl	80055c8 <vPortExitCritical>

	return xAlreadyYielded;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200007f8 	.word	0x200007f8
 8004e0c:	200007d0 	.word	0x200007d0
 8004e10:	20000790 	.word	0x20000790
 8004e14:	200007d8 	.word	0x200007d8
 8004e18:	200006d4 	.word	0x200006d4
 8004e1c:	200006d0 	.word	0x200006d0
 8004e20:	200007e4 	.word	0x200007e4
 8004e24:	200007e0 	.word	0x200007e0
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e32:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <xTaskGetTickCount+0x1c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	200007d4 	.word	0x200007d4

08004e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e56:	4b50      	ldr	r3, [pc, #320]	@ (8004f98 <xTaskIncrementTick+0x14c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 808b 	bne.w	8004f76 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e60:	4b4e      	ldr	r3, [pc, #312]	@ (8004f9c <xTaskIncrementTick+0x150>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e68:	4a4c      	ldr	r2, [pc, #304]	@ (8004f9c <xTaskIncrementTick+0x150>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d123      	bne.n	8004ebc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e74:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa0 <xTaskIncrementTick+0x154>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <xTaskIncrementTick+0x4e>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	b672      	cpsid	i
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	b662      	cpsie	i
 8004e92:	603b      	str	r3, [r7, #0]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <xTaskIncrementTick+0x4a>
 8004e9a:	4b41      	ldr	r3, [pc, #260]	@ (8004fa0 <xTaskIncrementTick+0x154>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	4b40      	ldr	r3, [pc, #256]	@ (8004fa4 <xTaskIncrementTick+0x158>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa0 <xTaskIncrementTick+0x154>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa4 <xTaskIncrementTick+0x158>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa8 <xTaskIncrementTick+0x15c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa8 <xTaskIncrementTick+0x15c>)
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	f000 f99a 	bl	80051f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fac <xTaskIncrementTick+0x160>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d348      	bcc.n	8004f58 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec6:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <xTaskIncrementTick+0x154>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed0:	4b36      	ldr	r3, [pc, #216]	@ (8004fac <xTaskIncrementTick+0x160>)
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed6:	601a      	str	r2, [r3, #0]
					break;
 8004ed8:	e03e      	b.n	8004f58 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eda:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <xTaskIncrementTick+0x154>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d203      	bcs.n	8004efa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8004fac <xTaskIncrementTick+0x160>)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ef8:	e02e      	b.n	8004f58 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fbed 	bl	80046de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3318      	adds	r3, #24
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fbe4 	bl	80046de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <xTaskIncrementTick+0x164>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	4a22      	ldr	r2, [pc, #136]	@ (8004fb0 <xTaskIncrementTick+0x164>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <xTaskIncrementTick+0x168>)
 8004f36:	441a      	add	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7ff fb70 	bl	8004624 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <xTaskIncrementTick+0x16c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d3b9      	bcc.n	8004ec6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f56:	e7b6      	b.n	8004ec6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f58:	4b17      	ldr	r3, [pc, #92]	@ (8004fb8 <xTaskIncrementTick+0x16c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5e:	4915      	ldr	r1, [pc, #84]	@ (8004fb4 <xTaskIncrementTick+0x168>)
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d907      	bls.n	8004f80 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e004      	b.n	8004f80 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f76:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <xTaskIncrementTick+0x170>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004fbc <xTaskIncrementTick+0x170>)
 8004f7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f80:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <xTaskIncrementTick+0x174>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f8c:	697b      	ldr	r3, [r7, #20]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200007f8 	.word	0x200007f8
 8004f9c:	200007d4 	.word	0x200007d4
 8004fa0:	20000788 	.word	0x20000788
 8004fa4:	2000078c 	.word	0x2000078c
 8004fa8:	200007e8 	.word	0x200007e8
 8004fac:	200007f0 	.word	0x200007f0
 8004fb0:	200007d8 	.word	0x200007d8
 8004fb4:	200006d4 	.word	0x200006d4
 8004fb8:	200006d0 	.word	0x200006d0
 8004fbc:	200007e0 	.word	0x200007e0
 8004fc0:	200007e4 	.word	0x200007e4

08004fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fca:	4b28      	ldr	r3, [pc, #160]	@ (800506c <vTaskSwitchContext+0xa8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fd2:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <vTaskSwitchContext+0xac>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fd8:	e042      	b.n	8005060 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004fda:	4b25      	ldr	r3, [pc, #148]	@ (8005070 <vTaskSwitchContext+0xac>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe0:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <vTaskSwitchContext+0xb0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f1c3 031f 	rsb	r3, r3, #31
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	4920      	ldr	r1, [pc, #128]	@ (8005078 <vTaskSwitchContext+0xb4>)
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <vTaskSwitchContext+0x62>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	b672      	cpsid	i
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	b662      	cpsie	i
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vTaskSwitchContext+0x5e>
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <vTaskSwitchContext+0xb4>)
 8005032:	4413      	add	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3308      	adds	r3, #8
 8005048:	429a      	cmp	r2, r3
 800504a:	d104      	bne.n	8005056 <vTaskSwitchContext+0x92>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a07      	ldr	r2, [pc, #28]	@ (800507c <vTaskSwitchContext+0xb8>)
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	200007f8 	.word	0x200007f8
 8005070:	200007e4 	.word	0x200007e4
 8005074:	200007d8 	.word	0x200007d8
 8005078:	200006d4 	.word	0x200006d4
 800507c:	200006d0 	.word	0x200006d0

08005080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005088:	f000 f852 	bl	8005130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800508c:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <prvIdleTask+0x28>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d9f9      	bls.n	8005088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <prvIdleTask+0x2c>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050a4:	e7f0      	b.n	8005088 <prvIdleTask+0x8>
 80050a6:	bf00      	nop
 80050a8:	200006d4 	.word	0x200006d4
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	e00c      	b.n	80050d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <prvInitialiseTaskLists+0x60>)
 80050c8:	4413      	add	r3, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fa7d 	bl	80045ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d9ef      	bls.n	80050bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050dc:	480d      	ldr	r0, [pc, #52]	@ (8005114 <prvInitialiseTaskLists+0x64>)
 80050de:	f7ff fa74 	bl	80045ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050e2:	480d      	ldr	r0, [pc, #52]	@ (8005118 <prvInitialiseTaskLists+0x68>)
 80050e4:	f7ff fa71 	bl	80045ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050e8:	480c      	ldr	r0, [pc, #48]	@ (800511c <prvInitialiseTaskLists+0x6c>)
 80050ea:	f7ff fa6e 	bl	80045ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ee:	480c      	ldr	r0, [pc, #48]	@ (8005120 <prvInitialiseTaskLists+0x70>)
 80050f0:	f7ff fa6b 	bl	80045ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050f4:	480b      	ldr	r0, [pc, #44]	@ (8005124 <prvInitialiseTaskLists+0x74>)
 80050f6:	f7ff fa68 	bl	80045ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <prvInitialiseTaskLists+0x78>)
 80050fc:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <prvInitialiseTaskLists+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <prvInitialiseTaskLists+0x7c>)
 8005102:	4a05      	ldr	r2, [pc, #20]	@ (8005118 <prvInitialiseTaskLists+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200006d4 	.word	0x200006d4
 8005114:	20000760 	.word	0x20000760
 8005118:	20000774 	.word	0x20000774
 800511c:	20000790 	.word	0x20000790
 8005120:	200007a4 	.word	0x200007a4
 8005124:	200007bc 	.word	0x200007bc
 8005128:	20000788 	.word	0x20000788
 800512c:	2000078c 	.word	0x2000078c

08005130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005136:	e019      	b.n	800516c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005138:	f000 fa10 	bl	800555c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <prvCheckTasksWaitingTermination+0x50>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fac8 	bl	80046de <uxListRemove>
				--uxCurrentNumberOfTasks;
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a0b      	ldr	r2, [pc, #44]	@ (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 8005160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005162:	f000 fa31 	bl	80055c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f810 	bl	800518c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e1      	bne.n	8005138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200007a4 	.word	0x200007a4
 8005184:	200007d0 	.word	0x200007d0
 8005188:	200007b8 	.word	0x200007b8

0800518c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fb90 	bl	80058c8 <vPortFree>
				vPortFree( pxTCB );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fb8d 	bl	80058c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051ae:	e01b      	b.n	80051e8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d103      	bne.n	80051c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fb84 	bl	80058c8 <vPortFree>
	}
 80051c0:	e012      	b.n	80051e8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d00d      	beq.n	80051e8 <prvDeleteTCB+0x5c>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	b672      	cpsid	i
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	b662      	cpsie	i
 80051e0:	60fb      	str	r3, [r7, #12]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <prvDeleteTCB+0x58>
	}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <prvResetNextTaskUnblockTime+0x38>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005200:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <prvResetNextTaskUnblockTime+0x3c>)
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
 8005206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005208:	e008      	b.n	800521c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <prvResetNextTaskUnblockTime+0x38>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4a04      	ldr	r2, [pc, #16]	@ (800522c <prvResetNextTaskUnblockTime+0x3c>)
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000788 	.word	0x20000788
 800522c:	200007f0 	.word	0x200007f0

08005230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <xTaskGetSchedulerState+0x34>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800523e:	2301      	movs	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e008      	b.n	8005256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005244:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <xTaskGetSchedulerState+0x38>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800524c:	2302      	movs	r3, #2
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e001      	b.n	8005256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005256:	687b      	ldr	r3, [r7, #4]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	200007dc 	.word	0x200007dc
 8005268:	200007f8 	.word	0x200007f8

0800526c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005276:	4b29      	ldr	r3, [pc, #164]	@ (800531c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527c:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fa2b 	bl	80046de <uxListRemove>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	2201      	movs	r2, #1
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43da      	mvns	r2, r3
 800529c:	4b21      	ldr	r3, [pc, #132]	@ (8005324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4013      	ands	r3, r2
 80052a2:	4a20      	ldr	r2, [pc, #128]	@ (8005324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d10a      	bne.n	80052c4 <prvAddCurrentTaskToDelayedList+0x58>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	481a      	ldr	r0, [pc, #104]	@ (8005328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052be:	f7ff f9b1 	bl	8004624 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052c2:	e026      	b.n	8005312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052cc:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d209      	bcs.n	80052f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052dc:	4b13      	ldr	r3, [pc, #76]	@ (800532c <prvAddCurrentTaskToDelayedList+0xc0>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7ff f9bf 	bl	800466c <vListInsert>
}
 80052ee:	e010      	b.n	8005312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7ff f9b5 	bl	800466c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d202      	bcs.n	8005312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800530c:	4a09      	ldr	r2, [pc, #36]	@ (8005334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6013      	str	r3, [r2, #0]
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200007d4 	.word	0x200007d4
 8005320:	200006d0 	.word	0x200006d0
 8005324:	200007d8 	.word	0x200007d8
 8005328:	200007bc 	.word	0x200007bc
 800532c:	2000078c 	.word	0x2000078c
 8005330:	20000788 	.word	0x20000788
 8005334:	200007f0 	.word	0x200007f0

08005338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b04      	subs	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3b04      	subs	r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005368:	4a0c      	ldr	r2, [pc, #48]	@ (800539c <pxPortInitialiseStack+0x64>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3b14      	subs	r3, #20
 8005372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b04      	subs	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f06f 0202 	mvn.w	r2, #2
 8005386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3b20      	subs	r3, #32
 800538c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800538e:	68fb      	ldr	r3, [r7, #12]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	080053a1 	.word	0x080053a1

080053a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053aa:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <prvTaskExitError+0x60>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d00d      	beq.n	80053d0 <prvTaskExitError+0x30>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	b672      	cpsid	i
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	b662      	cpsie	i
 80053c8:	60fb      	str	r3, [r7, #12]
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <prvTaskExitError+0x2c>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	b672      	cpsid	i
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	b662      	cpsie	i
 80053e4:	60bb      	str	r3, [r7, #8]
}
 80053e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053e8:	bf00      	nop
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0fc      	beq.n	80053ea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000000c 	.word	0x2000000c
	...

08005410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005410:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <pxCurrentTCBConst2>)
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	6808      	ldr	r0, [r1, #0]
 8005416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	f380 8809 	msr	PSP, r0
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8811 	msr	BASEPRI, r0
 800542a:	4770      	bx	lr
 800542c:	f3af 8000 	nop.w

08005430 <pxCurrentTCBConst2>:
 8005430:	200006d0 	.word	0x200006d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005438:	4808      	ldr	r0, [pc, #32]	@ (800545c <prvPortStartFirstTask+0x24>)
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	6800      	ldr	r0, [r0, #0]
 800543e:	f380 8808 	msr	MSP, r0
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8814 	msr	CONTROL, r0
 800544a:	b662      	cpsie	i
 800544c:	b661      	cpsie	f
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	df00      	svc	0
 8005458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800545a:	bf00      	nop
 800545c:	e000ed08 	.word	0xe000ed08

08005460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005466:	4b37      	ldr	r3, [pc, #220]	@ (8005544 <xPortStartScheduler+0xe4>)
 8005468:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	22ff      	movs	r2, #255	@ 0xff
 8005476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <xPortStartScheduler+0xe8>)
 800548c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800548e:	4b2f      	ldr	r3, [pc, #188]	@ (800554c <xPortStartScheduler+0xec>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005494:	e009      	b.n	80054aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005496:	4b2d      	ldr	r3, [pc, #180]	@ (800554c <xPortStartScheduler+0xec>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a2b      	ldr	r2, [pc, #172]	@ (800554c <xPortStartScheduler+0xec>)
 800549e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b2:	2b80      	cmp	r3, #128	@ 0x80
 80054b4:	d0ef      	beq.n	8005496 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054b6:	4b25      	ldr	r3, [pc, #148]	@ (800554c <xPortStartScheduler+0xec>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d00d      	beq.n	80054de <xPortStartScheduler+0x7e>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	b672      	cpsid	i
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	b662      	cpsie	i
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054de:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <xPortStartScheduler+0xec>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <xPortStartScheduler+0xec>)
 80054e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e8:	4b18      	ldr	r3, [pc, #96]	@ (800554c <xPortStartScheduler+0xec>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054f0:	4a16      	ldr	r2, [pc, #88]	@ (800554c <xPortStartScheduler+0xec>)
 80054f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054fc:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <xPortStartScheduler+0xf0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a13      	ldr	r2, [pc, #76]	@ (8005550 <xPortStartScheduler+0xf0>)
 8005502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <xPortStartScheduler+0xf0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a10      	ldr	r2, [pc, #64]	@ (8005550 <xPortStartScheduler+0xf0>)
 800550e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005514:	f000 f8dc 	bl	80056d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005518:	4b0e      	ldr	r3, [pc, #56]	@ (8005554 <xPortStartScheduler+0xf4>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800551e:	f000 f8fb 	bl	8005718 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <xPortStartScheduler+0xf8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a0c      	ldr	r2, [pc, #48]	@ (8005558 <xPortStartScheduler+0xf8>)
 8005528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800552c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800552e:	f7ff ff83 	bl	8005438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005532:	f7ff fd47 	bl	8004fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8005536:	f7ff ff33 	bl	80053a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	e000e400 	.word	0xe000e400
 8005548:	200007fc 	.word	0x200007fc
 800554c:	20000800 	.word	0x20000800
 8005550:	e000ed20 	.word	0xe000ed20
 8005554:	2000000c 	.word	0x2000000c
 8005558:	e000ef34 	.word	0xe000ef34

0800555c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	b672      	cpsid	i
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	b662      	cpsie	i
 8005576:	607b      	str	r3, [r7, #4]
}
 8005578:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800557a:	4b11      	ldr	r3, [pc, #68]	@ (80055c0 <vPortEnterCritical+0x64>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	4a0f      	ldr	r2, [pc, #60]	@ (80055c0 <vPortEnterCritical+0x64>)
 8005582:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005584:	4b0e      	ldr	r3, [pc, #56]	@ (80055c0 <vPortEnterCritical+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d112      	bne.n	80055b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800558c:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <vPortEnterCritical+0x68>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00d      	beq.n	80055b2 <vPortEnterCritical+0x56>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	b672      	cpsid	i
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	b662      	cpsie	i
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <vPortEnterCritical+0x52>
	}
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	2000000c 	.word	0x2000000c
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ce:	4b13      	ldr	r3, [pc, #76]	@ (800561c <vPortExitCritical+0x54>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <vPortExitCritical+0x2a>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	b672      	cpsid	i
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	b662      	cpsie	i
 80055ea:	607b      	str	r3, [r7, #4]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <vPortExitCritical+0x54>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	4a08      	ldr	r2, [pc, #32]	@ (800561c <vPortExitCritical+0x54>)
 80055fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055fc:	4b07      	ldr	r3, [pc, #28]	@ (800561c <vPortExitCritical+0x54>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <vPortExitCritical+0x48>
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800560e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	2000000c 	.word	0x2000000c

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005644:	b672      	cpsid	i
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	b662      	cpsie	i
 8005654:	f7ff fcb6 	bl	8004fc4 <vTaskSwitchContext>
 8005658:	f04f 0000 	mov.w	r0, #0
 800565c:	f380 8811 	msr	BASEPRI, r0
 8005660:	bc09      	pop	{r0, r3}
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	f01e 0f10 	tst.w	lr, #16
 800566e:	bf08      	it	eq
 8005670:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005674:	f380 8809 	msr	PSP, r0
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop

08005680 <pxCurrentTCBConst>:
 8005680:	200006d0 	.word	0x200006d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	607b      	str	r3, [r7, #4]
}
 80056a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a6:	f7ff fbd1 	bl	8004e4c <xTaskIncrementTick>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <xPortSysTickHandler+0x44>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f383 8811 	msr	BASEPRI, r3
}
 80056c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <vPortSetupTimerInterrupt+0x34>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056da:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <vPortSetupTimerInterrupt+0x38>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	@ (800570c <vPortSetupTimerInterrupt+0x3c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <vPortSetupTimerInterrupt+0x40>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	099b      	lsrs	r3, r3, #6
 80056ec:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <vPortSetupTimerInterrupt+0x44>)
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056f2:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <vPortSetupTimerInterrupt+0x34>)
 80056f4:	2207      	movs	r2, #7
 80056f6:	601a      	str	r2, [r3, #0]
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	e000e010 	.word	0xe000e010
 8005708:	e000e018 	.word	0xe000e018
 800570c:	20000000 	.word	0x20000000
 8005710:	10624dd3 	.word	0x10624dd3
 8005714:	e000e014 	.word	0xe000e014

08005718 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005718:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005728 <vPortEnableVFP+0x10>
 800571c:	6801      	ldr	r1, [r0, #0]
 800571e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005722:	6001      	str	r1, [r0, #0]
 8005724:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005726:	bf00      	nop
 8005728:	e000ed88 	.word	0xe000ed88

0800572c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	@ 0x28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005738:	f7ff faca 	bl	8004cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800573c:	4b5d      	ldr	r3, [pc, #372]	@ (80058b4 <pvPortMalloc+0x188>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005744:	f000 f920 	bl	8005988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005748:	4b5b      	ldr	r3, [pc, #364]	@ (80058b8 <pvPortMalloc+0x18c>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8094 	bne.w	800587e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d020      	beq.n	800579e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800575c:	2208      	movs	r2, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d017      	beq.n	800579e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f023 0307 	bic.w	r3, r3, #7
 8005774:	3308      	adds	r3, #8
 8005776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <pvPortMalloc+0x72>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	b672      	cpsid	i
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	b662      	cpsie	i
 8005796:	617b      	str	r3, [r7, #20]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d06c      	beq.n	800587e <pvPortMalloc+0x152>
 80057a4:	4b45      	ldr	r3, [pc, #276]	@ (80058bc <pvPortMalloc+0x190>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d867      	bhi.n	800587e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ae:	4b44      	ldr	r3, [pc, #272]	@ (80058c0 <pvPortMalloc+0x194>)
 80057b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057b2:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <pvPortMalloc+0x194>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057b8:	e004      	b.n	80057c4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d903      	bls.n	80057d6 <pvPortMalloc+0xaa>
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f1      	bne.n	80057ba <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057d6:	4b37      	ldr	r3, [pc, #220]	@ (80058b4 <pvPortMalloc+0x188>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	429a      	cmp	r2, r3
 80057de:	d04e      	beq.n	800587e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	4413      	add	r3, r2
 80057e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	2308      	movs	r3, #8
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	429a      	cmp	r2, r3
 8005800:	d922      	bls.n	8005848 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <pvPortMalloc+0x104>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	b672      	cpsid	i
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	b662      	cpsie	i
 8005828:	613b      	str	r3, [r7, #16]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005842:	69b8      	ldr	r0, [r7, #24]
 8005844:	f000 f902 	bl	8005a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005848:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <pvPortMalloc+0x190>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a1a      	ldr	r2, [pc, #104]	@ (80058bc <pvPortMalloc+0x190>)
 8005854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005856:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <pvPortMalloc+0x190>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b1a      	ldr	r3, [pc, #104]	@ (80058c4 <pvPortMalloc+0x198>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d203      	bcs.n	800586a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005862:	4b16      	ldr	r3, [pc, #88]	@ (80058bc <pvPortMalloc+0x190>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a17      	ldr	r2, [pc, #92]	@ (80058c4 <pvPortMalloc+0x198>)
 8005868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <pvPortMalloc+0x18c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	431a      	orrs	r2, r3
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800587e:	f7ff fa35 	bl	8004cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <pvPortMalloc+0x17c>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	b672      	cpsid	i
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	b662      	cpsie	i
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <pvPortMalloc+0x178>
	return pvReturn;
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	@ 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000440c 	.word	0x2000440c
 80058b8:	20004418 	.word	0x20004418
 80058bc:	20004410 	.word	0x20004410
 80058c0:	20004404 	.word	0x20004404
 80058c4:	20004414 	.word	0x20004414

080058c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d04e      	beq.n	8005978 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058da:	2308      	movs	r3, #8
 80058dc:	425b      	negs	r3, r3
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b24      	ldr	r3, [pc, #144]	@ (8005980 <vPortFree+0xb8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <vPortFree+0x4a>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	b672      	cpsid	i
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	b662      	cpsie	i
 800590a:	60fb      	str	r3, [r7, #12]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <vPortFree+0x6e>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	b672      	cpsid	i
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	b662      	cpsie	i
 800592e:	60bb      	str	r3, [r7, #8]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <vPortFree+0xb8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d115      	bne.n	8005978 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <vPortFree+0xb8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800595c:	f7ff f9b8 	bl	8004cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <vPortFree+0xbc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4413      	add	r3, r2
 800596a:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <vPortFree+0xbc>)
 800596c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f000 f86c 	bl	8005a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005974:	f7ff f9ba 	bl	8004cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20004418 	.word	0x20004418
 8005984:	20004410 	.word	0x20004410

08005988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800598e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005994:	4b27      	ldr	r3, [pc, #156]	@ (8005a34 <prvHeapInit+0xac>)
 8005996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3307      	adds	r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <prvHeapInit+0xac>)
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a38 <prvHeapInit+0xb0>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a38 <prvHeapInit+0xb0>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059d4:	2208      	movs	r2, #8
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <prvHeapInit+0xb4>)
 80059e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ea:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <prvHeapInit+0xb4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059f2:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <prvHeapInit+0xb4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <prvHeapInit+0xb4>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a0a      	ldr	r2, [pc, #40]	@ (8005a40 <prvHeapInit+0xb8>)
 8005a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a09      	ldr	r2, [pc, #36]	@ (8005a44 <prvHeapInit+0xbc>)
 8005a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a20:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <prvHeapInit+0xc0>)
 8005a22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a26:	601a      	str	r2, [r3, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000804 	.word	0x20000804
 8005a38:	20004404 	.word	0x20004404
 8005a3c:	2000440c 	.word	0x2000440c
 8005a40:	20004414 	.word	0x20004414
 8005a44:	20004410 	.word	0x20004410
 8005a48:	20004418 	.word	0x20004418

08005a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a54:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <prvInsertBlockIntoFreeList+0xac>)
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e002      	b.n	8005a60 <prvInsertBlockIntoFreeList+0x14>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d8f7      	bhi.n	8005a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d108      	bne.n	8005a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	441a      	add	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d118      	bne.n	8005ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b15      	ldr	r3, [pc, #84]	@ (8005afc <prvInsertBlockIntoFreeList+0xb0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d00d      	beq.n	8005aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e008      	b.n	8005adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aca:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <prvInsertBlockIntoFreeList+0xb0>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	e003      	b.n	8005adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d002      	beq.n	8005aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20004404 	.word	0x20004404
 8005afc:	2000440c 	.word	0x2000440c

08005b00 <atoi>:
 8005b00:	220a      	movs	r2, #10
 8005b02:	2100      	movs	r1, #0
 8005b04:	f000 b87a 	b.w	8005bfc <strtol>

08005b08 <_strtol_l.constprop.0>:
 8005b08:	2b24      	cmp	r3, #36	@ 0x24
 8005b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0e:	4686      	mov	lr, r0
 8005b10:	4690      	mov	r8, r2
 8005b12:	d801      	bhi.n	8005b18 <_strtol_l.constprop.0+0x10>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d106      	bne.n	8005b26 <_strtol_l.constprop.0+0x1e>
 8005b18:	f000 faf4 	bl	8006104 <__errno>
 8005b1c:	2316      	movs	r3, #22
 8005b1e:	6003      	str	r3, [r0, #0]
 8005b20:	2000      	movs	r0, #0
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	4834      	ldr	r0, [pc, #208]	@ (8005bf8 <_strtol_l.constprop.0+0xf0>)
 8005b28:	460d      	mov	r5, r1
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b30:	5d06      	ldrb	r6, [r0, r4]
 8005b32:	f016 0608 	ands.w	r6, r6, #8
 8005b36:	d1f8      	bne.n	8005b2a <_strtol_l.constprop.0+0x22>
 8005b38:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b3a:	d12d      	bne.n	8005b98 <_strtol_l.constprop.0+0x90>
 8005b3c:	782c      	ldrb	r4, [r5, #0]
 8005b3e:	2601      	movs	r6, #1
 8005b40:	1c95      	adds	r5, r2, #2
 8005b42:	f033 0210 	bics.w	r2, r3, #16
 8005b46:	d109      	bne.n	8005b5c <_strtol_l.constprop.0+0x54>
 8005b48:	2c30      	cmp	r4, #48	@ 0x30
 8005b4a:	d12a      	bne.n	8005ba2 <_strtol_l.constprop.0+0x9a>
 8005b4c:	782a      	ldrb	r2, [r5, #0]
 8005b4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b52:	2a58      	cmp	r2, #88	@ 0x58
 8005b54:	d125      	bne.n	8005ba2 <_strtol_l.constprop.0+0x9a>
 8005b56:	786c      	ldrb	r4, [r5, #1]
 8005b58:	2310      	movs	r3, #16
 8005b5a:	3502      	adds	r5, #2
 8005b5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005b60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b64:	2200      	movs	r2, #0
 8005b66:	fbbc f9f3 	udiv	r9, ip, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005b70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005b74:	2f09      	cmp	r7, #9
 8005b76:	d81b      	bhi.n	8005bb0 <_strtol_l.constprop.0+0xa8>
 8005b78:	463c      	mov	r4, r7
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	dd27      	ble.n	8005bce <_strtol_l.constprop.0+0xc6>
 8005b7e:	1c57      	adds	r7, r2, #1
 8005b80:	d007      	beq.n	8005b92 <_strtol_l.constprop.0+0x8a>
 8005b82:	4581      	cmp	r9, r0
 8005b84:	d320      	bcc.n	8005bc8 <_strtol_l.constprop.0+0xc0>
 8005b86:	d101      	bne.n	8005b8c <_strtol_l.constprop.0+0x84>
 8005b88:	45a2      	cmp	sl, r4
 8005b8a:	db1d      	blt.n	8005bc8 <_strtol_l.constprop.0+0xc0>
 8005b8c:	fb00 4003 	mla	r0, r0, r3, r4
 8005b90:	2201      	movs	r2, #1
 8005b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b96:	e7eb      	b.n	8005b70 <_strtol_l.constprop.0+0x68>
 8005b98:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b9a:	bf04      	itt	eq
 8005b9c:	782c      	ldrbeq	r4, [r5, #0]
 8005b9e:	1c95      	addeq	r5, r2, #2
 8005ba0:	e7cf      	b.n	8005b42 <_strtol_l.constprop.0+0x3a>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1da      	bne.n	8005b5c <_strtol_l.constprop.0+0x54>
 8005ba6:	2c30      	cmp	r4, #48	@ 0x30
 8005ba8:	bf0c      	ite	eq
 8005baa:	2308      	moveq	r3, #8
 8005bac:	230a      	movne	r3, #10
 8005bae:	e7d5      	b.n	8005b5c <_strtol_l.constprop.0+0x54>
 8005bb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005bb4:	2f19      	cmp	r7, #25
 8005bb6:	d801      	bhi.n	8005bbc <_strtol_l.constprop.0+0xb4>
 8005bb8:	3c37      	subs	r4, #55	@ 0x37
 8005bba:	e7de      	b.n	8005b7a <_strtol_l.constprop.0+0x72>
 8005bbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005bc0:	2f19      	cmp	r7, #25
 8005bc2:	d804      	bhi.n	8005bce <_strtol_l.constprop.0+0xc6>
 8005bc4:	3c57      	subs	r4, #87	@ 0x57
 8005bc6:	e7d8      	b.n	8005b7a <_strtol_l.constprop.0+0x72>
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	e7e1      	b.n	8005b92 <_strtol_l.constprop.0+0x8a>
 8005bce:	1c53      	adds	r3, r2, #1
 8005bd0:	d108      	bne.n	8005be4 <_strtol_l.constprop.0+0xdc>
 8005bd2:	2322      	movs	r3, #34	@ 0x22
 8005bd4:	f8ce 3000 	str.w	r3, [lr]
 8005bd8:	4660      	mov	r0, ip
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	d0a0      	beq.n	8005b22 <_strtol_l.constprop.0+0x1a>
 8005be0:	1e69      	subs	r1, r5, #1
 8005be2:	e006      	b.n	8005bf2 <_strtol_l.constprop.0+0xea>
 8005be4:	b106      	cbz	r6, 8005be8 <_strtol_l.constprop.0+0xe0>
 8005be6:	4240      	negs	r0, r0
 8005be8:	f1b8 0f00 	cmp.w	r8, #0
 8005bec:	d099      	beq.n	8005b22 <_strtol_l.constprop.0+0x1a>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	d1f6      	bne.n	8005be0 <_strtol_l.constprop.0+0xd8>
 8005bf2:	f8c8 1000 	str.w	r1, [r8]
 8005bf6:	e794      	b.n	8005b22 <_strtol_l.constprop.0+0x1a>
 8005bf8:	08006ed9 	.word	0x08006ed9

08005bfc <strtol>:
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	460a      	mov	r2, r1
 8005c00:	4601      	mov	r1, r0
 8005c02:	4802      	ldr	r0, [pc, #8]	@ (8005c0c <strtol+0x10>)
 8005c04:	6800      	ldr	r0, [r0, #0]
 8005c06:	f7ff bf7f 	b.w	8005b08 <_strtol_l.constprop.0>
 8005c0a:	bf00      	nop
 8005c0c:	2000001c 	.word	0x2000001c

08005c10 <std>:
 8005c10:	2300      	movs	r3, #0
 8005c12:	b510      	push	{r4, lr}
 8005c14:	4604      	mov	r4, r0
 8005c16:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c1e:	6083      	str	r3, [r0, #8]
 8005c20:	8181      	strh	r1, [r0, #12]
 8005c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c24:	81c2      	strh	r2, [r0, #14]
 8005c26:	6183      	str	r3, [r0, #24]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	305c      	adds	r0, #92	@ 0x5c
 8005c2e:	f000 fa1b 	bl	8006068 <memset>
 8005c32:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <std+0x58>)
 8005c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <std+0x5c>)
 8005c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <std+0x60>)
 8005c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x64>)
 8005c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x68>)
 8005c44:	6224      	str	r4, [r4, #32]
 8005c46:	429c      	cmp	r4, r3
 8005c48:	d006      	beq.n	8005c58 <std+0x48>
 8005c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c4e:	4294      	cmp	r4, r2
 8005c50:	d002      	beq.n	8005c58 <std+0x48>
 8005c52:	33d0      	adds	r3, #208	@ 0xd0
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d105      	bne.n	8005c64 <std+0x54>
 8005c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c60:	f000 ba7a 	b.w	8006158 <__retarget_lock_init_recursive>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	bf00      	nop
 8005c68:	08005eb9 	.word	0x08005eb9
 8005c6c:	08005edb 	.word	0x08005edb
 8005c70:	08005f13 	.word	0x08005f13
 8005c74:	08005f37 	.word	0x08005f37
 8005c78:	2000441c 	.word	0x2000441c

08005c7c <stdio_exit_handler>:
 8005c7c:	4a02      	ldr	r2, [pc, #8]	@ (8005c88 <stdio_exit_handler+0xc>)
 8005c7e:	4903      	ldr	r1, [pc, #12]	@ (8005c8c <stdio_exit_handler+0x10>)
 8005c80:	4803      	ldr	r0, [pc, #12]	@ (8005c90 <stdio_exit_handler+0x14>)
 8005c82:	f000 b869 	b.w	8005d58 <_fwalk_sglue>
 8005c86:	bf00      	nop
 8005c88:	20000010 	.word	0x20000010
 8005c8c:	08006a41 	.word	0x08006a41
 8005c90:	20000020 	.word	0x20000020

08005c94 <cleanup_stdio>:
 8005c94:	6841      	ldr	r1, [r0, #4]
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <cleanup_stdio+0x34>)
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	d001      	beq.n	8005ca4 <cleanup_stdio+0x10>
 8005ca0:	f000 fece 	bl	8006a40 <_fflush_r>
 8005ca4:	68a1      	ldr	r1, [r4, #8]
 8005ca6:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <cleanup_stdio+0x38>)
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	d002      	beq.n	8005cb2 <cleanup_stdio+0x1e>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fec7 	bl	8006a40 <_fflush_r>
 8005cb2:	68e1      	ldr	r1, [r4, #12]
 8005cb4:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <cleanup_stdio+0x3c>)
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d004      	beq.n	8005cc4 <cleanup_stdio+0x30>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	f000 bebe 	b.w	8006a40 <_fflush_r>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	2000441c 	.word	0x2000441c
 8005ccc:	20004484 	.word	0x20004484
 8005cd0:	200044ec 	.word	0x200044ec

08005cd4 <global_stdio_init.part.0>:
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <global_stdio_init.part.0+0x30>)
 8005cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005d08 <global_stdio_init.part.0+0x34>)
 8005cda:	4a0c      	ldr	r2, [pc, #48]	@ (8005d0c <global_stdio_init.part.0+0x38>)
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	f7ff ff94 	bl	8005c10 <std>
 8005ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cec:	2201      	movs	r2, #1
 8005cee:	2109      	movs	r1, #9
 8005cf0:	f7ff ff8e 	bl	8005c10 <std>
 8005cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfe:	2112      	movs	r1, #18
 8005d00:	f7ff bf86 	b.w	8005c10 <std>
 8005d04:	20004554 	.word	0x20004554
 8005d08:	2000441c 	.word	0x2000441c
 8005d0c:	08005c7d 	.word	0x08005c7d

08005d10 <__sfp_lock_acquire>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__sfp_lock_acquire+0x8>)
 8005d12:	f000 ba22 	b.w	800615a <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	2000455d 	.word	0x2000455d

08005d1c <__sfp_lock_release>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__sfp_lock_release+0x8>)
 8005d1e:	f000 ba1d 	b.w	800615c <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	2000455d 	.word	0x2000455d

08005d28 <__sinit>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	f7ff fff0 	bl	8005d10 <__sfp_lock_acquire>
 8005d30:	6a23      	ldr	r3, [r4, #32]
 8005d32:	b11b      	cbz	r3, 8005d3c <__sinit+0x14>
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	f7ff bff0 	b.w	8005d1c <__sfp_lock_release>
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <__sinit+0x28>)
 8005d3e:	6223      	str	r3, [r4, #32]
 8005d40:	4b04      	ldr	r3, [pc, #16]	@ (8005d54 <__sinit+0x2c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f5      	bne.n	8005d34 <__sinit+0xc>
 8005d48:	f7ff ffc4 	bl	8005cd4 <global_stdio_init.part.0>
 8005d4c:	e7f2      	b.n	8005d34 <__sinit+0xc>
 8005d4e:	bf00      	nop
 8005d50:	08005c95 	.word	0x08005c95
 8005d54:	20004554 	.word	0x20004554

08005d58 <_fwalk_sglue>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	4688      	mov	r8, r1
 8005d60:	4614      	mov	r4, r2
 8005d62:	2600      	movs	r6, #0
 8005d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d68:	f1b9 0901 	subs.w	r9, r9, #1
 8005d6c:	d505      	bpl.n	8005d7a <_fwalk_sglue+0x22>
 8005d6e:	6824      	ldr	r4, [r4, #0]
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	d1f7      	bne.n	8005d64 <_fwalk_sglue+0xc>
 8005d74:	4630      	mov	r0, r6
 8005d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d907      	bls.n	8005d90 <_fwalk_sglue+0x38>
 8005d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d84:	3301      	adds	r3, #1
 8005d86:	d003      	beq.n	8005d90 <_fwalk_sglue+0x38>
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c0      	blx	r8
 8005d8e:	4306      	orrs	r6, r0
 8005d90:	3568      	adds	r5, #104	@ 0x68
 8005d92:	e7e9      	b.n	8005d68 <_fwalk_sglue+0x10>

08005d94 <_puts_r>:
 8005d94:	6a03      	ldr	r3, [r0, #32]
 8005d96:	b570      	push	{r4, r5, r6, lr}
 8005d98:	6884      	ldr	r4, [r0, #8]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	b90b      	cbnz	r3, 8005da4 <_puts_r+0x10>
 8005da0:	f7ff ffc2 	bl	8005d28 <__sinit>
 8005da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005da6:	07db      	lsls	r3, r3, #31
 8005da8:	d405      	bmi.n	8005db6 <_puts_r+0x22>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	0598      	lsls	r0, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_puts_r+0x22>
 8005db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005db2:	f000 f9d2 	bl	800615a <__retarget_lock_acquire_recursive>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	0719      	lsls	r1, r3, #28
 8005dba:	d502      	bpl.n	8005dc2 <_puts_r+0x2e>
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d135      	bne.n	8005e2e <_puts_r+0x9a>
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 f8f9 	bl	8005fbc <__swsetup_r>
 8005dca:	b380      	cbz	r0, 8005e2e <_puts_r+0x9a>
 8005dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8005dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_puts_r+0x4e>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	059b      	lsls	r3, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_puts_r+0x4e>
 8005ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dde:	f000 f9bd 	bl	800615c <__retarget_lock_release_recursive>
 8005de2:	4628      	mov	r0, r5
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da04      	bge.n	8005df4 <_puts_r+0x60>
 8005dea:	69a2      	ldr	r2, [r4, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	dc17      	bgt.n	8005e20 <_puts_r+0x8c>
 8005df0:	290a      	cmp	r1, #10
 8005df2:	d015      	beq.n	8005e20 <_puts_r+0x8c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	6022      	str	r2, [r4, #0]
 8005dfa:	7019      	strb	r1, [r3, #0]
 8005dfc:	68a3      	ldr	r3, [r4, #8]
 8005dfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e02:	3b01      	subs	r3, #1
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d1ed      	bne.n	8005de6 <_puts_r+0x52>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da11      	bge.n	8005e32 <_puts_r+0x9e>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	210a      	movs	r1, #10
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f893 	bl	8005f3e <__swbuf_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0d7      	beq.n	8005dcc <_puts_r+0x38>
 8005e1c:	250a      	movs	r5, #10
 8005e1e:	e7d7      	b.n	8005dd0 <_puts_r+0x3c>
 8005e20:	4622      	mov	r2, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f88b 	bl	8005f3e <__swbuf_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d1e7      	bne.n	8005dfc <_puts_r+0x68>
 8005e2c:	e7ce      	b.n	8005dcc <_puts_r+0x38>
 8005e2e:	3e01      	subs	r6, #1
 8005e30:	e7e4      	b.n	8005dfc <_puts_r+0x68>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	220a      	movs	r2, #10
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e7ee      	b.n	8005e1c <_puts_r+0x88>
	...

08005e40 <puts>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <puts+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f7ff bfa5 	b.w	8005d94 <_puts_r>
 8005e4a:	bf00      	nop
 8005e4c:	2000001c 	.word	0x2000001c

08005e50 <sniprintf>:
 8005e50:	b40c      	push	{r2, r3}
 8005e52:	b530      	push	{r4, r5, lr}
 8005e54:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <sniprintf+0x64>)
 8005e56:	1e0c      	subs	r4, r1, #0
 8005e58:	681d      	ldr	r5, [r3, #0]
 8005e5a:	b09d      	sub	sp, #116	@ 0x74
 8005e5c:	da08      	bge.n	8005e70 <sniprintf+0x20>
 8005e5e:	238b      	movs	r3, #139	@ 0x8b
 8005e60:	602b      	str	r3, [r5, #0]
 8005e62:	f04f 30ff 	mov.w	r0, #4294967295
 8005e66:	b01d      	add	sp, #116	@ 0x74
 8005e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6c:	b002      	add	sp, #8
 8005e6e:	4770      	bx	lr
 8005e70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e78:	bf14      	ite	ne
 8005e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e7e:	4623      	moveq	r3, r4
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	9307      	str	r3, [sp, #28]
 8005e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e88:	9002      	str	r0, [sp, #8]
 8005e8a:	9006      	str	r0, [sp, #24]
 8005e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e92:	ab21      	add	r3, sp, #132	@ 0x84
 8005e94:	a902      	add	r1, sp, #8
 8005e96:	4628      	mov	r0, r5
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	f000 fac3 	bl	8006424 <_svfiprintf_r>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	bfbc      	itt	lt
 8005ea2:	238b      	movlt	r3, #139	@ 0x8b
 8005ea4:	602b      	strlt	r3, [r5, #0]
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	d0dd      	beq.n	8005e66 <sniprintf+0x16>
 8005eaa:	9b02      	ldr	r3, [sp, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e7d9      	b.n	8005e66 <sniprintf+0x16>
 8005eb2:	bf00      	nop
 8005eb4:	2000001c 	.word	0x2000001c

08005eb8 <__sread>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	460c      	mov	r4, r1
 8005ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec0:	f000 f8fc 	bl	80060bc <_read_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	bfab      	itete	ge
 8005ec8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eca:	89a3      	ldrhlt	r3, [r4, #12]
 8005ecc:	181b      	addge	r3, r3, r0
 8005ece:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ed2:	bfac      	ite	ge
 8005ed4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ed6:	81a3      	strhlt	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__swrite>:
 8005eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	461f      	mov	r7, r3
 8005ee0:	898b      	ldrh	r3, [r1, #12]
 8005ee2:	05db      	lsls	r3, r3, #23
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4616      	mov	r6, r2
 8005eea:	d505      	bpl.n	8005ef8 <__swrite+0x1e>
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f000 f8d0 	bl	8006098 <_lseek_r>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	f000 b8e7 	b.w	80060e0 <_write_r>

08005f12 <__sseek>:
 8005f12:	b510      	push	{r4, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 f8bd 	bl	8006098 <_lseek_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	bf15      	itete	ne
 8005f24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f2e:	81a3      	strheq	r3, [r4, #12]
 8005f30:	bf18      	it	ne
 8005f32:	81a3      	strhne	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__sclose>:
 8005f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3a:	f000 b89d 	b.w	8006078 <_close_r>

08005f3e <__swbuf_r>:
 8005f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f40:	460e      	mov	r6, r1
 8005f42:	4614      	mov	r4, r2
 8005f44:	4605      	mov	r5, r0
 8005f46:	b118      	cbz	r0, 8005f50 <__swbuf_r+0x12>
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	b90b      	cbnz	r3, 8005f50 <__swbuf_r+0x12>
 8005f4c:	f7ff feec 	bl	8005d28 <__sinit>
 8005f50:	69a3      	ldr	r3, [r4, #24]
 8005f52:	60a3      	str	r3, [r4, #8]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	071a      	lsls	r2, r3, #28
 8005f58:	d501      	bpl.n	8005f5e <__swbuf_r+0x20>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	b943      	cbnz	r3, 8005f70 <__swbuf_r+0x32>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 f82b 	bl	8005fbc <__swsetup_r>
 8005f66:	b118      	cbz	r0, 8005f70 <__swbuf_r+0x32>
 8005f68:	f04f 37ff 	mov.w	r7, #4294967295
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	6922      	ldr	r2, [r4, #16]
 8005f74:	1a98      	subs	r0, r3, r2
 8005f76:	6963      	ldr	r3, [r4, #20]
 8005f78:	b2f6      	uxtb	r6, r6
 8005f7a:	4283      	cmp	r3, r0
 8005f7c:	4637      	mov	r7, r6
 8005f7e:	dc05      	bgt.n	8005f8c <__swbuf_r+0x4e>
 8005f80:	4621      	mov	r1, r4
 8005f82:	4628      	mov	r0, r5
 8005f84:	f000 fd5c 	bl	8006a40 <_fflush_r>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1ed      	bne.n	8005f68 <__swbuf_r+0x2a>
 8005f8c:	68a3      	ldr	r3, [r4, #8]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	60a3      	str	r3, [r4, #8]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	6022      	str	r2, [r4, #0]
 8005f98:	701e      	strb	r6, [r3, #0]
 8005f9a:	6962      	ldr	r2, [r4, #20]
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d004      	beq.n	8005fac <__swbuf_r+0x6e>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	07db      	lsls	r3, r3, #31
 8005fa6:	d5e1      	bpl.n	8005f6c <__swbuf_r+0x2e>
 8005fa8:	2e0a      	cmp	r6, #10
 8005faa:	d1df      	bne.n	8005f6c <__swbuf_r+0x2e>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fd46 	bl	8006a40 <_fflush_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d0d9      	beq.n	8005f6c <__swbuf_r+0x2e>
 8005fb8:	e7d6      	b.n	8005f68 <__swbuf_r+0x2a>
	...

08005fbc <__swsetup_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4b29      	ldr	r3, [pc, #164]	@ (8006064 <__swsetup_r+0xa8>)
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	b118      	cbz	r0, 8005fd0 <__swsetup_r+0x14>
 8005fc8:	6a03      	ldr	r3, [r0, #32]
 8005fca:	b90b      	cbnz	r3, 8005fd0 <__swsetup_r+0x14>
 8005fcc:	f7ff feac 	bl	8005d28 <__sinit>
 8005fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd4:	0719      	lsls	r1, r3, #28
 8005fd6:	d422      	bmi.n	800601e <__swsetup_r+0x62>
 8005fd8:	06da      	lsls	r2, r3, #27
 8005fda:	d407      	bmi.n	8005fec <__swsetup_r+0x30>
 8005fdc:	2209      	movs	r2, #9
 8005fde:	602a      	str	r2, [r5, #0]
 8005fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fea:	e033      	b.n	8006054 <__swsetup_r+0x98>
 8005fec:	0758      	lsls	r0, r3, #29
 8005fee:	d512      	bpl.n	8006016 <__swsetup_r+0x5a>
 8005ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff2:	b141      	cbz	r1, 8006006 <__swsetup_r+0x4a>
 8005ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	d002      	beq.n	8006002 <__swsetup_r+0x46>
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 f8bd 	bl	800617c <_free_r>
 8006002:	2300      	movs	r3, #0
 8006004:	6363      	str	r3, [r4, #52]	@ 0x34
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	2300      	movs	r3, #0
 8006010:	6063      	str	r3, [r4, #4]
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f043 0308 	orr.w	r3, r3, #8
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	b94b      	cbnz	r3, 8006036 <__swsetup_r+0x7a>
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800602c:	d003      	beq.n	8006036 <__swsetup_r+0x7a>
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f000 fd53 	bl	8006adc <__smakebuf_r>
 8006036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800603a:	f013 0201 	ands.w	r2, r3, #1
 800603e:	d00a      	beq.n	8006056 <__swsetup_r+0x9a>
 8006040:	2200      	movs	r2, #0
 8006042:	60a2      	str	r2, [r4, #8]
 8006044:	6962      	ldr	r2, [r4, #20]
 8006046:	4252      	negs	r2, r2
 8006048:	61a2      	str	r2, [r4, #24]
 800604a:	6922      	ldr	r2, [r4, #16]
 800604c:	b942      	cbnz	r2, 8006060 <__swsetup_r+0xa4>
 800604e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006052:	d1c5      	bne.n	8005fe0 <__swsetup_r+0x24>
 8006054:	bd38      	pop	{r3, r4, r5, pc}
 8006056:	0799      	lsls	r1, r3, #30
 8006058:	bf58      	it	pl
 800605a:	6962      	ldrpl	r2, [r4, #20]
 800605c:	60a2      	str	r2, [r4, #8]
 800605e:	e7f4      	b.n	800604a <__swsetup_r+0x8e>
 8006060:	2000      	movs	r0, #0
 8006062:	e7f7      	b.n	8006054 <__swsetup_r+0x98>
 8006064:	2000001c 	.word	0x2000001c

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <_close_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d06      	ldr	r5, [pc, #24]	@ (8006094 <_close_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb fb17 	bl	80016b6 <_close>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_close_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_close_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20004558 	.word	0x20004558

08006098 <_lseek_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d07      	ldr	r5, [pc, #28]	@ (80060b8 <_lseek_r+0x20>)
 800609c:	4604      	mov	r4, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	4611      	mov	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	602a      	str	r2, [r5, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f7fb fb2c 	bl	8001704 <_lseek>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_lseek_r+0x1e>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_lseek_r+0x1e>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	20004558 	.word	0x20004558

080060bc <_read_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	@ (80060dc <_read_r+0x20>)
 80060c0:	4604      	mov	r4, r0
 80060c2:	4608      	mov	r0, r1
 80060c4:	4611      	mov	r1, r2
 80060c6:	2200      	movs	r2, #0
 80060c8:	602a      	str	r2, [r5, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f7fb faba 	bl	8001644 <_read>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_read_r+0x1e>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_read_r+0x1e>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	20004558 	.word	0x20004558

080060e0 <_write_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d07      	ldr	r5, [pc, #28]	@ (8006100 <_write_r+0x20>)
 80060e4:	4604      	mov	r4, r0
 80060e6:	4608      	mov	r0, r1
 80060e8:	4611      	mov	r1, r2
 80060ea:	2200      	movs	r2, #0
 80060ec:	602a      	str	r2, [r5, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f7fb fac5 	bl	800167e <_write>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_write_r+0x1e>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_write_r+0x1e>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20004558 	.word	0x20004558

08006104 <__errno>:
 8006104:	4b01      	ldr	r3, [pc, #4]	@ (800610c <__errno+0x8>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	2000001c 	.word	0x2000001c

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	@ (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	@ (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	@ (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	@ (8006154 <__libc_init_array+0x44>)
 8006124:	f000 fd98 	bl	8006c58 <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	08007014 	.word	0x08007014
 800614c:	08007014 	.word	0x08007014
 8006150:	08007014 	.word	0x08007014
 8006154:	08007018 	.word	0x08007018

08006158 <__retarget_lock_init_recursive>:
 8006158:	4770      	bx	lr

0800615a <__retarget_lock_acquire_recursive>:
 800615a:	4770      	bx	lr

0800615c <__retarget_lock_release_recursive>:
 800615c:	4770      	bx	lr

0800615e <memcpy>:
 800615e:	440a      	add	r2, r1
 8006160:	4291      	cmp	r1, r2
 8006162:	f100 33ff 	add.w	r3, r0, #4294967295
 8006166:	d100      	bne.n	800616a <memcpy+0xc>
 8006168:	4770      	bx	lr
 800616a:	b510      	push	{r4, lr}
 800616c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006174:	4291      	cmp	r1, r2
 8006176:	d1f9      	bne.n	800616c <memcpy+0xe>
 8006178:	bd10      	pop	{r4, pc}
	...

0800617c <_free_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4605      	mov	r5, r0
 8006180:	2900      	cmp	r1, #0
 8006182:	d041      	beq.n	8006208 <_free_r+0x8c>
 8006184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006188:	1f0c      	subs	r4, r1, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfb8      	it	lt
 800618e:	18e4      	addlt	r4, r4, r3
 8006190:	f000 f8e0 	bl	8006354 <__malloc_lock>
 8006194:	4a1d      	ldr	r2, [pc, #116]	@ (800620c <_free_r+0x90>)
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	b933      	cbnz	r3, 80061a8 <_free_r+0x2c>
 800619a:	6063      	str	r3, [r4, #4]
 800619c:	6014      	str	r4, [r2, #0]
 800619e:	4628      	mov	r0, r5
 80061a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a4:	f000 b8dc 	b.w	8006360 <__malloc_unlock>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d908      	bls.n	80061be <_free_r+0x42>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	1821      	adds	r1, r4, r0
 80061b0:	428b      	cmp	r3, r1
 80061b2:	bf01      	itttt	eq
 80061b4:	6819      	ldreq	r1, [r3, #0]
 80061b6:	685b      	ldreq	r3, [r3, #4]
 80061b8:	1809      	addeq	r1, r1, r0
 80061ba:	6021      	streq	r1, [r4, #0]
 80061bc:	e7ed      	b.n	800619a <_free_r+0x1e>
 80061be:	461a      	mov	r2, r3
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b10b      	cbz	r3, 80061c8 <_free_r+0x4c>
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d9fa      	bls.n	80061be <_free_r+0x42>
 80061c8:	6811      	ldr	r1, [r2, #0]
 80061ca:	1850      	adds	r0, r2, r1
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d10b      	bne.n	80061e8 <_free_r+0x6c>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	4401      	add	r1, r0
 80061d4:	1850      	adds	r0, r2, r1
 80061d6:	4283      	cmp	r3, r0
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	d1e0      	bne.n	800619e <_free_r+0x22>
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	4408      	add	r0, r1
 80061e4:	6010      	str	r0, [r2, #0]
 80061e6:	e7da      	b.n	800619e <_free_r+0x22>
 80061e8:	d902      	bls.n	80061f0 <_free_r+0x74>
 80061ea:	230c      	movs	r3, #12
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	e7d6      	b.n	800619e <_free_r+0x22>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	1821      	adds	r1, r4, r0
 80061f4:	428b      	cmp	r3, r1
 80061f6:	bf04      	itt	eq
 80061f8:	6819      	ldreq	r1, [r3, #0]
 80061fa:	685b      	ldreq	r3, [r3, #4]
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	bf04      	itt	eq
 8006200:	1809      	addeq	r1, r1, r0
 8006202:	6021      	streq	r1, [r4, #0]
 8006204:	6054      	str	r4, [r2, #4]
 8006206:	e7ca      	b.n	800619e <_free_r+0x22>
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	bf00      	nop
 800620c:	20004564 	.word	0x20004564

08006210 <sbrk_aligned>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4e0f      	ldr	r6, [pc, #60]	@ (8006250 <sbrk_aligned+0x40>)
 8006214:	460c      	mov	r4, r1
 8006216:	6831      	ldr	r1, [r6, #0]
 8006218:	4605      	mov	r5, r0
 800621a:	b911      	cbnz	r1, 8006222 <sbrk_aligned+0x12>
 800621c:	f000 fcd6 	bl	8006bcc <_sbrk_r>
 8006220:	6030      	str	r0, [r6, #0]
 8006222:	4621      	mov	r1, r4
 8006224:	4628      	mov	r0, r5
 8006226:	f000 fcd1 	bl	8006bcc <_sbrk_r>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d103      	bne.n	8006236 <sbrk_aligned+0x26>
 800622e:	f04f 34ff 	mov.w	r4, #4294967295
 8006232:	4620      	mov	r0, r4
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	1cc4      	adds	r4, r0, #3
 8006238:	f024 0403 	bic.w	r4, r4, #3
 800623c:	42a0      	cmp	r0, r4
 800623e:	d0f8      	beq.n	8006232 <sbrk_aligned+0x22>
 8006240:	1a21      	subs	r1, r4, r0
 8006242:	4628      	mov	r0, r5
 8006244:	f000 fcc2 	bl	8006bcc <_sbrk_r>
 8006248:	3001      	adds	r0, #1
 800624a:	d1f2      	bne.n	8006232 <sbrk_aligned+0x22>
 800624c:	e7ef      	b.n	800622e <sbrk_aligned+0x1e>
 800624e:	bf00      	nop
 8006250:	20004560 	.word	0x20004560

08006254 <_malloc_r>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	1ccd      	adds	r5, r1, #3
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	2d00      	cmp	r5, #0
 8006268:	4606      	mov	r6, r0
 800626a:	db01      	blt.n	8006270 <_malloc_r+0x1c>
 800626c:	42a9      	cmp	r1, r5
 800626e:	d904      	bls.n	800627a <_malloc_r+0x26>
 8006270:	230c      	movs	r3, #12
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	2000      	movs	r0, #0
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006350 <_malloc_r+0xfc>
 800627e:	f000 f869 	bl	8006354 <__malloc_lock>
 8006282:	f8d8 3000 	ldr.w	r3, [r8]
 8006286:	461c      	mov	r4, r3
 8006288:	bb44      	cbnz	r4, 80062dc <_malloc_r+0x88>
 800628a:	4629      	mov	r1, r5
 800628c:	4630      	mov	r0, r6
 800628e:	f7ff ffbf 	bl	8006210 <sbrk_aligned>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	4604      	mov	r4, r0
 8006296:	d158      	bne.n	800634a <_malloc_r+0xf6>
 8006298:	f8d8 4000 	ldr.w	r4, [r8]
 800629c:	4627      	mov	r7, r4
 800629e:	2f00      	cmp	r7, #0
 80062a0:	d143      	bne.n	800632a <_malloc_r+0xd6>
 80062a2:	2c00      	cmp	r4, #0
 80062a4:	d04b      	beq.n	800633e <_malloc_r+0xea>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	4639      	mov	r1, r7
 80062aa:	4630      	mov	r0, r6
 80062ac:	eb04 0903 	add.w	r9, r4, r3
 80062b0:	f000 fc8c 	bl	8006bcc <_sbrk_r>
 80062b4:	4581      	cmp	r9, r0
 80062b6:	d142      	bne.n	800633e <_malloc_r+0xea>
 80062b8:	6821      	ldr	r1, [r4, #0]
 80062ba:	1a6d      	subs	r5, r5, r1
 80062bc:	4629      	mov	r1, r5
 80062be:	4630      	mov	r0, r6
 80062c0:	f7ff ffa6 	bl	8006210 <sbrk_aligned>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d03a      	beq.n	800633e <_malloc_r+0xea>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	442b      	add	r3, r5
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	f8d8 3000 	ldr.w	r3, [r8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	bb62      	cbnz	r2, 8006330 <_malloc_r+0xdc>
 80062d6:	f8c8 7000 	str.w	r7, [r8]
 80062da:	e00f      	b.n	80062fc <_malloc_r+0xa8>
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	1b52      	subs	r2, r2, r5
 80062e0:	d420      	bmi.n	8006324 <_malloc_r+0xd0>
 80062e2:	2a0b      	cmp	r2, #11
 80062e4:	d917      	bls.n	8006316 <_malloc_r+0xc2>
 80062e6:	1961      	adds	r1, r4, r5
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	6025      	str	r5, [r4, #0]
 80062ec:	bf18      	it	ne
 80062ee:	6059      	strne	r1, [r3, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	bf08      	it	eq
 80062f4:	f8c8 1000 	streq.w	r1, [r8]
 80062f8:	5162      	str	r2, [r4, r5]
 80062fa:	604b      	str	r3, [r1, #4]
 80062fc:	4630      	mov	r0, r6
 80062fe:	f000 f82f 	bl	8006360 <__malloc_unlock>
 8006302:	f104 000b 	add.w	r0, r4, #11
 8006306:	1d23      	adds	r3, r4, #4
 8006308:	f020 0007 	bic.w	r0, r0, #7
 800630c:	1ac2      	subs	r2, r0, r3
 800630e:	bf1c      	itt	ne
 8006310:	1a1b      	subne	r3, r3, r0
 8006312:	50a3      	strne	r3, [r4, r2]
 8006314:	e7af      	b.n	8006276 <_malloc_r+0x22>
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	42a3      	cmp	r3, r4
 800631a:	bf0c      	ite	eq
 800631c:	f8c8 2000 	streq.w	r2, [r8]
 8006320:	605a      	strne	r2, [r3, #4]
 8006322:	e7eb      	b.n	80062fc <_malloc_r+0xa8>
 8006324:	4623      	mov	r3, r4
 8006326:	6864      	ldr	r4, [r4, #4]
 8006328:	e7ae      	b.n	8006288 <_malloc_r+0x34>
 800632a:	463c      	mov	r4, r7
 800632c:	687f      	ldr	r7, [r7, #4]
 800632e:	e7b6      	b.n	800629e <_malloc_r+0x4a>
 8006330:	461a      	mov	r2, r3
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	42a3      	cmp	r3, r4
 8006336:	d1fb      	bne.n	8006330 <_malloc_r+0xdc>
 8006338:	2300      	movs	r3, #0
 800633a:	6053      	str	r3, [r2, #4]
 800633c:	e7de      	b.n	80062fc <_malloc_r+0xa8>
 800633e:	230c      	movs	r3, #12
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	4630      	mov	r0, r6
 8006344:	f000 f80c 	bl	8006360 <__malloc_unlock>
 8006348:	e794      	b.n	8006274 <_malloc_r+0x20>
 800634a:	6005      	str	r5, [r0, #0]
 800634c:	e7d6      	b.n	80062fc <_malloc_r+0xa8>
 800634e:	bf00      	nop
 8006350:	20004564 	.word	0x20004564

08006354 <__malloc_lock>:
 8006354:	4801      	ldr	r0, [pc, #4]	@ (800635c <__malloc_lock+0x8>)
 8006356:	f7ff bf00 	b.w	800615a <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	2000455c 	.word	0x2000455c

08006360 <__malloc_unlock>:
 8006360:	4801      	ldr	r0, [pc, #4]	@ (8006368 <__malloc_unlock+0x8>)
 8006362:	f7ff befb 	b.w	800615c <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	2000455c 	.word	0x2000455c

0800636c <__ssputs_r>:
 800636c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	688e      	ldr	r6, [r1, #8]
 8006372:	461f      	mov	r7, r3
 8006374:	42be      	cmp	r6, r7
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	4682      	mov	sl, r0
 800637a:	460c      	mov	r4, r1
 800637c:	4690      	mov	r8, r2
 800637e:	d82d      	bhi.n	80063dc <__ssputs_r+0x70>
 8006380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006388:	d026      	beq.n	80063d8 <__ssputs_r+0x6c>
 800638a:	6965      	ldr	r5, [r4, #20]
 800638c:	6909      	ldr	r1, [r1, #16]
 800638e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006392:	eba3 0901 	sub.w	r9, r3, r1
 8006396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800639a:	1c7b      	adds	r3, r7, #1
 800639c:	444b      	add	r3, r9
 800639e:	106d      	asrs	r5, r5, #1
 80063a0:	429d      	cmp	r5, r3
 80063a2:	bf38      	it	cc
 80063a4:	461d      	movcc	r5, r3
 80063a6:	0553      	lsls	r3, r2, #21
 80063a8:	d527      	bpl.n	80063fa <__ssputs_r+0x8e>
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7ff ff52 	bl	8006254 <_malloc_r>
 80063b0:	4606      	mov	r6, r0
 80063b2:	b360      	cbz	r0, 800640e <__ssputs_r+0xa2>
 80063b4:	6921      	ldr	r1, [r4, #16]
 80063b6:	464a      	mov	r2, r9
 80063b8:	f7ff fed1 	bl	800615e <memcpy>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	6126      	str	r6, [r4, #16]
 80063ca:	6165      	str	r5, [r4, #20]
 80063cc:	444e      	add	r6, r9
 80063ce:	eba5 0509 	sub.w	r5, r5, r9
 80063d2:	6026      	str	r6, [r4, #0]
 80063d4:	60a5      	str	r5, [r4, #8]
 80063d6:	463e      	mov	r6, r7
 80063d8:	42be      	cmp	r6, r7
 80063da:	d900      	bls.n	80063de <__ssputs_r+0x72>
 80063dc:	463e      	mov	r6, r7
 80063de:	6820      	ldr	r0, [r4, #0]
 80063e0:	4632      	mov	r2, r6
 80063e2:	4641      	mov	r1, r8
 80063e4:	f000 fbb6 	bl	8006b54 <memmove>
 80063e8:	68a3      	ldr	r3, [r4, #8]
 80063ea:	1b9b      	subs	r3, r3, r6
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	4433      	add	r3, r6
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	2000      	movs	r0, #0
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	462a      	mov	r2, r5
 80063fc:	f000 fbf6 	bl	8006bec <_realloc_r>
 8006400:	4606      	mov	r6, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	d1e0      	bne.n	80063c8 <__ssputs_r+0x5c>
 8006406:	6921      	ldr	r1, [r4, #16]
 8006408:	4650      	mov	r0, sl
 800640a:	f7ff feb7 	bl	800617c <_free_r>
 800640e:	230c      	movs	r3, #12
 8006410:	f8ca 3000 	str.w	r3, [sl]
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e7e9      	b.n	80063f6 <__ssputs_r+0x8a>
	...

08006424 <_svfiprintf_r>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4698      	mov	r8, r3
 800642a:	898b      	ldrh	r3, [r1, #12]
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	b09d      	sub	sp, #116	@ 0x74
 8006430:	4607      	mov	r7, r0
 8006432:	460d      	mov	r5, r1
 8006434:	4614      	mov	r4, r2
 8006436:	d510      	bpl.n	800645a <_svfiprintf_r+0x36>
 8006438:	690b      	ldr	r3, [r1, #16]
 800643a:	b973      	cbnz	r3, 800645a <_svfiprintf_r+0x36>
 800643c:	2140      	movs	r1, #64	@ 0x40
 800643e:	f7ff ff09 	bl	8006254 <_malloc_r>
 8006442:	6028      	str	r0, [r5, #0]
 8006444:	6128      	str	r0, [r5, #16]
 8006446:	b930      	cbnz	r0, 8006456 <_svfiprintf_r+0x32>
 8006448:	230c      	movs	r3, #12
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	b01d      	add	sp, #116	@ 0x74
 8006452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	2340      	movs	r3, #64	@ 0x40
 8006458:	616b      	str	r3, [r5, #20]
 800645a:	2300      	movs	r3, #0
 800645c:	9309      	str	r3, [sp, #36]	@ 0x24
 800645e:	2320      	movs	r3, #32
 8006460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006464:	f8cd 800c 	str.w	r8, [sp, #12]
 8006468:	2330      	movs	r3, #48	@ 0x30
 800646a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006608 <_svfiprintf_r+0x1e4>
 800646e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006472:	f04f 0901 	mov.w	r9, #1
 8006476:	4623      	mov	r3, r4
 8006478:	469a      	mov	sl, r3
 800647a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647e:	b10a      	cbz	r2, 8006484 <_svfiprintf_r+0x60>
 8006480:	2a25      	cmp	r2, #37	@ 0x25
 8006482:	d1f9      	bne.n	8006478 <_svfiprintf_r+0x54>
 8006484:	ebba 0b04 	subs.w	fp, sl, r4
 8006488:	d00b      	beq.n	80064a2 <_svfiprintf_r+0x7e>
 800648a:	465b      	mov	r3, fp
 800648c:	4622      	mov	r2, r4
 800648e:	4629      	mov	r1, r5
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ff6b 	bl	800636c <__ssputs_r>
 8006496:	3001      	adds	r0, #1
 8006498:	f000 80a7 	beq.w	80065ea <_svfiprintf_r+0x1c6>
 800649c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800649e:	445a      	add	r2, fp
 80064a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a2:	f89a 3000 	ldrb.w	r3, [sl]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 809f 	beq.w	80065ea <_svfiprintf_r+0x1c6>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b6:	f10a 0a01 	add.w	sl, sl, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	9307      	str	r3, [sp, #28]
 80064be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80064c4:	4654      	mov	r4, sl
 80064c6:	2205      	movs	r2, #5
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	484e      	ldr	r0, [pc, #312]	@ (8006608 <_svfiprintf_r+0x1e4>)
 80064ce:	f7f9 fe9f 	bl	8000210 <memchr>
 80064d2:	9a04      	ldr	r2, [sp, #16]
 80064d4:	b9d8      	cbnz	r0, 800650e <_svfiprintf_r+0xea>
 80064d6:	06d0      	lsls	r0, r2, #27
 80064d8:	bf44      	itt	mi
 80064da:	2320      	movmi	r3, #32
 80064dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e0:	0711      	lsls	r1, r2, #28
 80064e2:	bf44      	itt	mi
 80064e4:	232b      	movmi	r3, #43	@ 0x2b
 80064e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ea:	f89a 3000 	ldrb.w	r3, [sl]
 80064ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f0:	d015      	beq.n	800651e <_svfiprintf_r+0xfa>
 80064f2:	9a07      	ldr	r2, [sp, #28]
 80064f4:	4654      	mov	r4, sl
 80064f6:	2000      	movs	r0, #0
 80064f8:	f04f 0c0a 	mov.w	ip, #10
 80064fc:	4621      	mov	r1, r4
 80064fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006502:	3b30      	subs	r3, #48	@ 0x30
 8006504:	2b09      	cmp	r3, #9
 8006506:	d94b      	bls.n	80065a0 <_svfiprintf_r+0x17c>
 8006508:	b1b0      	cbz	r0, 8006538 <_svfiprintf_r+0x114>
 800650a:	9207      	str	r2, [sp, #28]
 800650c:	e014      	b.n	8006538 <_svfiprintf_r+0x114>
 800650e:	eba0 0308 	sub.w	r3, r0, r8
 8006512:	fa09 f303 	lsl.w	r3, r9, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	46a2      	mov	sl, r4
 800651c:	e7d2      	b.n	80064c4 <_svfiprintf_r+0xa0>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	9103      	str	r1, [sp, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfbb      	ittet	lt
 800652a:	425b      	neglt	r3, r3
 800652c:	f042 0202 	orrlt.w	r2, r2, #2
 8006530:	9307      	strge	r3, [sp, #28]
 8006532:	9307      	strlt	r3, [sp, #28]
 8006534:	bfb8      	it	lt
 8006536:	9204      	strlt	r2, [sp, #16]
 8006538:	7823      	ldrb	r3, [r4, #0]
 800653a:	2b2e      	cmp	r3, #46	@ 0x2e
 800653c:	d10a      	bne.n	8006554 <_svfiprintf_r+0x130>
 800653e:	7863      	ldrb	r3, [r4, #1]
 8006540:	2b2a      	cmp	r3, #42	@ 0x2a
 8006542:	d132      	bne.n	80065aa <_svfiprintf_r+0x186>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006550:	3402      	adds	r4, #2
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006618 <_svfiprintf_r+0x1f4>
 8006558:	7821      	ldrb	r1, [r4, #0]
 800655a:	2203      	movs	r2, #3
 800655c:	4650      	mov	r0, sl
 800655e:	f7f9 fe57 	bl	8000210 <memchr>
 8006562:	b138      	cbz	r0, 8006574 <_svfiprintf_r+0x150>
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	eba0 000a 	sub.w	r0, r0, sl
 800656a:	2240      	movs	r2, #64	@ 0x40
 800656c:	4082      	lsls	r2, r0
 800656e:	4313      	orrs	r3, r2
 8006570:	3401      	adds	r4, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	4824      	ldr	r0, [pc, #144]	@ (800660c <_svfiprintf_r+0x1e8>)
 800657a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800657e:	2206      	movs	r2, #6
 8006580:	f7f9 fe46 	bl	8000210 <memchr>
 8006584:	2800      	cmp	r0, #0
 8006586:	d036      	beq.n	80065f6 <_svfiprintf_r+0x1d2>
 8006588:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <_svfiprintf_r+0x1ec>)
 800658a:	bb1b      	cbnz	r3, 80065d4 <_svfiprintf_r+0x1b0>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	3308      	adds	r3, #8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659a:	4433      	add	r3, r6
 800659c:	9309      	str	r3, [sp, #36]	@ 0x24
 800659e:	e76a      	b.n	8006476 <_svfiprintf_r+0x52>
 80065a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a4:	460c      	mov	r4, r1
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7a8      	b.n	80064fc <_svfiprintf_r+0xd8>
 80065aa:	2300      	movs	r3, #0
 80065ac:	3401      	adds	r4, #1
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 0c0a 	mov.w	ip, #10
 80065b6:	4620      	mov	r0, r4
 80065b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065bc:	3a30      	subs	r2, #48	@ 0x30
 80065be:	2a09      	cmp	r2, #9
 80065c0:	d903      	bls.n	80065ca <_svfiprintf_r+0x1a6>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0c6      	beq.n	8006554 <_svfiprintf_r+0x130>
 80065c6:	9105      	str	r1, [sp, #20]
 80065c8:	e7c4      	b.n	8006554 <_svfiprintf_r+0x130>
 80065ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ce:	4604      	mov	r4, r0
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f0      	b.n	80065b6 <_svfiprintf_r+0x192>
 80065d4:	ab03      	add	r3, sp, #12
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	462a      	mov	r2, r5
 80065da:	4b0e      	ldr	r3, [pc, #56]	@ (8006614 <_svfiprintf_r+0x1f0>)
 80065dc:	a904      	add	r1, sp, #16
 80065de:	4638      	mov	r0, r7
 80065e0:	f3af 8000 	nop.w
 80065e4:	1c42      	adds	r2, r0, #1
 80065e6:	4606      	mov	r6, r0
 80065e8:	d1d6      	bne.n	8006598 <_svfiprintf_r+0x174>
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	065b      	lsls	r3, r3, #25
 80065ee:	f53f af2d 	bmi.w	800644c <_svfiprintf_r+0x28>
 80065f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f4:	e72c      	b.n	8006450 <_svfiprintf_r+0x2c>
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	462a      	mov	r2, r5
 80065fc:	4b05      	ldr	r3, [pc, #20]	@ (8006614 <_svfiprintf_r+0x1f0>)
 80065fe:	a904      	add	r1, sp, #16
 8006600:	4638      	mov	r0, r7
 8006602:	f000 f879 	bl	80066f8 <_printf_i>
 8006606:	e7ed      	b.n	80065e4 <_svfiprintf_r+0x1c0>
 8006608:	08006fd9 	.word	0x08006fd9
 800660c:	08006fe3 	.word	0x08006fe3
 8006610:	00000000 	.word	0x00000000
 8006614:	0800636d 	.word	0x0800636d
 8006618:	08006fdf 	.word	0x08006fdf

0800661c <_printf_common>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	4616      	mov	r6, r2
 8006622:	4698      	mov	r8, r3
 8006624:	688a      	ldr	r2, [r1, #8]
 8006626:	690b      	ldr	r3, [r1, #16]
 8006628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800662c:	4293      	cmp	r3, r2
 800662e:	bfb8      	it	lt
 8006630:	4613      	movlt	r3, r2
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006638:	4607      	mov	r7, r0
 800663a:	460c      	mov	r4, r1
 800663c:	b10a      	cbz	r2, 8006642 <_printf_common+0x26>
 800663e:	3301      	adds	r3, #1
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	0699      	lsls	r1, r3, #26
 8006646:	bf42      	ittt	mi
 8006648:	6833      	ldrmi	r3, [r6, #0]
 800664a:	3302      	addmi	r3, #2
 800664c:	6033      	strmi	r3, [r6, #0]
 800664e:	6825      	ldr	r5, [r4, #0]
 8006650:	f015 0506 	ands.w	r5, r5, #6
 8006654:	d106      	bne.n	8006664 <_printf_common+0x48>
 8006656:	f104 0a19 	add.w	sl, r4, #25
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	6832      	ldr	r2, [r6, #0]
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	42ab      	cmp	r3, r5
 8006662:	dc26      	bgt.n	80066b2 <_printf_common+0x96>
 8006664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	3b00      	subs	r3, #0
 800666c:	bf18      	it	ne
 800666e:	2301      	movne	r3, #1
 8006670:	0692      	lsls	r2, r2, #26
 8006672:	d42b      	bmi.n	80066cc <_printf_common+0xb0>
 8006674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006678:	4641      	mov	r1, r8
 800667a:	4638      	mov	r0, r7
 800667c:	47c8      	blx	r9
 800667e:	3001      	adds	r0, #1
 8006680:	d01e      	beq.n	80066c0 <_printf_common+0xa4>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	6922      	ldr	r2, [r4, #16]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	2b04      	cmp	r3, #4
 800668c:	bf02      	ittt	eq
 800668e:	68e5      	ldreq	r5, [r4, #12]
 8006690:	6833      	ldreq	r3, [r6, #0]
 8006692:	1aed      	subeq	r5, r5, r3
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	bf0c      	ite	eq
 8006698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800669c:	2500      	movne	r5, #0
 800669e:	4293      	cmp	r3, r2
 80066a0:	bfc4      	itt	gt
 80066a2:	1a9b      	subgt	r3, r3, r2
 80066a4:	18ed      	addgt	r5, r5, r3
 80066a6:	2600      	movs	r6, #0
 80066a8:	341a      	adds	r4, #26
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	d11a      	bne.n	80066e4 <_printf_common+0xc8>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e008      	b.n	80066c4 <_printf_common+0xa8>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4652      	mov	r2, sl
 80066b6:	4641      	mov	r1, r8
 80066b8:	4638      	mov	r0, r7
 80066ba:	47c8      	blx	r9
 80066bc:	3001      	adds	r0, #1
 80066be:	d103      	bne.n	80066c8 <_printf_common+0xac>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7c6      	b.n	800665a <_printf_common+0x3e>
 80066cc:	18e1      	adds	r1, r4, r3
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	2030      	movs	r0, #48	@ 0x30
 80066d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066d6:	4422      	add	r2, r4
 80066d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066e0:	3302      	adds	r3, #2
 80066e2:	e7c7      	b.n	8006674 <_printf_common+0x58>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4622      	mov	r2, r4
 80066e8:	4641      	mov	r1, r8
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c8      	blx	r9
 80066ee:	3001      	adds	r0, #1
 80066f0:	d0e6      	beq.n	80066c0 <_printf_common+0xa4>
 80066f2:	3601      	adds	r6, #1
 80066f4:	e7d9      	b.n	80066aa <_printf_common+0x8e>
	...

080066f8 <_printf_i>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	7e0f      	ldrb	r7, [r1, #24]
 80066fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006700:	2f78      	cmp	r7, #120	@ 0x78
 8006702:	4691      	mov	r9, r2
 8006704:	4680      	mov	r8, r0
 8006706:	460c      	mov	r4, r1
 8006708:	469a      	mov	sl, r3
 800670a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800670e:	d807      	bhi.n	8006720 <_printf_i+0x28>
 8006710:	2f62      	cmp	r7, #98	@ 0x62
 8006712:	d80a      	bhi.n	800672a <_printf_i+0x32>
 8006714:	2f00      	cmp	r7, #0
 8006716:	f000 80d2 	beq.w	80068be <_printf_i+0x1c6>
 800671a:	2f58      	cmp	r7, #88	@ 0x58
 800671c:	f000 80b9 	beq.w	8006892 <_printf_i+0x19a>
 8006720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006728:	e03a      	b.n	80067a0 <_printf_i+0xa8>
 800672a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800672e:	2b15      	cmp	r3, #21
 8006730:	d8f6      	bhi.n	8006720 <_printf_i+0x28>
 8006732:	a101      	add	r1, pc, #4	@ (adr r1, 8006738 <_printf_i+0x40>)
 8006734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006738:	08006791 	.word	0x08006791
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006721 	.word	0x08006721
 8006744:	08006721 	.word	0x08006721
 8006748:	08006721 	.word	0x08006721
 800674c:	08006721 	.word	0x08006721
 8006750:	080067a5 	.word	0x080067a5
 8006754:	08006721 	.word	0x08006721
 8006758:	08006721 	.word	0x08006721
 800675c:	08006721 	.word	0x08006721
 8006760:	08006721 	.word	0x08006721
 8006764:	080068a5 	.word	0x080068a5
 8006768:	080067cf 	.word	0x080067cf
 800676c:	0800685f 	.word	0x0800685f
 8006770:	08006721 	.word	0x08006721
 8006774:	08006721 	.word	0x08006721
 8006778:	080068c7 	.word	0x080068c7
 800677c:	08006721 	.word	0x08006721
 8006780:	080067cf 	.word	0x080067cf
 8006784:	08006721 	.word	0x08006721
 8006788:	08006721 	.word	0x08006721
 800678c:	08006867 	.word	0x08006867
 8006790:	6833      	ldr	r3, [r6, #0]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6032      	str	r2, [r6, #0]
 8006798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800679c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067a0:	2301      	movs	r3, #1
 80067a2:	e09d      	b.n	80068e0 <_printf_i+0x1e8>
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	6031      	str	r1, [r6, #0]
 80067ac:	0606      	lsls	r6, r0, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xbc>
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	e003      	b.n	80067bc <_printf_i+0xc4>
 80067b4:	0645      	lsls	r5, r0, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xb8>
 80067b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	da03      	bge.n	80067c8 <_printf_i+0xd0>
 80067c0:	232d      	movs	r3, #45	@ 0x2d
 80067c2:	426d      	negs	r5, r5
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c8:	4859      	ldr	r0, [pc, #356]	@ (8006930 <_printf_i+0x238>)
 80067ca:	230a      	movs	r3, #10
 80067cc:	e011      	b.n	80067f2 <_printf_i+0xfa>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	0608      	lsls	r0, r1, #24
 80067d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067d8:	d402      	bmi.n	80067e0 <_printf_i+0xe8>
 80067da:	0649      	lsls	r1, r1, #25
 80067dc:	bf48      	it	mi
 80067de:	b2ad      	uxthmi	r5, r5
 80067e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067e2:	4853      	ldr	r0, [pc, #332]	@ (8006930 <_printf_i+0x238>)
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	bf14      	ite	ne
 80067e8:	230a      	movne	r3, #10
 80067ea:	2308      	moveq	r3, #8
 80067ec:	2100      	movs	r1, #0
 80067ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067f2:	6866      	ldr	r6, [r4, #4]
 80067f4:	60a6      	str	r6, [r4, #8]
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	bfa2      	ittt	ge
 80067fa:	6821      	ldrge	r1, [r4, #0]
 80067fc:	f021 0104 	bicge.w	r1, r1, #4
 8006800:	6021      	strge	r1, [r4, #0]
 8006802:	b90d      	cbnz	r5, 8006808 <_printf_i+0x110>
 8006804:	2e00      	cmp	r6, #0
 8006806:	d04b      	beq.n	80068a0 <_printf_i+0x1a8>
 8006808:	4616      	mov	r6, r2
 800680a:	fbb5 f1f3 	udiv	r1, r5, r3
 800680e:	fb03 5711 	mls	r7, r3, r1, r5
 8006812:	5dc7      	ldrb	r7, [r0, r7]
 8006814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006818:	462f      	mov	r7, r5
 800681a:	42bb      	cmp	r3, r7
 800681c:	460d      	mov	r5, r1
 800681e:	d9f4      	bls.n	800680a <_printf_i+0x112>
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10b      	bne.n	800683c <_printf_i+0x144>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07df      	lsls	r7, r3, #31
 8006828:	d508      	bpl.n	800683c <_printf_i+0x144>
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	6861      	ldr	r1, [r4, #4]
 800682e:	4299      	cmp	r1, r3
 8006830:	bfde      	ittt	le
 8006832:	2330      	movle	r3, #48	@ 0x30
 8006834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800683c:	1b92      	subs	r2, r2, r6
 800683e:	6122      	str	r2, [r4, #16]
 8006840:	f8cd a000 	str.w	sl, [sp]
 8006844:	464b      	mov	r3, r9
 8006846:	aa03      	add	r2, sp, #12
 8006848:	4621      	mov	r1, r4
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fee6 	bl	800661c <_printf_common>
 8006850:	3001      	adds	r0, #1
 8006852:	d14a      	bne.n	80068ea <_printf_i+0x1f2>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b004      	add	sp, #16
 800685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	4833      	ldr	r0, [pc, #204]	@ (8006934 <_printf_i+0x23c>)
 8006868:	2778      	movs	r7, #120	@ 0x78
 800686a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6831      	ldr	r1, [r6, #0]
 8006872:	061f      	lsls	r7, r3, #24
 8006874:	f851 5b04 	ldr.w	r5, [r1], #4
 8006878:	d402      	bmi.n	8006880 <_printf_i+0x188>
 800687a:	065f      	lsls	r7, r3, #25
 800687c:	bf48      	it	mi
 800687e:	b2ad      	uxthmi	r5, r5
 8006880:	6031      	str	r1, [r6, #0]
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	bf44      	itt	mi
 8006886:	f043 0320 	orrmi.w	r3, r3, #32
 800688a:	6023      	strmi	r3, [r4, #0]
 800688c:	b11d      	cbz	r5, 8006896 <_printf_i+0x19e>
 800688e:	2310      	movs	r3, #16
 8006890:	e7ac      	b.n	80067ec <_printf_i+0xf4>
 8006892:	4827      	ldr	r0, [pc, #156]	@ (8006930 <_printf_i+0x238>)
 8006894:	e7e9      	b.n	800686a <_printf_i+0x172>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f023 0320 	bic.w	r3, r3, #32
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	e7f6      	b.n	800688e <_printf_i+0x196>
 80068a0:	4616      	mov	r6, r2
 80068a2:	e7bd      	b.n	8006820 <_printf_i+0x128>
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	6825      	ldr	r5, [r4, #0]
 80068a8:	6961      	ldr	r1, [r4, #20]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	062e      	lsls	r6, r5, #24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0x1c0>
 80068b4:	6019      	str	r1, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0x1c6>
 80068b8:	0668      	lsls	r0, r5, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0x1bc>
 80068bc:	8019      	strh	r1, [r3, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bc      	b.n	8006840 <_printf_i+0x148>
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	6032      	str	r2, [r6, #0]
 80068cc:	681e      	ldr	r6, [r3, #0]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	2100      	movs	r1, #0
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fc9c 	bl	8000210 <memchr>
 80068d8:	b108      	cbz	r0, 80068de <_printf_i+0x1e6>
 80068da:	1b80      	subs	r0, r0, r6
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e8:	e7aa      	b.n	8006840 <_printf_i+0x148>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0ad      	beq.n	8006854 <_printf_i+0x15c>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d413      	bmi.n	8006926 <_printf_i+0x22e>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e7a6      	b.n	8006858 <_printf_i+0x160>
 800690a:	2301      	movs	r3, #1
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d09d      	beq.n	8006854 <_printf_i+0x15c>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9903      	ldr	r1, [sp, #12]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf2      	bgt.n	800690a <_printf_i+0x212>
 8006924:	e7eb      	b.n	80068fe <_printf_i+0x206>
 8006926:	2500      	movs	r5, #0
 8006928:	f104 0619 	add.w	r6, r4, #25
 800692c:	e7f5      	b.n	800691a <_printf_i+0x222>
 800692e:	bf00      	nop
 8006930:	08006fea 	.word	0x08006fea
 8006934:	08006ffb 	.word	0x08006ffb

08006938 <__sflush_r>:
 8006938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	0716      	lsls	r6, r2, #28
 8006942:	4605      	mov	r5, r0
 8006944:	460c      	mov	r4, r1
 8006946:	d454      	bmi.n	80069f2 <__sflush_r+0xba>
 8006948:	684b      	ldr	r3, [r1, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc02      	bgt.n	8006954 <__sflush_r+0x1c>
 800694e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	dd48      	ble.n	80069e6 <__sflush_r+0xae>
 8006954:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006956:	2e00      	cmp	r6, #0
 8006958:	d045      	beq.n	80069e6 <__sflush_r+0xae>
 800695a:	2300      	movs	r3, #0
 800695c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006960:	682f      	ldr	r7, [r5, #0]
 8006962:	6a21      	ldr	r1, [r4, #32]
 8006964:	602b      	str	r3, [r5, #0]
 8006966:	d030      	beq.n	80069ca <__sflush_r+0x92>
 8006968:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	0759      	lsls	r1, r3, #29
 800696e:	d505      	bpl.n	800697c <__sflush_r+0x44>
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006976:	b10b      	cbz	r3, 800697c <__sflush_r+0x44>
 8006978:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006980:	6a21      	ldr	r1, [r4, #32]
 8006982:	4628      	mov	r0, r5
 8006984:	47b0      	blx	r6
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	d106      	bne.n	800699a <__sflush_r+0x62>
 800698c:	6829      	ldr	r1, [r5, #0]
 800698e:	291d      	cmp	r1, #29
 8006990:	d82b      	bhi.n	80069ea <__sflush_r+0xb2>
 8006992:	4a2a      	ldr	r2, [pc, #168]	@ (8006a3c <__sflush_r+0x104>)
 8006994:	410a      	asrs	r2, r1
 8006996:	07d6      	lsls	r6, r2, #31
 8006998:	d427      	bmi.n	80069ea <__sflush_r+0xb2>
 800699a:	2200      	movs	r2, #0
 800699c:	6062      	str	r2, [r4, #4]
 800699e:	04d9      	lsls	r1, r3, #19
 80069a0:	6922      	ldr	r2, [r4, #16]
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	d504      	bpl.n	80069b0 <__sflush_r+0x78>
 80069a6:	1c42      	adds	r2, r0, #1
 80069a8:	d101      	bne.n	80069ae <__sflush_r+0x76>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	b903      	cbnz	r3, 80069b0 <__sflush_r+0x78>
 80069ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80069b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069b2:	602f      	str	r7, [r5, #0]
 80069b4:	b1b9      	cbz	r1, 80069e6 <__sflush_r+0xae>
 80069b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069ba:	4299      	cmp	r1, r3
 80069bc:	d002      	beq.n	80069c4 <__sflush_r+0x8c>
 80069be:	4628      	mov	r0, r5
 80069c0:	f7ff fbdc 	bl	800617c <_free_r>
 80069c4:	2300      	movs	r3, #0
 80069c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80069c8:	e00d      	b.n	80069e6 <__sflush_r+0xae>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b0      	blx	r6
 80069d0:	4602      	mov	r2, r0
 80069d2:	1c50      	adds	r0, r2, #1
 80069d4:	d1c9      	bne.n	800696a <__sflush_r+0x32>
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0c6      	beq.n	800696a <__sflush_r+0x32>
 80069dc:	2b1d      	cmp	r3, #29
 80069de:	d001      	beq.n	80069e4 <__sflush_r+0xac>
 80069e0:	2b16      	cmp	r3, #22
 80069e2:	d11e      	bne.n	8006a22 <__sflush_r+0xea>
 80069e4:	602f      	str	r7, [r5, #0]
 80069e6:	2000      	movs	r0, #0
 80069e8:	e022      	b.n	8006a30 <__sflush_r+0xf8>
 80069ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ee:	b21b      	sxth	r3, r3
 80069f0:	e01b      	b.n	8006a2a <__sflush_r+0xf2>
 80069f2:	690f      	ldr	r7, [r1, #16]
 80069f4:	2f00      	cmp	r7, #0
 80069f6:	d0f6      	beq.n	80069e6 <__sflush_r+0xae>
 80069f8:	0793      	lsls	r3, r2, #30
 80069fa:	680e      	ldr	r6, [r1, #0]
 80069fc:	bf08      	it	eq
 80069fe:	694b      	ldreq	r3, [r1, #20]
 8006a00:	600f      	str	r7, [r1, #0]
 8006a02:	bf18      	it	ne
 8006a04:	2300      	movne	r3, #0
 8006a06:	eba6 0807 	sub.w	r8, r6, r7
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	f1b8 0f00 	cmp.w	r8, #0
 8006a10:	dde9      	ble.n	80069e6 <__sflush_r+0xae>
 8006a12:	6a21      	ldr	r1, [r4, #32]
 8006a14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a16:	4643      	mov	r3, r8
 8006a18:	463a      	mov	r2, r7
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b0      	blx	r6
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	dc08      	bgt.n	8006a34 <__sflush_r+0xfc>
 8006a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a34:	4407      	add	r7, r0
 8006a36:	eba8 0800 	sub.w	r8, r8, r0
 8006a3a:	e7e7      	b.n	8006a0c <__sflush_r+0xd4>
 8006a3c:	dfbffffe 	.word	0xdfbffffe

08006a40 <_fflush_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	690b      	ldr	r3, [r1, #16]
 8006a44:	4605      	mov	r5, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b913      	cbnz	r3, 8006a50 <_fflush_r+0x10>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	b118      	cbz	r0, 8006a5a <_fflush_r+0x1a>
 8006a52:	6a03      	ldr	r3, [r0, #32]
 8006a54:	b90b      	cbnz	r3, 8006a5a <_fflush_r+0x1a>
 8006a56:	f7ff f967 	bl	8005d28 <__sinit>
 8006a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f3      	beq.n	8006a4a <_fflush_r+0xa>
 8006a62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a64:	07d0      	lsls	r0, r2, #31
 8006a66:	d404      	bmi.n	8006a72 <_fflush_r+0x32>
 8006a68:	0599      	lsls	r1, r3, #22
 8006a6a:	d402      	bmi.n	8006a72 <_fflush_r+0x32>
 8006a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a6e:	f7ff fb74 	bl	800615a <__retarget_lock_acquire_recursive>
 8006a72:	4628      	mov	r0, r5
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7ff ff5f 	bl	8006938 <__sflush_r>
 8006a7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a7c:	07da      	lsls	r2, r3, #31
 8006a7e:	4605      	mov	r5, r0
 8006a80:	d4e4      	bmi.n	8006a4c <_fflush_r+0xc>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	059b      	lsls	r3, r3, #22
 8006a86:	d4e1      	bmi.n	8006a4c <_fflush_r+0xc>
 8006a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8a:	f7ff fb67 	bl	800615c <__retarget_lock_release_recursive>
 8006a8e:	e7dd      	b.n	8006a4c <_fflush_r+0xc>

08006a90 <__swhatbuf_r>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	460c      	mov	r4, r1
 8006a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	b096      	sub	sp, #88	@ 0x58
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	da0d      	bge.n	8006abe <__swhatbuf_r+0x2e>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aa8:	f04f 0100 	mov.w	r1, #0
 8006aac:	bf14      	ite	ne
 8006aae:	2340      	movne	r3, #64	@ 0x40
 8006ab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	6031      	str	r1, [r6, #0]
 8006ab8:	602b      	str	r3, [r5, #0]
 8006aba:	b016      	add	sp, #88	@ 0x58
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
 8006abe:	466a      	mov	r2, sp
 8006ac0:	f000 f862 	bl	8006b88 <_fstat_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	dbec      	blt.n	8006aa2 <__swhatbuf_r+0x12>
 8006ac8:	9901      	ldr	r1, [sp, #4]
 8006aca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ad2:	4259      	negs	r1, r3
 8006ad4:	4159      	adcs	r1, r3
 8006ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ada:	e7eb      	b.n	8006ab4 <__swhatbuf_r+0x24>

08006adc <__smakebuf_r>:
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae0:	079d      	lsls	r5, r3, #30
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	d507      	bpl.n	8006af8 <__smakebuf_r+0x1c>
 8006ae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	6123      	str	r3, [r4, #16]
 8006af0:	2301      	movs	r3, #1
 8006af2:	6163      	str	r3, [r4, #20]
 8006af4:	b003      	add	sp, #12
 8006af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af8:	ab01      	add	r3, sp, #4
 8006afa:	466a      	mov	r2, sp
 8006afc:	f7ff ffc8 	bl	8006a90 <__swhatbuf_r>
 8006b00:	9f00      	ldr	r7, [sp, #0]
 8006b02:	4605      	mov	r5, r0
 8006b04:	4639      	mov	r1, r7
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff fba4 	bl	8006254 <_malloc_r>
 8006b0c:	b948      	cbnz	r0, 8006b22 <__smakebuf_r+0x46>
 8006b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b12:	059a      	lsls	r2, r3, #22
 8006b14:	d4ee      	bmi.n	8006af4 <__smakebuf_r+0x18>
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	f043 0302 	orr.w	r3, r3, #2
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	e7e2      	b.n	8006ae8 <__smakebuf_r+0xc>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	6020      	str	r0, [r4, #0]
 8006b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b32:	b15b      	cbz	r3, 8006b4c <__smakebuf_r+0x70>
 8006b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 f837 	bl	8006bac <_isatty_r>
 8006b3e:	b128      	cbz	r0, 8006b4c <__smakebuf_r+0x70>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	431d      	orrs	r5, r3
 8006b50:	81a5      	strh	r5, [r4, #12]
 8006b52:	e7cf      	b.n	8006af4 <__smakebuf_r+0x18>

08006b54 <memmove>:
 8006b54:	4288      	cmp	r0, r1
 8006b56:	b510      	push	{r4, lr}
 8006b58:	eb01 0402 	add.w	r4, r1, r2
 8006b5c:	d902      	bls.n	8006b64 <memmove+0x10>
 8006b5e:	4284      	cmp	r4, r0
 8006b60:	4623      	mov	r3, r4
 8006b62:	d807      	bhi.n	8006b74 <memmove+0x20>
 8006b64:	1e43      	subs	r3, r0, #1
 8006b66:	42a1      	cmp	r1, r4
 8006b68:	d008      	beq.n	8006b7c <memmove+0x28>
 8006b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b72:	e7f8      	b.n	8006b66 <memmove+0x12>
 8006b74:	4402      	add	r2, r0
 8006b76:	4601      	mov	r1, r0
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d100      	bne.n	8006b7e <memmove+0x2a>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b86:	e7f7      	b.n	8006b78 <memmove+0x24>

08006b88 <_fstat_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ba8 <_fstat_r+0x20>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	f7fa fd9a 	bl	80016ce <_fstat>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d102      	bne.n	8006ba4 <_fstat_r+0x1c>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	b103      	cbz	r3, 8006ba4 <_fstat_r+0x1c>
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	bd38      	pop	{r3, r4, r5, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20004558 	.word	0x20004558

08006bac <_isatty_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d06      	ldr	r5, [pc, #24]	@ (8006bc8 <_isatty_r+0x1c>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	f7fa fd99 	bl	80016ee <_isatty>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_isatty_r+0x1a>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_isatty_r+0x1a>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20004558 	.word	0x20004558

08006bcc <_sbrk_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d06      	ldr	r5, [pc, #24]	@ (8006be8 <_sbrk_r+0x1c>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	f7fa fda2 	bl	8001720 <_sbrk>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_sbrk_r+0x1a>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_sbrk_r+0x1a>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20004558 	.word	0x20004558

08006bec <_realloc_r>:
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4615      	mov	r5, r2
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	b921      	cbnz	r1, 8006c02 <_realloc_r+0x16>
 8006bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	f7ff bb29 	b.w	8006254 <_malloc_r>
 8006c02:	b92a      	cbnz	r2, 8006c10 <_realloc_r+0x24>
 8006c04:	f7ff faba 	bl	800617c <_free_r>
 8006c08:	2400      	movs	r4, #0
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	f000 f81a 	bl	8006c48 <_malloc_usable_size_r>
 8006c14:	4285      	cmp	r5, r0
 8006c16:	4606      	mov	r6, r0
 8006c18:	d802      	bhi.n	8006c20 <_realloc_r+0x34>
 8006c1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c1e:	d8f4      	bhi.n	8006c0a <_realloc_r+0x1e>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fb16 	bl	8006254 <_malloc_r>
 8006c28:	4607      	mov	r7, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d0ec      	beq.n	8006c08 <_realloc_r+0x1c>
 8006c2e:	42b5      	cmp	r5, r6
 8006c30:	462a      	mov	r2, r5
 8006c32:	4621      	mov	r1, r4
 8006c34:	bf28      	it	cs
 8006c36:	4632      	movcs	r2, r6
 8006c38:	f7ff fa91 	bl	800615e <memcpy>
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4640      	mov	r0, r8
 8006c40:	f7ff fa9c 	bl	800617c <_free_r>
 8006c44:	463c      	mov	r4, r7
 8006c46:	e7e0      	b.n	8006c0a <_realloc_r+0x1e>

08006c48 <_malloc_usable_size_r>:
 8006c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4c:	1f18      	subs	r0, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bfbc      	itt	lt
 8006c52:	580b      	ldrlt	r3, [r1, r0]
 8006c54:	18c0      	addlt	r0, r0, r3
 8006c56:	4770      	bx	lr

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
